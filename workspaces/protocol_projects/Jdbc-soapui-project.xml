<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project abortOnError="false" activeEnvironment="Default" id="741af92b-800c-489a-9259-150e46ad2022" name="Jdbc" resourceRoot="${projectDir}" runType="SEQUENTIAL" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl}select_autoSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select_auto?WSDL" id="9a8f880b-787a-4aff-8abb-73a21217429f" name="select_auto" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl"><s:element mw:bufferingSize="1024" mw:isEncrypt="no" mw:tableName="qa_jdbc" name="qa_jdbc" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="workingName" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="workingName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="blob_data" mw:dbtype="blob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="blob_data" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="clob_data" mw:dbtype="clob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="clob_data" type="s:string"/></s:sequence></s:complexType></s:element><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="message"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="databaseName" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:qa_jdbc" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:qa_jdbc" name="receiveOutput"/></message><portType name="select_autoPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="select_autoSOAP12Binding" type="tns:select_autoPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/select_auto" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="select_autoSOAP11Binding" type="tns:select_autoPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/select_auto" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="select_autoHTTPGETBinding" type="tns:select_autoPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select_autoHTTPPOSTXMLBinding" type="tns:select_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select_autoHTTPPOSTFORMBinding" type="tns:select_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select_autoHTTPPOSTJSONBinding" type="tns:select_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="select_autoService"><port binding="tns:select_autoSOAP12Binding" name="select_autoSOAP12BindingPort"><soap12:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto"/></port><port binding="tns:select_autoSOAP11Binding" name="select_autoSOAP11BindingPort"><soap11:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto"/></port><port binding="tns:select_autoHTTPGETBinding" name="select_autoHTTPGETBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto"/></port><port binding="tns:select_autoHTTPPOSTXMLBinding" name="select_autoHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto"/></port><port binding="tns:select_autoHTTPPOSTFORMBinding" name="select_autoHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto"/></port><port binding="tns:select_autoHTTPPOSTJSONBinding" name="select_autoHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/select_auto"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_auto</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/select_auto" anonymous="optional" bindingOperationName="receive" id="bd77e5a5-b805-4f38-908d-c26240ceafea" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="9e2dcd47-93c6-454c-b47e-3c5dc9777c3e" name="select_auto">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select_auto</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>select_auto_blob</workingName><blob_data></blob_data><clob_data></clob_data></item><!--Optional:--><message><databaseName>oracle</databaseName></message></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl/select_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl}select_manualSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select_manual?WSDL" id="32fd3216-9d51-47de-aafd-be104006bf02" name="select_manual" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl"><s:element mw:isEncrypt="no" mw:tableName="TAX" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:TAX" name="receiveOutput"/></message><portType name="select_manualPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="select_manualSOAP12Binding" type="tns:select_manualPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/select_manual" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="select_manualSOAP11Binding" type="tns:select_manualPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/select_manual" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="select_manualHTTPGETBinding" type="tns:select_manualPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select_manualHTTPPOSTXMLBinding" type="tns:select_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select_manualHTTPPOSTFORMBinding" type="tns:select_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select_manualHTTPPOSTJSONBinding" type="tns:select_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="select_manualService"><port binding="tns:select_manualSOAP12Binding" name="select_manualSOAP12BindingPort"><soap12:address location="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual"/></port><port binding="tns:select_manualSOAP11Binding" name="select_manualSOAP11BindingPort"><soap11:address location="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual"/></port><port binding="tns:select_manualHTTPGETBinding" name="select_manualHTTPGETBindingPort"><http:address location="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual"/></port><port binding="tns:select_manualHTTPPOSTXMLBinding" name="select_manualHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual"/></port><port binding="tns:select_manualHTTPPOSTFORMBinding" name="select_manualHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual"/></port><port binding="tns:select_manualHTTPPOSTJSONBinding" name="select_manualHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/select_manual" anonymous="optional" bindingOperationName="receive" id="8fbea0b3-59e7-44fb-9fdb-08aca4e35e54" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="943446f8-3a82-4122-aafc-fe530efb6bd9" name="select_manual">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select_manual</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Brewer</NAME>\r
            <!--Optional:-->\r
            <RRL>?</RRL>\r
            <!--Optional:-->\r
            <TAX01>?</TAX01>\r
            <!--Optional:-->\r
            <TAX02>?</TAX02>\r
            <!--Optional:-->\r
            <ADDRCD>?</ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY>?</TAXPAY>\r
         </item>\r
      </sel:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl/select_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl}insert_manualSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert_manual?WSDL" id="223a56c9-d08c-4efe-a7c7-184588cefab5" name="insert_manual" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="insert_manualPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="insert_manualSOAP12Binding" type="tns:insert_manualPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert_manual" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="insert_manualSOAP11Binding" type="tns:insert_manualPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert_manual" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="insert_manualHTTPGETBinding" type="tns:insert_manualPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert_manualHTTPPOSTXMLBinding" type="tns:insert_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert_manualHTTPPOSTFORMBinding" type="tns:insert_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert_manualHTTPPOSTJSONBinding" type="tns:insert_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="insert_manualService"><port binding="tns:insert_manualSOAP12Binding" name="insert_manualSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual"/></port><port binding="tns:insert_manualSOAP11Binding" name="insert_manualSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual"/></port><port binding="tns:insert_manualHTTPGETBinding" name="insert_manualHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual"/></port><port binding="tns:insert_manualHTTPPOSTXMLBinding" name="insert_manualHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual"/></port><port binding="tns:insert_manualHTTPPOSTFORMBinding" name="insert_manualHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual"/></port><port binding="tns:insert_manualHTTPPOSTJSONBinding" name="insert_manualHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_manual"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/insert_manual</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/insert_manual" anonymous="optional" bindingOperationName="receive" id="a7a294d0-5f48-40a9-a63e-ac0ffafed016" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="28296090-92fd-4f1f-8fdd-65be1321ca50" name="insert_manual">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert_manual</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item><!--Optional:--><NAME>QA</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></item><item><!--Optional:--><NAME>QA</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></item></ins:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl/insert_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl}insert_autoSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert_auto?WSDL" id="facc8fbc-0377-4d00-9408-9a8b307e5807" name="insert_auto" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl"><s:element mw:bufferingSize="1024" mw:isEncrypt="no" mw:tableName="qa_jdbc" name="qa_jdbc" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="workingName" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="workingName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="blob_data" mw:dbtype="blob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="blob_data" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="clob_data" mw:dbtype="clob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="clob_data" type="s:string"/></s:sequence></s:complexType></s:element><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="message"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="databaseName" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:qa_jdbc" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="insert_autoPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="insert_autoSOAP12Binding" type="tns:insert_autoPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert_auto" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="insert_autoSOAP11Binding" type="tns:insert_autoPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert_auto" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="insert_autoHTTPGETBinding" type="tns:insert_autoPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert_autoHTTPPOSTXMLBinding" type="tns:insert_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert_autoHTTPPOSTFORMBinding" type="tns:insert_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert_autoHTTPPOSTJSONBinding" type="tns:insert_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="insert_autoService"><port binding="tns:insert_autoSOAP12Binding" name="insert_autoSOAP12BindingPort"><soap12:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto"/></port><port binding="tns:insert_autoSOAP11Binding" name="insert_autoSOAP11BindingPort"><soap11:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto"/></port><port binding="tns:insert_autoHTTPGETBinding" name="insert_autoHTTPGETBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto"/></port><port binding="tns:insert_autoHTTPPOSTXMLBinding" name="insert_autoHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto"/></port><port binding="tns:insert_autoHTTPPOSTFORMBinding" name="insert_autoHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto"/></port><port binding="tns:insert_autoHTTPPOSTJSONBinding" name="insert_autoHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/insert_auto"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert_auto</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/insert_auto" anonymous="optional" bindingOperationName="receive" id="ab96b684-3496-4d63-987d-4340157fe576" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="45e24ae6-d5a5-4749-adca-6f601c272301" name="insert_auto">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert_auto</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>insert_auto_default</workingName>\r
            <blob_data>b</blob_data>\r
            <clob_data>c</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl/insert_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl}update_manualSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/update_manual?WSDL" id="7e99c3ab-82bb-4cd8-8196-f01ef9fd51cf" name="update_manual" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="update_manualPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="update_manualSOAP12Binding" type="tns:update_manualPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/update_manual" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="update_manualSOAP11Binding" type="tns:update_manualPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/update_manual" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="update_manualHTTPGETBinding" type="tns:update_manualPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="update_manualHTTPPOSTXMLBinding" type="tns:update_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="update_manualHTTPPOSTFORMBinding" type="tns:update_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="update_manualHTTPPOSTJSONBinding" type="tns:update_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="update_manualService"><port binding="tns:update_manualSOAP12Binding" name="update_manualSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual"/></port><port binding="tns:update_manualSOAP11Binding" name="update_manualSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual"/></port><port binding="tns:update_manualHTTPGETBinding" name="update_manualHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual"/></port><port binding="tns:update_manualHTTPPOSTXMLBinding" name="update_manualHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual"/></port><port binding="tns:update_manualHTTPPOSTFORMBinding" name="update_manualHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual"/></port><port binding="tns:update_manualHTTPPOSTJSONBinding" name="update_manualHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_manual</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/update_manual" anonymous="optional" bindingOperationName="receive" id="4229fc62-4256-49f3-b04c-9912ff6c9df3" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="cf049598-7a6d-4374-9efb-60fa0697e486" name="update_manual">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/update_manual</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>UpdateManual</NAME>\r
            <!--Optional:-->\r
            <RRL></RRL>\r
            <!--Optional:-->\r
            <TAX01>01</TAX01>\r
            <!--Optional:-->\r
            <TAX02></TAX02>\r
            <!--Optional:-->\r
            <ADDRCD></ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY></TAXPAY>\r
         </item>\r
      </upd:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl/update_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl}update_autoSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/update_auto?WSDL" id="8776a787-e087-4f50-a32f-7d1ba1063e20" name="update_auto" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string" sequence="0"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string" sequence="1"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string" sequence="0"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string" sequence="2"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string" sequence="3"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string" sequence="4"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="update_autoPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="update_autoSOAP12Binding" type="tns:update_autoPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/update_auto" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="update_autoSOAP11Binding" type="tns:update_autoPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/update_auto" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="update_autoHTTPGETBinding" type="tns:update_autoPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="update_autoHTTPPOSTXMLBinding" type="tns:update_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="update_autoHTTPPOSTFORMBinding" type="tns:update_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="update_autoHTTPPOSTJSONBinding" type="tns:update_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="update_autoService"><port binding="tns:update_autoSOAP12Binding" name="update_autoSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto"/></port><port binding="tns:update_autoSOAP11Binding" name="update_autoSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto"/></port><port binding="tns:update_autoHTTPGETBinding" name="update_autoHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto"/></port><port binding="tns:update_autoHTTPPOSTXMLBinding" name="update_autoHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto"/></port><port binding="tns:update_autoHTTPPOSTFORMBinding" name="update_autoHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto"/></port><port binding="tns:update_autoHTTPPOSTJSONBinding" name="update_autoHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/update_auto</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/update_auto" anonymous="optional" bindingOperationName="receive" id="670ccc16-dcf1-43b8-9c8a-060878c33fa1" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="6afc4f05-0177-44d8-9202-db14c38aeaf3" name="update_auto">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/update_auto</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item><!--Optional:--><NAME>UpdateAuto</NAME><!--Optional:--><RRL></RRL><!--Optional:--><TAX01>01</TAX01><!--Optional:--><TAX02></TAX02><!--Optional:--><ADDRCD></ADDRCD><!--Optional:--><TAXPAY></TAXPAY></item></upd:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl/update_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl}delete_autoSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto?wsdl" id="67dd3db3-ff33-4333-9096-a95369b05a4b" name="delete_auto" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto?wsdl" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto?wsdl</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl"><s:element mw:bufferingSize="1024" mw:isEncrypt="no" mw:tableName="qa_jdbc" name="qa_jdbc" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="workingName" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="workingName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:dbtype="blob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="blob_data" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:dbtype="clob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="clob_data" type="s:string"/></s:sequence></s:complexType></s:element><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="message"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="databaseName" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:qa_jdbc" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="delete_autoPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="delete_autoSOAP12Binding" type="tns:delete_autoPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/delete_auto" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="delete_autoSOAP11Binding" type="tns:delete_autoPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/delete_auto" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="delete_autoHTTPGETBinding" type="tns:delete_autoPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="delete_autoHTTPPOSTXMLBinding" type="tns:delete_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="delete_autoHTTPPOSTFORMBinding" type="tns:delete_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="delete_autoHTTPPOSTJSONBinding" type="tns:delete_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="delete_autoService"><port binding="tns:delete_autoSOAP12Binding" name="delete_autoSOAP12BindingPort"><soap12:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto"/></port><port binding="tns:delete_autoSOAP11Binding" name="delete_autoSOAP11BindingPort"><soap11:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto"/></port><port binding="tns:delete_autoHTTPGETBinding" name="delete_autoHTTPGETBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto"/></port><port binding="tns:delete_autoHTTPPOSTXMLBinding" name="delete_autoHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto"/></port><port binding="tns:delete_autoHTTPPOSTFORMBinding" name="delete_autoHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto"/></port><port binding="tns:delete_autoHTTPPOSTJSONBinding" name="delete_autoHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.54:57720/mediate/qa/run/protocol/Jdbc/delete_auto"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/delete_auto" anonymous="optional" bindingOperationName="receive" id="e9911396-3b32-4e9a-996a-f61d70f095ed" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="30455f92-4c19-4b67-8132-6af99eec0e4d" name="delete_auto">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl}delete_manualSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_manual?WSDL" id="c159eeb6-604e-4921-a1c1-2426ea9e8cc1" name="delete_manual" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="delete_manualPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="delete_manualSOAP12Binding" type="tns:delete_manualPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/delete_manual" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="delete_manualSOAP11Binding" type="tns:delete_manualPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/delete_manual" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="delete_manualHTTPGETBinding" type="tns:delete_manualPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="delete_manualHTTPPOSTXMLBinding" type="tns:delete_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="delete_manualHTTPPOSTFORMBinding" type="tns:delete_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="delete_manualHTTPPOSTJSONBinding" type="tns:delete_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="delete_manualService"><port binding="tns:delete_manualSOAP12Binding" name="delete_manualSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual"/></port><port binding="tns:delete_manualSOAP11Binding" name="delete_manualSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual"/></port><port binding="tns:delete_manualHTTPGETBinding" name="delete_manualHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual"/></port><port binding="tns:delete_manualHTTPPOSTXMLBinding" name="delete_manualHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual"/></port><port binding="tns:delete_manualHTTPPOSTFORMBinding" name="delete_manualHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual"/></port><port binding="tns:delete_manualHTTPPOSTJSONBinding" name="delete_manualHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/delete_manual</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/delete_manual" anonymous="optional" bindingOperationName="receive" id="8c9a0637-5ad4-4e6e-8933-31c7a2d62940" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="c85a2e4c-24aa-4d9f-be36-2b927244f3fa" name="delete_manual">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_manual</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Brewer</NAME>\r
            <!--Optional:-->\r
            <RRL></RRL>\r
            <!--Optional:-->\r
            <TAX01></TAX01>\r
            <!--Optional:-->\r
            <TAX02></TAX02>\r
            <!--Optional:-->\r
            <ADDRCD></ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY></TAXPAY>\r
         </item>\r
      </del:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl/delete_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl}upsert_autoSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/upsert_auto?WSDL" id="5fb794b4-fdf6-4bab-8570-ce6934fe35a0" name="upsert_auto" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string" sequence="0"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string" sequence="0"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string" sequence="1"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string" sequence="2"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string" sequence="3"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string" sequence="4"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="upsert_autoPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="upsert_autoSOAP12Binding" type="tns:upsert_autoPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/upsert_auto" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="upsert_autoSOAP11Binding" type="tns:upsert_autoPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/upsert_auto" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="upsert_autoHTTPGETBinding" type="tns:upsert_autoPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="upsert_autoHTTPPOSTXMLBinding" type="tns:upsert_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="upsert_autoHTTPPOSTFORMBinding" type="tns:upsert_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="upsert_autoHTTPPOSTJSONBinding" type="tns:upsert_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="upsert_autoService"><port binding="tns:upsert_autoSOAP12Binding" name="upsert_autoSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto"/></port><port binding="tns:upsert_autoSOAP11Binding" name="upsert_autoSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto"/></port><port binding="tns:upsert_autoHTTPGETBinding" name="upsert_autoHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto"/></port><port binding="tns:upsert_autoHTTPPOSTXMLBinding" name="upsert_autoHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto"/></port><port binding="tns:upsert_autoHTTPPOSTFORMBinding" name="upsert_autoHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto"/></port><port binding="tns:upsert_autoHTTPPOSTJSONBinding" name="upsert_autoHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/upsert_auto</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/upsert_auto" anonymous="optional" bindingOperationName="receive" id="a4ee0f25-e429-478d-9be1-7eac1626e818" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="ac66a835-bc48-47de-b893-1170f52ed990" name="upsert_auto">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/upsert_auto</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Kim</NAME>\r
            <!--Optional:-->\r
            <RRL>123456-1234567</RRL>\r
            <!--Optional:-->\r
            <TAX01>10</TAX01>\r
            <!--Optional:-->\r
            <TAX02>98</TAX02>\r
            <!--Optional:-->\r
            <ADDRCD>01</ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY>-500 won</TAXPAY>\r
         </item>\r
         <item><!--Optional:--><NAME>QA</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>10</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></item></ups:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl/upsert_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl}select2_autoSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select2_auto?WSDL" id="7e4f865d-d997-47c6-a4f7-ea172da8e6be" name="select2_auto" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" mw:tableName="TAX" name="TAX_Result"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:TAX_Result" name="receiveOutput"/></message><portType name="select2_autoPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="select2_autoSOAP12Binding" type="tns:select2_autoPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/select2_auto" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="select2_autoSOAP11Binding" type="tns:select2_autoPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/select2_auto" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="select2_autoHTTPGETBinding" type="tns:select2_autoPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select2_autoHTTPPOSTXMLBinding" type="tns:select2_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select2_autoHTTPPOSTFORMBinding" type="tns:select2_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select2_autoHTTPPOSTJSONBinding" type="tns:select2_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="select2_autoService"><port binding="tns:select2_autoSOAP12Binding" name="select2_autoSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto"/></port><port binding="tns:select2_autoSOAP11Binding" name="select2_autoSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto"/></port><port binding="tns:select2_autoHTTPGETBinding" name="select2_autoHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto"/></port><port binding="tns:select2_autoHTTPPOSTXMLBinding" name="select2_autoHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto"/></port><port binding="tns:select2_autoHTTPPOSTFORMBinding" name="select2_autoHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto"/></port><port binding="tns:select2_autoHTTPPOSTJSONBinding" name="select2_autoHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_auto</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/select2_auto" anonymous="optional" bindingOperationName="receive" id="c84d25f2-69bd-42a0-a6dd-0116237449bd" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="8cf5a4ff-ba1c-4ee9-9997-4ccbf8ae1cd2" name="select2_auto">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select2_auto</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:TAX>\r
         <!--Optional:-->\r
         <NAME>Kim</NAME>\r
         <!--Optional:-->\r
         <RRL></RRL>\r
         <!--Optional:-->\r
         <TAX01>01</TAX01>\r
         <!--Optional:-->\r
         <TAX02></TAX02>\r
         <!--Optional:-->\r
         <ADDRCD></ADDRCD>\r
         <!--Optional:-->\r
         <TAXPAY></TAXPAY>\r
      </sel:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl/select2_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl}select2_manualSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select2_manual?WSDL" id="275126a9-5ec6-45aa-b72e-f1a35e6678d5" name="select2_manual" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" mw:tableName="TAX" name="TAX_Result"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:TAX_Result" name="receiveOutput"/></message><portType name="select2_manualPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="select2_manualSOAP12Binding" type="tns:select2_manualPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/select2_manual" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="select2_manualSOAP11Binding" type="tns:select2_manualPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/select2_manual" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="select2_manualHTTPGETBinding" type="tns:select2_manualPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select2_manualHTTPPOSTXMLBinding" type="tns:select2_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select2_manualHTTPPOSTFORMBinding" type="tns:select2_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="select2_manualHTTPPOSTJSONBinding" type="tns:select2_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="select2_manualService"><port binding="tns:select2_manualSOAP12Binding" name="select2_manualSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual"/></port><port binding="tns:select2_manualSOAP11Binding" name="select2_manualSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual"/></port><port binding="tns:select2_manualHTTPGETBinding" name="select2_manualHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual"/></port><port binding="tns:select2_manualHTTPPOSTXMLBinding" name="select2_manualHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual"/></port><port binding="tns:select2_manualHTTPPOSTFORMBinding" name="select2_manualHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual"/></port><port binding="tns:select2_manualHTTPPOSTJSONBinding" name="select2_manualHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/select2_manual</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/select2_manual" anonymous="optional" bindingOperationName="receive" id="1f78caad-b4c0-4f0f-be5e-1e240a0c9a2c" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="15b8f549-f916-4b34-88bd-dfcf9403976a" name="select2_manual">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select2_manual</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:TAX>\r
         <!--Optional:-->\r
         <NAME></NAME>\r
         <!--Optional:-->\r
         <RRL></RRL>\r
         <!--Optional:-->\r
         <TAX01></TAX01>\r
         <!--Optional:-->\r
         <TAX02></TAX02>\r
         <!--Optional:-->\r
         <ADDRCD></ADDRCD>\r
         <!--Optional:-->\r
         <TAXPAY></TAXPAY>\r
      </sel:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl/select2_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl}insert2_autoSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert2_auto?WSDL" id="b3b8d08b-de18-4081-bb71-46cc9743b679" name="insert2_auto" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="insert2_autoPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="insert2_autoSOAP12Binding" type="tns:insert2_autoPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert2_auto" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="insert2_autoSOAP11Binding" type="tns:insert2_autoPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert2_auto" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="insert2_autoHTTPGETBinding" type="tns:insert2_autoPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert2_autoHTTPPOSTXMLBinding" type="tns:insert2_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert2_autoHTTPPOSTFORMBinding" type="tns:insert2_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert2_autoHTTPPOSTJSONBinding" type="tns:insert2_autoPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="insert2_autoService"><port binding="tns:insert2_autoSOAP12Binding" name="insert2_autoSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto"/></port><port binding="tns:insert2_autoSOAP11Binding" name="insert2_autoSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto"/></port><port binding="tns:insert2_autoHTTPGETBinding" name="insert2_autoHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto"/></port><port binding="tns:insert2_autoHTTPPOSTXMLBinding" name="insert2_autoHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto"/></port><port binding="tns:insert2_autoHTTPPOSTFORMBinding" name="insert2_autoHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto"/></port><port binding="tns:insert2_autoHTTPPOSTJSONBinding" name="insert2_autoHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_auto</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/insert2_auto" anonymous="optional" bindingOperationName="receive" id="0da4c176-e5c8-46f5-bea5-a475c86b5046" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="c591abac-dda3-4368-8f26-8dc5cb2aaa9a" name="insert2_auto">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert2_auto</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:TAX>\r
         <!--Optional:-->\r
         <NAME>Insert2Auto</NAME>\r
         <!--Optional:-->\r
         <RRL>123456-1234567</RRL>\r
         <!--Optional:-->\r
         <TAX01>99</TAX01>\r
         <!--Optional:-->\r
         <TAX02>98</TAX02>\r
         <!--Optional:-->\r
         <ADDRCD>01</ADDRCD>\r
         <!--Optional:-->\r
         <TAXPAY>-500 won</TAXPAY>\r
      </ins:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl/insert2_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl}insert2_manualSOAP12Binding" definition="http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert2_manual?WSDL" id="bae87467-9c94-4ff0-a917-8bb9e7d93e7c" name="insert2_manual" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl"><s:element mw:isEncrypt="no" mw:tableName="JDBC_TEST" name="TAX"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="NAME" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="NAME" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="RRL" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="RRL" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX01" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX01" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAX02" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="2" mw:preamble="" name="TAX02" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="ADDRCD" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="50" mw:preamble="" name="ADDRCD" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="TAXPAY" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="20" mw:preamble="" name="TAXPAY" type="s:string"/></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:TAX" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="insert2_manualPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="insert2_manualSOAP12Binding" type="tns:insert2_manualPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert2_manual" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="insert2_manualSOAP11Binding" type="tns:insert2_manualPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert2_manual" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="insert2_manualHTTPGETBinding" type="tns:insert2_manualPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert2_manualHTTPPOSTXMLBinding" type="tns:insert2_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert2_manualHTTPPOSTFORMBinding" type="tns:insert2_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insert2_manualHTTPPOSTJSONBinding" type="tns:insert2_manualPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/TAX"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="insert2_manualService"><port binding="tns:insert2_manualSOAP12Binding" name="insert2_manualSOAP12BindingPort"><soap12:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual"/></port><port binding="tns:insert2_manualSOAP11Binding" name="insert2_manualSOAP11BindingPort"><soap11:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual"/></port><port binding="tns:insert2_manualHTTPGETBinding" name="insert2_manualHTTPGETBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual"/></port><port binding="tns:insert2_manualHTTPPOSTXMLBinding" name="insert2_manualHTTPPOSTXMLBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual"/></port><port binding="tns:insert2_manualHTTPPOSTFORMBinding" name="insert2_manualHTTPPOSTFORMBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual"/></port><port binding="tns:insert2_manualHTTPPOSTJSONBinding" name="insert2_manualHTTPPOSTJSONBindingPort"><http:address location="http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://192.168.0.8:57020/mediate/qa/run/protocol/Jdbc/insert2_manual</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/insert2_manual" anonymous="optional" bindingOperationName="receive" id="5946441a-d0bc-42d0-9f74-02a11a978242" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="f1dcefd7-b491-4616-8dcf-a6011d4438c1" name="insert2_manual">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert2_manual</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:TAX><!--Optional:--><NAME>Insert2Manual</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></ins:TAX></soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl/insert2_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl}selectSOAP12Binding" definition="http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select?WSDL" id="c518380a-080a-495f-9cf2-61e76ba12dd5" name="select" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/select?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><s:element mw:bufferingSize="1024" mw:isEncrypt="no" mw:tableName="qa_jdbc" name="qa_jdbc" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="workingName" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="workingName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="blob_data" mw:dbtype="blob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="blob_data" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="clob_data" mw:dbtype="clob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="clob_data" type="s:string"/></s:sequence></s:complexType></s:element><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="properties"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="databaseName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="sql" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:qa_jdbc" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:qa_jdbc" name="receiveOutput"/></message><portType name="selectPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="selectSOAP12Binding" type="tns:selectPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/select" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="selectSOAP11Binding" type="tns:selectPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/select" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="selectHTTPGETBinding" type="tns:selectPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="selectHTTPPOSTXMLBinding" type="tns:selectPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="selectHTTPPOSTFORMBinding" type="tns:selectPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="selectHTTPPOSTJSONBinding" type="tns:selectPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="selectService"><port binding="tns:selectSOAP12Binding" name="selectSOAP12BindingPort"><soap12:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/select"/></port><port binding="tns:selectSOAP11Binding" name="selectSOAP11BindingPort"><soap11:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/select"/></port><port binding="tns:selectHTTPGETBinding" name="selectHTTPGETBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/select"/></port><port binding="tns:selectHTTPPOSTXMLBinding" name="selectHTTPPOSTXMLBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/select"/></port><port binding="tns:selectHTTPPOSTFORMBinding" name="selectHTTPPOSTFORMBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/select"/></port><port binding="tns:selectHTTPPOSTJSONBinding" name="selectHTTPPOSTJSONBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/select"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/select" anonymous="optional" bindingOperationName="receive" id="55c37bad-ebd6-48dd-84f9-bba0a2eb1c06" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="80908323-21f1-4898-8388-6ca316de9520" name="select">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>select_auto</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>oracle</databaseName><sql></sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl}insertSOAP12Binding" definition="http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert?WSDL" id="b87faa2c-16fa-43a3-aa55-65e0edb4ce55" name="insert" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/insert?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/insert?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl"><s:element mw:bufferingSize="1024" mw:isEncrypt="no" mw:tableName="qa_jdbc" name="qa_jdbc" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="workingName" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="workingName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="blob_data" mw:dbtype="blob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="blob_data" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="clob_data" mw:dbtype="clob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="clob_data" type="s:string"/></s:sequence></s:complexType></s:element><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="properties"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="databaseName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="sql" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:qa_jdbc" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="insertPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="insertSOAP12Binding" type="tns:insertPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="insertSOAP11Binding" type="tns:insertPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/insert" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="insertHTTPGETBinding" type="tns:insertPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insertHTTPPOSTXMLBinding" type="tns:insertPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insertHTTPPOSTFORMBinding" type="tns:insertPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="insertHTTPPOSTJSONBinding" type="tns:insertPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="insertService"><port binding="tns:insertSOAP12Binding" name="insertSOAP12BindingPort"><soap12:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/insert"/></port><port binding="tns:insertSOAP11Binding" name="insertSOAP11BindingPort"><soap11:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/insert"/></port><port binding="tns:insertHTTPGETBinding" name="insertHTTPGETBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/insert"/></port><port binding="tns:insertHTTPPOSTXMLBinding" name="insertHTTPPOSTXMLBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/insert"/></port><port binding="tns:insertHTTPPOSTFORMBinding" name="insertHTTPPOSTFORMBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/insert"/></port><port binding="tns:insertHTTPPOSTJSONBinding" name="insertHTTPPOSTJSONBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/insert"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/insert" anonymous="optional" bindingOperationName="receive" id="9d72638e-0de2-4811-969c-458cc802eaf8" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="04fbaa67-805c-4217-9f12-d9c4403c7218" name="insert">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
        <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>insert_auto</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>oracle</databaseName>\r
            <sql/>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl}deleteSOAP12Binding" definition="http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete?WSDL" id="7f689ef5-5c95-4471-ad5f-32b3da75a02e" name="delete" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/delete?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/delete?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl"><s:element mw:bufferingSize="1024" mw:isEncrypt="no" mw:tableName="qa_jdbc" name="qa_jdbc" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="workingName" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="workingName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="blob_data" mw:dbtype="blob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="blob_data" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="clob_data" mw:dbtype="clob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="clob_data" type="s:string"/></s:sequence></s:complexType></s:element><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="properties"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="databaseName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="sql" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:qa_jdbc" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="deletePortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="deleteSOAP12Binding" type="tns:deletePortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/delete" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="deleteSOAP11Binding" type="tns:deletePortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/delete" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="deleteHTTPGETBinding" type="tns:deletePortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="deleteHTTPPOSTXMLBinding" type="tns:deletePortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="deleteHTTPPOSTFORMBinding" type="tns:deletePortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="deleteHTTPPOSTJSONBinding" type="tns:deletePortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="deleteService"><port binding="tns:deleteSOAP12Binding" name="deleteSOAP12BindingPort"><soap12:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/delete"/></port><port binding="tns:deleteSOAP11Binding" name="deleteSOAP11BindingPort"><soap11:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/delete"/></port><port binding="tns:deleteHTTPGETBinding" name="deleteHTTPGETBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/delete"/></port><port binding="tns:deleteHTTPPOSTXMLBinding" name="deleteHTTPPOSTXMLBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/delete"/></port><port binding="tns:deleteHTTPPOSTFORMBinding" name="deleteHTTPPOSTFORMBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/delete"/></port><port binding="tns:deleteHTTPPOSTJSONBinding" name="deleteHTTPPOSTJSONBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/delete"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/delete" anonymous="optional" bindingOperationName="receive" id="9ad10170-ed83-49ed-9d81-dc17686cfac7" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="0e5ae077-bce1-4e35-b06d-4b2bf2a868e3" name="delete">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>oracle</databaseName>\r
            <sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl}updateSOAP12Binding" definition="http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update?WSDL" id="c16df161-84b1-487c-be7f-4200086a2cb8" name="update" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    
    <con:definitionCache type="TEXT"/><con:endpoints>
      <con:endpoint>http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/update" anonymous="optional" bindingOperationName="receive" id="eff51b8b-e3a3-4ed8-b3e9-17573c303ee8" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="de84fe3c-f3cc-4ff3-bec2-306dde26d0c6" name="update">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>update_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>oracle</databaseName>\r
            <sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface anonymous="optional" bindingName="{urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl}upsertSOAP12Binding" definition="http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert?WSDL" id="13a03e10-c17a-4bf3-846a-34c2948ab5d0" name="upsert" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache rootPart="http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/upsert?WSDL" type="TEXT">
      <con:part>
        <con:url>http://192.168.0.130:57720/mediate/qa/run/protocol/Jdbc/upsert?WSDL</con:url>
        <con:content><![CDATA[
          
          <definitions targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:mw="http://www.mobicware.com" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap11="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:tns="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl" xmlns:wsa="http://www.w3.org/2005/08/addressing"><types><s:schema targetNamespace="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl"><s:element mw:bufferingSize="1024" mw:isEncrypt="no" mw:tableName="qa_jdbc" name="qa_jdbc" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="unbounded" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="item"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="workingName" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="yes" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="workingName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="blob_data" mw:dbtype="blob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="blob_data" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="clob_data" mw:dbtype="clob" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="clob_data" type="s:string"/></s:sequence></s:complexType></s:element><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:isCondition="no" mw:isEncrypt="no" mw:preamble="" mw:tableName="" name="properties"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="databaseName" type="s:string"/><s:element maxOccurs="1" minOccurs="1" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="sql" type="s:string"/></s:sequence></s:complexType></s:element></s:sequence></s:complexType></s:element><s:element mw:isEncrypt="no" name="result" xmlns:mw="http://www/mobicware.com"><s:complexType><s:sequence><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="operation" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="insert" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="update" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="success" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="failure" type="s:string"/><s:element maxOccurs="1" minOccurs="0" mw:column="" mw:delimiter="" mw:encoding="Plain" mw:function="" mw:isCondition="no" mw:isEncrypt="no" mw:length="0" mw:preamble="" name="fault" type="s:string"/></s:sequence></s:complexType></s:element></s:schema></types><message name="receiveInputMessage"><part element="tns:qa_jdbc" name="receiveInput"/></message><message name="receiveOutputMessage"><part element="tns:result" name="receiveOutput"/></message><portType name="upsertPortType"><operation name="receive"><input message="tns:receiveInputMessage" name="receiveInput"/><output message="tns:receiveOutputMessage" name="receiveOutput"/></operation></portType><binding name="upsertSOAP12Binding" type="tns:upsertPortType"><soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap12:operation soapAction="/mediate/qa/run/protocol/Jdbc/upsert" style="document"/><input name="receiveInput"><soap12:body use="literal"/></input><output name="receiveOutput"><soap12:body use="literal"/></output></operation></binding><binding name="upsertSOAP11Binding" type="tns:upsertPortType"><soap11:binding transport="http://schemas.xmlsoap.org/soap/http"/><operation name="receive"><soap11:operation soapAction="/mediate/qa/run/protocol/Jdbc/upsert" style="document"/><input name="receiveInput"><soap11:body use="literal"/></input><output name="receiveOutput"><soap11:body use="literal"/></output></operation></binding><binding name="upsertHTTPGETBinding" type="tns:upsertPortType"><http:binding verb="GET"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><http:urlEncoded/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="upsertHTTPPOSTXMLBinding" type="tns:upsertPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/xml"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="upsertHTTPPOSTFORMBinding" type="tns:upsertPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/x-www-form-urlencoded"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><binding name="upsertHTTPPOSTJSONBinding" type="tns:upsertPortType"><http:binding verb="POST"/><operation name="receive"><http:operation location="/qa_jdbc"/><input name="receiveInput"><mime:content part="receiveInput" type="application/json"/></input><output name="receiveOutput"><mime:mimeXml part="Body"/></output></operation></binding><service name="upsertService"><port binding="tns:upsertSOAP12Binding" name="upsertSOAP12BindingPort"><soap12:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/upsert"/></port><port binding="tns:upsertSOAP11Binding" name="upsertSOAP11BindingPort"><soap11:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/upsert"/></port><port binding="tns:upsertHTTPGETBinding" name="upsertHTTPGETBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/upsert"/></port><port binding="tns:upsertHTTPPOSTXMLBinding" name="upsertHTTPPOSTXMLBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/upsert"/></port><port binding="tns:upsertHTTPPOSTFORMBinding" name="upsertHTTPPOSTFORMBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/upsert"/></port><port binding="tns:upsertHTTPPOSTJSONBinding" name="upsertHTTPPOSTJSONBindingPort"><http:address location="http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/upsert"/></port></service></definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://127.0.0.1:57720/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
    </con:endpoints>
    <con:operation action="/mediate/qa/run/protocol/Jdbc/upsert" anonymous="optional" bindingOperationName="receive" id="1e56cc8c-c4d6-406b-8eee-22a63d3d5807" inputName="receiveInput" isOneWay="false" name="receive" outputName="receiveOutput" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call id="be98aa64-4258-486c-8a9b-95cbab7d4145" name="upsert">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
        <con:request><![CDATA[
          
          <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>upsert_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>oracle</databaseName>\r
            <sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
        <con:credentials>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:testSuite id="3662eb95-0449-4c25-9310-606702614ccd" name="JdbcTestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a1164991-0692-4484-a4d6-528c7f75d3c9" keepSession="false" maxResults="0" name="select_auto" searchProperties="true">
      <con:settings/>
      <con:testStep id="34a6c5a4-a5a1-4e2f-a3b4-22b77da5a673" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="63edce17-6042-4253-8633-0a328b1f92b0" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Kim</NAME>\r
            <!--Optional:-->\r
            <RRL></RRL>\r
            <!--Optional:-->\r
            <TAX01></TAX01>\r
            <!--Optional:-->\r
            <TAX02></TAX02>\r
            <!--Optional:-->\r
            <ADDRCD></ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY></TAXPAY>\r
         </item>\r
      </sel:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="7f0c5735-1a66-47e5-824c-e4659229b9ce" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f7c8c738-d812-4cc4-9d7f-9c8232c57d72" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="4a60a6de-7781-42c6-9038-989ac35ec053" name="&lt;item>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4a60a6de-7781-42c6-9038-989ac35ec053" name="&lt;TAX02>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//TAX02)</path>
                <content>8</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_auto/select_auto.wsdl/select_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8dd1cef3-8950-443a-b20d-a80273ebbdda" keepSession="false" maxResults="0" name="select_manual" searchProperties="true">
      <con:settings/>
      <con:testStep id="97714c02-f2e9-4ff6-8633-ba55ee678eb1" name="receive - select_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select_manual</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e95dd0c4-3762-4492-870b-2d0aa503ac0e" incomingWss="" name="receive - select_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select_manual</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Brewer</NAME>\r
            <!--Optional:-->\r
            <RRL></RRL>\r
            <!--Optional:-->\r
            <TAX01></TAX01>\r
            <!--Optional:-->\r
            <TAX02></TAX02>\r
            <!--Optional:-->\r
            <ADDRCD></ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY></TAXPAY>\r
         </item>\r
      </sel:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="f9e5280c-a56d-48b6-b5e2-bda111a134ea" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="7359c3fc-a5cc-43e3-8f70-852b14043a0e" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="9bfb9d0a-1d5f-438c-8b67-4323bbb89a23" name="&lt;item>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="18f0b18f-25d2-400e-b0d8-3966e66b44dc" name="&lt;TAX02>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//TAX02)</path>
                <content>8</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select_manual/select_manual.wsdl/select_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="e3c4360b-f7af-4334-a7a9-18b3000ea20d" keepSession="false" maxResults="0" name="insert_manual" searchProperties="true">
      <con:settings/>
      <con:testStep id="445d1f1d-8047-4c01-bf6f-bac0c38a56c4" name="receive - insert_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert_manual</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="7ff4e41b-c2cf-4fe6-b223-6ff1c84b96e4" incomingWss="" name="receive - insert_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert_manual</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item><!--Optional:--><NAME>InsertManual</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></item><item><!--Optional:--><NAME>InsertManual</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></item></ins:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="0d943bf0-20ba-45b7-8096-55e305767b20" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="9b362d17-b714-4ec0-8683-dc80a170ff97" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="38d9c93e-6912-4dcd-9c7f-64b6f2a0480d" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Insert</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="613e2ecc-0f11-4a12-8867-23405f666075" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def selectScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'InsertManual'
  """
// execute the delete rows script
List result = sql.rows(selectScript)

// close connection
sql.close()

assert result.size() == 2</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_manual/insert_manual.wsdl/insert_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="bbcfc8ac-8412-4464-bd80-688619732860" keepSession="false" maxResults="0" name="insert_auto" searchProperties="true">
      <con:settings/>
      <con:testStep id="5434deee-e556-4028-a4bf-856b45a336d1" name="receive - insert_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="d38236a3-7813-48bb-8f5d-8a343e73bc5a" incomingWss="" name="receive - insert_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>InsertAuto</NAME>\r
            <!--Optional:-->\r
            <RRL>123456-1234567</RRL>\r
            <!--Optional:-->\r
            <TAX01>99</TAX01>\r
            <!--Optional:-->\r
            <TAX02>98</TAX02>\r
            <!--Optional:-->\r
            <ADDRCD>01</ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY>-500 won</TAXPAY>\r
         </item>\r
         <item><!--Optional:--><NAME>InsertAuto</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></item></ins:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="6e0313f2-e1c9-471a-a03c-7d62bcc0983b" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ddfa9866-00e2-485d-ae29-84c7b19f7572" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="550cef32-9cca-49bb-930c-e631d17e8580" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Insert</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="ad1d1d00-5543-4345-84ad-4e2001e673b2" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def selectScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'InsertAuto'
  """
// execute the delete rows script
List result = sql.rows(selectScript)

// close connection
sql.close()

assert result.size() == 2</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert_auto/insert_auto.wsdl/insert_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8b05f4cf-ff64-4379-a452-3d178fb9df72" keepSession="false" maxResults="0" name="update_manual" searchProperties="true">
      <con:settings/>
      <con:testStep id="1a205b02-818e-4cc2-b59b-72b640726e51" name="receive - update_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update_manual</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="2613718c-aa0b-48db-b9ce-595d963d4067" incomingWss="" name="receive - update_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/update_manual</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>UpdateManual</NAME>\r
            <!--Optional:-->\r
            <RRL></RRL>\r
            <!--Optional:-->\r
            <TAX01>01</TAX01>\r
            <!--Optional:-->\r
            <TAX02></TAX02>\r
            <!--Optional:-->\r
            <ADDRCD></ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY></TAXPAY>\r
         </item>\r
      </upd:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="37dfed67-ae59-45e1-b1c6-2b2b35e33f5f" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="92ea7b70-23f9-405e-a2d1-5de29eb05732" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="9c515956-08c2-4d47-9f0c-0bb4487d3dd1" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Update</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e8ced734-7b46-4a72-b33e-1044491beaed" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def selectScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'UpdateManual'
  """
// execute the delete rows script
List result = sql.rows(selectScript)

// close connection
sql.close()

assert result.size() == 50</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_manual/update_manual.wsdl/update_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3b43a808-e44f-4267-b103-d7f53a3b7c42" keepSession="false" maxResults="0" name="update_auto" searchProperties="true">
      <con:settings/>
      <con:testStep id="a4ad0d80-1545-472b-8b0b-8c73f14f1527" name="receive - update_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="79a159bc-8b1c-4dd6-8e63-f39ee061d179" incomingWss="" name="receive - update_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/update_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item><!--Optional:--><NAME>UpdateAuto</NAME><!--Optional:--><RRL></RRL><!--Optional:--><TAX01>01</TAX01><!--Optional:--><TAX02></TAX02><!--Optional:--><ADDRCD></ADDRCD><!--Optional:--><TAXPAY></TAXPAY></item></upd:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="6797359f-1168-42c8-a895-5ef5df2d8f6c" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="6b0910fb-a431-424b-9ed5-eb0fcb84d7cb" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="b3c27966-613f-4a27-acc5-32d762fa565a" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Update</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f4e99a80-d91d-4deb-a9b5-934f677ce39c" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def selectScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'UpdateAuto'
  """
// execute the delete rows script
List result = sql.rows(selectScript)

// close connection
sql.close()

assert result.size() == 50</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update_auto/update_auto.wsdl/update_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="97f0b7d0-e8cc-42c2-ad3a-697afcfedc79" keepSession="false" maxResults="0" name="delete_auto" searchProperties="true">
      <con:settings/>
      <con:testStep id="e194ffdd-a630-4462-962d-980bed787f1d" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="6459a0b2-0d12-4ea4-b67a-9bda3077d425" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Kim</NAME>\r
            <!--Optional:-->\r
            <RRL></RRL>\r
            <!--Optional:-->\r
            <TAX01></TAX01>\r
            <!--Optional:-->\r
            <TAX02></TAX02>\r
            <!--Optional:-->\r
            <ADDRCD></ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY></TAXPAY>\r
         </item>\r
      </del:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="db65706b-6667-4644-aaec-38fdd80a126e" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="4d4f6c8a-cf2b-49f3-8233-cc450647c761" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="937c359b-01c3-4fc5-9536-daeeea246d99" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Delete</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eb0cd798-1092-4e07-b73b-337498c8183a" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def selectScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'Kim'
  """
// execute the delete rows script
List result = sql.rows(selectScript)

// close connection
sql.close()

assert result.size() == 0</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b767952b-1e34-4081-9993-2eab7d312b96" keepSession="false" maxResults="0" name="delete_manual" searchProperties="true">
      <con:settings/>
      <con:testStep id="f0ec0257-b974-411e-8f04-fee7dd234dca" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_manual</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="9ff964d0-deff-4ac5-b185-58f8dfd4b4e6" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_manual</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Brewer</NAME>\r
            <!--Optional:-->\r
            <RRL></RRL>\r
            <!--Optional:-->\r
            <TAX01></TAX01>\r
            <!--Optional:-->\r
            <TAX02></TAX02>\r
            <!--Optional:-->\r
            <ADDRCD></ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY></TAXPAY>\r
         </item>\r
      </del:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="dd07f0a1-af20-4f2a-bff5-4e96c1a9360b" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="eaa541b1-35fb-4485-8bf8-219488b0bfcb" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="dba3365a-40ca-4e4f-b666-55874688d030" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Delete</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="54baf210-a3fb-4c48-aac2-f77c11e12c4a" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def selectScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'Brewer'
  """
// execute the delete rows script
List result = sql.rows(selectScript)

// close connection
sql.close()

assert result.size() == 0</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_manual/delete_manual.wsdl/delete_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="746fd60b-a1e2-4cd4-b771-83d00cbf2d28" keepSession="false" maxResults="0" name="upsert_auto" searchProperties="true">
      <con:settings/>
      <con:testStep id="2b9253b0-da0f-43e1-9ebb-588aa1e310c9" name="receive - upsert_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e2ba3b39-751c-48bb-ba89-0c2bfcb52dc6" incomingWss="" name="receive - upsert_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/upsert_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:TAX>\r
         <!--Zero or more repetitions:-->\r
         <item>\r
            <!--Optional:-->\r
            <NAME>Kim</NAME>\r
            <!--Optional:-->\r
            <RRL>123456-1234567</RRL>\r
            <!--Optional:-->\r
            <TAX01>10</TAX01>\r
            <!--Optional:-->\r
            <TAX02>98</TAX02>\r
            <!--Optional:-->\r
            <ADDRCD>01</ADDRCD>\r
            <!--Optional:-->\r
            <TAXPAY>-500 won</TAXPAY>\r
         </item>\r
         <item><!--Optional:--><NAME>QA</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>10</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></item></ups:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="c55842c6-9f9a-4992-a7e0-5aed7362ace5" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="c5fb7bc7-1c8d-4047-9a7d-23f3b6f0c185" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="67f49bee-bd7b-48fc-b09b-fb72168af55c" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Upsert</operation>
.*<success>\d*</success>
.*<insert>\d*</insert>
.*<update>\d*</update>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="d7d9c349-e230-4e89-b993-acfaca81eff6" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def selectScript = """
  SELECT * FROM JDBC_TEST WHERE TAX01 = '10'
  """
// execute the delete rows script
List result = sql.rows(selectScript)

// close connection
sql.close()

assert result.size() == 2</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert_auto/upsert_auto.wsdl/upsert_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// insert data
sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
'Kim', '123456-1234567', '99', '98', '01', '100000 won');

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="55e81672-95e2-4074-a937-675fa362be1c" keepSession="false" maxResults="0" name="select2_auto" searchProperties="true">
      <con:settings/>
      <con:testStep id="4723ce89-85c8-4c42-8518-922eb85c651a" name="receive - select2_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select2_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="2d35189c-71ae-41be-8abb-0a3d50787e8b" incomingWss="" name="receive - select2_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select2_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:TAX>\r
         <!--Optional:-->\r
         <NAME>Kim</NAME>\r
         <!--Optional:-->\r
         <RRL></RRL>\r
         <!--Optional:-->\r
         <TAX01>01</TAX01>\r
         <!--Optional:-->\r
         <TAX02></TAX02>\r
         <!--Optional:-->\r
         <ADDRCD></ADDRCD>\r
         <!--Optional:-->\r
         <TAXPAY></TAXPAY>\r
      </sel:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="c6776082-1c50-4ede-bb26-3e73c0525cc1" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="b8232c1a-8997-4a1f-97af-0bcfacecf288" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="27b2a8f8-a567-4955-a40e-3fe01aee0a04" name="&lt;item>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>5</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="aa73b550-46a8-4365-a876-c3f9a65ff863" name="&lt;TAX02>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//TAX02)</path>
                <content>4</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_auto/select2_auto.wsdl/select2_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="297e358c-613c-4110-bda0-ec4de2b874da" keepSession="false" maxResults="0" name="select2_manual" searchProperties="true">
      <con:settings/>
      <con:testStep id="ad33b26e-27ff-462f-8770-a404cdd54e19" name="receive - select2_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select2_manual</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="edf91f29-18ed-4490-9629-838cbe2da52c" incomingWss="" name="receive - select2_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/select2_manual</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:TAX>\r
         <!--Optional:-->\r
         <NAME></NAME>\r
         <!--Optional:-->\r
         <RRL></RRL>\r
         <!--Optional:-->\r
         <TAX01></TAX01>\r
         <!--Optional:-->\r
         <TAX02></TAX02>\r
         <!--Optional:-->\r
         <ADDRCD></ADDRCD>\r
         <!--Optional:-->\r
         <TAXPAY></TAXPAY>\r
      </sel:TAX>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="17142c06-d0a6-464f-8216-cb0284f602bf" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fe7a9739-e6a0-40cb-ba94-851aef460287" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="74eb90b0-b218-4c64-a79f-6ca6d9c26fe2" name="&lt;item>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="9eebe773-e7c6-4f99-8fee-3d6a9971df2e" name="&lt;TAX02>Count Match" type="XPath Match">
              <con:configuration>
                <path>count(//TAX02)</path>
                <content>8</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select2_manual/select2_manual.wsdl/select2_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// prepare data
def nameList = ['Brewer', 'Johnson', 'James', 'Castillo', 'Sanchez', 'Sutton', 'Moody', 'Mason', 'Kim', 'Baker']
def tax01List = ['01', '02']
def tax02List = ['A1', 'B1', 'C1', 'D1', null]

// loop and insert data
nameList.each { name ->tax01List.each { tax01 ->tax02List.each {tax02 ->sql.execute("INSERT INTO JDBC_TEST (NAME, RRL, TAX01, TAX02, ADDRCD, TAXPAY) values (?, ?, ?, ?, ?, ?)",
      name, '123456-1234567', tax01, tax02, '02', '100000 won');
    }
  }
}

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="dcd6c10a-17d0-4bd1-b593-8af6dac0d418" keepSession="false" maxResults="0" name="insert2_auto" searchProperties="true">
      <con:settings/>
      <con:testStep id="80506c7a-1ebe-4ebc-bd6a-ff24a55d5835" name="receive - insert2_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert2_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="4695ae5a-20d2-465b-a7ac-c523d2eb62e4" incomingWss="" name="receive - insert2_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert2_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:TAX><!--Optional:--><NAME>Insert2Auto</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></ins:TAX></soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="d0dd036e-b2c8-4025-bd6a-ea63d2021ce4" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="e963262a-51f9-427c-85d8-bb5d2efb7154" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="b6a3e01b-c38b-4298-abaf-cb611687ec6f" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Insert</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="b2493a99-6e1a-49dc-8d72-21bf1548e78c" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def insertScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'Insert2Auto'
  """
// execute the delete rows script
List result = sql.rows(insertScript)

// close connection
sql.close()

assert result.size() == 1</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_auto/insert2_auto.wsdl/insert2_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c8fce1f2-d011-4eb5-b0c5-e158663091c1" keepSession="false" maxResults="0" name="insert2_manual" searchProperties="true">
      <con:settings/>
      <con:testStep id="376024f0-8ec6-4db8-b6ca-2f50879fc8df" name="receive - insert2_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert2_manual</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="f28a2266-8fee-4828-93bd-6ab2664f06cb" incomingWss="" name="receive - insert2_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/insert2_manual</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:TAX><!--Optional:--><NAME>Insert2Manual</NAME><!--Optional:--><RRL>123456-1234567</RRL><!--Optional:--><TAX01>99</TAX01><!--Optional:--><TAX02>98</TAX02><!--Optional:--><ADDRCD>01</ADDRCD><!--Optional:--><TAXPAY>-500 won</TAXPAY></ins:TAX></soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="4cfc8034-5bde-4631-9d28-fc5166381ee5" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="12e163bb-a64c-43d2-9596-3f01984af5fe" name="Schema Compliance" type="Schema Compliance">
              <con:configuration/>
            </con:assertion>
            <con:assertion id="eee5a8a5-bde9-4664-a04d-b82ee67d0a6a" name="Contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<operation>Insert</operation>
.*<success>\d*</success>
.*<failure>\d*</failure>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="5b09f092-f8f0-4ada-8b25-16694c2d14e4" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>package sample
import groovy.sql.Sql

def testCase = messageExchange.modelItem.testCase;
// connect to db
def driverClassName = testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testCase.testSuite.project.getPropertyValue( "url" )
def username = testCase.testSuite.project.getPropertyValue( "username" )
def password = testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def insertScript = """
  SELECT * FROM JDBC_TEST WHERE NAME = 'Insert2Manual'
  """
// execute the delete rows script
List result = sql.rows(insertScript)

// close connection
sql.close()

assert result.size() == 1</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert2_manual/insert2_manual.wsdl/insert2_manualPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>package sample
import groovy.sql.Sql

// connect to db
def driverClassName = testRunner.testCase.testSuite.project.getPropertyValue( "driverClassName" )
def url = testRunner.testCase.testSuite.project.getPropertyValue( "url" )
def username = testRunner.testCase.testSuite.project.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.project.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName);
def sql = Sql.newInstance(url,
      username, password, driverClassName)
// the sql script that delete rows
def deleteScript = """
  DELETE FROM JDBC_TEST
  """
// execute the delete rows script
sql.execute(deleteScript);

// close connection
sql.close()</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="21612ebe-d68c-40c9-9435-c2fbc5347c91" name="Jdbc Oracle TestSuite Backup">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8a4dad25-2002-4d1f-a061-6e2ef45b46d3" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="3a408f71-6cdd-4f4b-85a9-a56803a3516c" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql></sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3f6bf08c-cea7-4d8f-b414-8006484ecbea" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="049d3a4a-6e91-43a0-9f8d-2bc3cf069600" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="ee8ae9a4-364f-4fd7-82a7-028bd7478cc0" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="f9ad12dc-69c1-49bb-b8e1-460ce45a390f" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="0fcbb336-3de6-409a-be9f-b9c6633c3e20" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="0835a46a-08f4-4aee-8d2d-c496e0b813fa" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="9c60f497-926a-4c89-b3ed-53d72c9e4f6a" keepSession="false" maxResults="0" name="insert_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="db14c87b-efbc-4fa7-b32b-e017a2a599a9" name="receive - insert_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="66d6925b-b699-4d2c-b220-c3410f449d15" name="receive - insert_null_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="bbcdf3fe-94c1-444a-9751-d0161488f31a" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="a777691b-ef81-450f-bc14-653ebb071def" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="642eaa71-7e19-4585-bd5e-4fc5cd7766bc" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="ff724d0f-9ea6-4a1d-9680-2c96cce27007" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="35f67315-7d21-4967-9b54-303a36ad64db" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="1527d88c-92fd-4063-a399-c811596bf7d5" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d7b17247-e80d-4550-bce4-e34530e46305" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="8239debf-4126-4fe0-95f8-275dbe544aeb" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3f499015-4eb5-4c85-89c9-dcc3879f192f" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="5ac529a4-1680-4826-a190-551f49c533bb" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="e1c2ac04-cfe8-4934-ac56-76f6cb433fee" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="5e91fc95-7ab8-4a58-8ac8-25cdde16b42f" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b9c77962-f61a-4892-8493-592e3a1eb605" keepSession="false" maxResults="0" name="update_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="cce50c8f-fe7b-4f46-8ae4-df7e5e3ca8f1" name="receive - update_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a1947f7a-d3f1-4e32-8d2d-f9ff5f50cbbf" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="74aee9aa-4148-455b-a2de-6be66a4da322" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="24416cf7-5d18-4f67-b2c0-fd6000cfc688" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="f962da1c-4606-453b-b54f-07a1ec7ee487" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="5ee6b6ac-291c-4c99-99c7-171a50247d73" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="36a66233-df4f-4249-ae4a-bfc6cf5bdce7" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="7996eff1-0f25-4753-993f-789a5fa82f46" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="9c74a605-c57e-43ee-97d7-51fe144dfb45" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c20c0705-d794-4eb4-b34e-07af8430b28f" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="228ea658-77a4-4c6e-90e3-84fd84cea1f7" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="ad847548-6e96-43f1-9e00-b6daad612c03" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="f39131f8-1b7b-4e90-bb05-4050e4b577f8" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="9d95b381-1d69-488a-b6c7-b279f09c15d6" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="ff457320-d005-439a-9f77-910b1a4d7f4b" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="b34e7df4-28c4-4303-9188-5f5398469a67" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="ccfe744b-4f94-4c2f-a069-21af5a283ec8" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="533398e5-1bbd-4c0e-beca-61170ab5ca81" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="aa3f74f9-ac21-4bbb-9d56-d9a23a0a6816" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="2ecaf32b-3afa-4ead-b4f5-7aef26150c20" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null
log.info "storedClob == null : " + (storedClob == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="01f91008-1989-4ba9-bde4-af36eed6adea" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="5faf5c3f-5935-4981-925f-49b1dcf8ac3d" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="fc01a23d-60e3-494c-81a5-54cc775ebbf3" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="78e82ef8-1ae5-49b8-803b-fb7fda16a420" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob != null
log.info "storedClob != null : " + (storedClob != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="82cc9793-9e4f-4451-9d31-2394b854d47a" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>org.h2.Driver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:h2:tcp://192.168.0.130:57722/../megaware.home/h2/megaware;IFEXISTS=TRUE;AUTO_RECONNECT=TRUE;QUERY_TIMEOUT=60000;LOCK_TIMEOUT=10000;CACHE_SIZE=65536;CACHE_TYPE=TQ</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>sa</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>oracle</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){
  
}

try{
sql.execute('''
  CREATE TABLE qa_jdbc (
    workingName varchar2(500) NOT NULL,
    blob_data blob,
    clob_data clob,
    constraint qa_jdbc_pk primary key (workingName)
   )
''')
} catch (Exception e){
  
}
</con:setupScript>
  </con:testSuite>
  <con:testSuite id="eb3723c3-d2f1-4b02-aae7-0d0581e2985f" name="TestSuiteForTest">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="b7523e57-5c13-4f35-afd0-e4ca8533c06c" keepSession="false" maxResults="0" name="mariadb TestCase blob" searchProperties="true">
      <con:settings/>
      <con:testStep id="c2bc7361-3d34-418f-b239-e6f4d2bc4164" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="5f0442c6-9e8e-4678-a31b-1be9fd3f93fd" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="4558492a-8179-42f1-9179-a551ec6caff9" name="SOAP Response" type="SOAP Response"/>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'org.mariadb.jdbc.Driver'
def jdbcUrl = 'jdbc:mariadb://192.168.0.7:3306/megaware'
def username = 'mega'
def password = 'mega'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_blob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)


sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, BLOB_DATA) VALUES (?, ?)', [workingName, bdata] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'insert_auto_blob'

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")

rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
//java.sql.Blob storedBlobFile = (java.sql.Blob)sql.firstRow("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored
</con:setupScript>
      <con:tearDownScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'org.mariadb.jdbc.Driver'
def jdbcUrl = 'jdbc:mariadb://192.168.0.7:3306/megaware'
def username = 'mega'
def password = 'mega'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_clob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, CLOB_DATA) VALUES (?, ?)', [workingName, clobText] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'select_auto_clob'


String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')
//log.info expectedText

//java.sql.Clob storedClob = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0) // 기본출력 text형
//String storedText = storedClob.getAsciiStream().getText('UTF-8')
String storedText = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0)

log.info storedText
assert expectedText == storedText

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="531c025c-1d17-4727-a67e-d31d46fa04d1" keepSession="false" maxResults="0" name="mysql TestCase blob" searchProperties="true">
      <con:settings/>
      <con:testStep id="c494d751-e7d4-4315-a191-2b45e0ea0f38" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="5f0442c6-9e8e-4678-a31b-1be9fd3f93fd" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="4558492a-8179-42f1-9179-a551ec6caff9" name="SOAP Response" type="SOAP Response"/>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'com.mysql.jdbc.Driver'
def jdbcUrl = 'jdbc:mysql://192.168.0.229:3306/qa_db'
def username = 'qa'
def password = 'qa'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_blob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)


sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, BLOB_DATA) VALUES (?, ?)', [workingName, bdata] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'insert_auto_blob'

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")

rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
//java.sql.Blob storedBlobFile = (java.sql.Blob)sql.firstRow("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored
</con:setupScript>
      <con:tearDownScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'com.mysql.jdbc.Driver'
def jdbcUrl = 'jdbc:mysql://192.168.0.229:3306/qa_db'
def username = 'qa'
def password = 'qa'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_clob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, CLOB_DATA) VALUES (?, ?)', [workingName, clobText] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'select_auto_clob'


String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')
//log.info expectedText

//java.sql.Clob storedClob = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0) // 기본출력 text형
//String storedText = storedClob.getAsciiStream().getText('UTF-8')
String storedText = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0)

log.info storedText
assert expectedText == storedText

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="88c4a9b5-3fbd-450e-b804-140698d18343" keepSession="false" maxResults="0" name="tibero TestCase blob" searchProperties="true">
      <con:settings/>
      <con:testStep id="3c94e7ea-1375-4f5f-a4d0-ff114f1842d0" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="5f0442c6-9e8e-4678-a31b-1be9fd3f93fd" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="4558492a-8179-42f1-9179-a551ec6caff9" name="SOAP Response" type="SOAP Response"/>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'com.tmax.tibero.jdbc.TbDriver'
def jdbcUrl = 'jdbc:tibero:thin:@192.168.0.124:8629:tibero'
def username = 'MEGAWARE'
def password = 'MEGAWARE'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_blob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)


sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, BLOB_DATA) VALUES (?, ?)', [workingName, bdata] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'insert_auto_blob'

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

//java.sql.ResultSet rs = sql.executeQuery("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
java.sql.Blob storedBlobFile = sql.firstRow("SELECT BLOB_DATA as blob FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

log.info expected == stored
//rs.next()
//java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
////java.sql.Blob storedBlobFile = (java.sql.Blob)sql.firstRow("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
//byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());
//
//assert expected == stored
</con:setupScript>
      <con:tearDownScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'com.tmax.tibero.jdbc.TbDriver'
def jdbcUrl = 'jdbc:tibero:thin:@192.168.0.124:8629:tibero'
def username = 'MEGAWARE'
def password = 'MEGAWARE'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_clob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, CLOB_DATA) VALUES (?, ?)', [workingName, clobText] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'select_auto_clob'


String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')
//log.info expectedText

java.sql.Clob storedClob = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0) // 기본출력 text형
String storedText = storedClob.getAsciiStream().getText('UTF-8')
//String storedText = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0)

log.info storedText
assert expectedText == storedText

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="fec01aeb-345f-4d8c-9daa-9c4dfca3d7e7" keepSession="false" maxResults="0" name="mssql TestCase blob" searchProperties="true">
      <con:settings/>
      <con:testStep id="a12590ff-b620-4d9c-beb2-f0a41b46838d" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="5f0442c6-9e8e-4678-a31b-1be9fd3f93fd" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="4558492a-8179-42f1-9179-a551ec6caff9" name="SOAP Response" type="SOAP Response"/>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'net.sourceforge.jtds.jdbc.Driver'
def jdbcUrl = 'jdbc:jtds:sqlserver://192.168.0.229:1433/ilmoa'
def username = 'megaware'
def password = 'megaware'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_blob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)


sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, BLOB_DATA) VALUES (?, ?)', [workingName, bdata] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'insert_auto_blob'

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

//java.sql.ResultSet rs = sql.executeQuery("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
//rs.next()
//java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
java.sql.Blob storedBlobFile = sql.firstRow("SELECT BLOB_DATA as blob FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

log.info expected == stored
</con:setupScript>
      <con:tearDownScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'net.sourceforge.jtds.jdbc.Driver'
def jdbcUrl = 'jdbc:jtds:sqlserver://192.168.0.229:1433/ilmoa'
def username = 'megaware'
def password = 'megaware'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_clob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, CLOB_DATA) VALUES (?, ?)', [workingName, clobText] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'select_auto_clob'


String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')
//log.info expectedText

java.sql.Clob storedClob = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0) // 기본출력 text형
String storedText = storedClob.getAsciiStream().getText('UTF-8')
//String storedText = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0)

log.info storedText
log.info expectedText == storedText

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="538fd45a-cff3-4990-be77-3a5f7b5a80fa" keepSession="false" maxResults="0" name="postgresql TestCase blob" searchProperties="true">
      <con:settings/>
      <con:testStep id="658d89d0-0fb1-4670-ae3f-b1405dba6d7e" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="5f0442c6-9e8e-4678-a31b-1be9fd3f93fd" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="4558492a-8179-42f1-9179-a551ec6caff9" name="SOAP Response" type="SOAP Response"/>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'org.postgresql.Driver'
def jdbcUrl = 'jdbc:postgresql://192.168.0.8:5432/megaware'
def username = 'megaware'
def password = 'megaware'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_blob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)


sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, BLOB_DATA) VALUES (?, ?)', [workingName, bdata] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'insert_auto_blob'

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

//java.sql.ResultSet rs = sql.executeQuery("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
//rs.next()
//java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
//
java.sql.ResultSet rs = sql.executeQuery("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
//
//java.sql.Blob storedBlobFile = sql.firstRow("SELECT BLOB_DATA as blob FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'").blob
//byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

log.info expected == stored
</con:setupScript>
      <con:tearDownScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'net.sourceforge.jtds.jdbc.Driver'
def jdbcUrl = 'jdbc:jtds:sqlserver://192.168.0.229:1433/ilmoa'
def username = 'megaware'
def password = 'megaware'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_clob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, CLOB_DATA) VALUES (?, ?)', [workingName, clobText] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'select_auto_clob'


String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')
//log.info expectedText

java.sql.Clob storedClob = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0) // 기본출력 text형
String storedText = storedClob.getAsciiStream().getText('UTF-8')
//String storedText = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0)

log.info storedText
log.info expectedText == storedText

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="7f8df34d-5402-4ad2-ba9f-fa41b5a8b600" keepSession="false" maxResults="0" name="altibase TestCase blob" searchProperties="true">
      <con:settings/>
      <con:testStep id="bf9dc899-3951-4e5c-9d61-2314afbc19f1" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete_auto</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="5f0442c6-9e8e-4678-a31b-1be9fd3f93fd" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${basicAddress}/mediate/qa/run/protocol/Jdbc/delete_auto</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>delete_auto_default</workingName>\r
            <blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <message>\r
            <databaseName>oracle</databaseName>\r
         </message>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="4558492a-8179-42f1-9179-a551ec6caff9" name="SOAP Response" type="SOAP Response"/>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete_auto/delete_auto.wsdl/delete_autoPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'Altibase.jdbc.driver.AltibaseDriver'
def jdbcUrl = 'jdbc:Altibase://192.168.0.6:20300/mydb'
def username = 'GICOMS'
def password = 'GICOMS'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_blob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)


sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, BLOB_DATA) VALUES (?, ?)', [workingName, bdata] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'insert_auto_blob'

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

//java.sql.ResultSet rs = sql.executeQuery("SELECT BLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'")
//rs.next()
//java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
java.sql.Blob storedBlobFile = sql.firstRow("SELECT BLOB_DATA as blob FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_blob'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

//log.info expected == stored
</con:setupScript>
      <con:tearDownScript>// Blob insert
import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = 'net.sourceforge.jtds.jdbc.Driver'
def jdbcUrl = 'jdbc:jtds:sqlserver://192.168.0.229:1433/ilmoa'
def username = 'megaware'
def password = 'megaware'

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = 'select_auto_clob'

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE WORKINGNAME = ?', workingName)

sql.execute('INSERT INTO qa_jdbc (WORKINGNAME, CLOB_DATA) VALUES (?, ?)', [workingName, clobText] )

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')


workingName = 'select_auto_clob'


String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')
//log.info expectedText

java.sql.Clob storedClob = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0) // 기본출력 text형
String storedText = storedClob.getAsciiStream().getText('UTF-8')
//String storedText = sql.firstRow("SELECT CLOB_DATA FROM qa_jdbc WHERE WORKINGNAME = 'select_auto_clob'").getAt(0)

log.info storedText
log.info expectedText == storedText

//log.info context.expand('${projectDir}')
//log.info context.expand('${workspaceDir}')</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="a62bbfc5-0f2c-4d00-97ea-6c3ff8496bbf" name="Jdbc Oracle TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="e6cf23cd-1e9d-4536-80e4-0a2520fc5800" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="914a90c6-dcad-445e-ac71-63ce5aceb1e7" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="bb8a0622-02b6-43f7-9419-4d6bd523dba2" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="918d8ac1-3ec0-4d0f-a5a4-9f3703087228" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="99835a71-e80c-4181-af0f-df4ee79294c3" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="530b93ff-38cd-41b6-9429-8c2393e1a0e7" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d8e490e1-4b20-4af3-a3c6-aa7c9f61146b" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="b52e48b7-5a54-498c-9508-ff90408532be" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="9c4f40b3-65a7-4860-aff1-b494617f7ad2" keepSession="false" maxResults="0" name="insert_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="df6b5ce4-2529-446a-925e-e26324a78dec" name="receive - insert_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="0a099c2a-8aee-4269-9fcd-24e37489e646" name="receive - insert_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8ece1568-0fd7-4335-aef9-30c9b05f4b7f" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="04de11c7-0981-41ee-8620-03c8cf20476a" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="569c9092-6984-41b1-bd71-725f3b750865" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="76f07dae-42d4-49a6-bf49-74c5623cf137" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c9c328e5-797d-4a26-a0f7-1738e7da5a7e" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="895244ec-2786-4c96-841b-4ec619561924" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="eac2827b-c013-49d2-ae35-4af74035b940" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="33e28c0c-9a67-4b67-8cf2-b4b6e63e5167" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="aa169a48-9496-49d2-9176-ccf46b5b1c9f" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="bfbe3438-20bf-4776-8b06-e25a943f70e8" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="60d5cb46-2b14-48e4-b450-aebddcbabe80" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="fee521b6-4ff0-4384-9dc5-0b0f486941a7" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="16cbb461-86cc-4b32-9a9d-28f7aed8b93e" keepSession="false" maxResults="0" name="update_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="1b3f2cbf-44a9-4383-b7e6-8f9fa2c6d00b" name="receive - update_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="1081dcb0-57be-485b-9c3a-d717483e532a" name="receive - update_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="cfaa9326-674b-4b01-9015-465dadacbdb7" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="85e6b2fe-774b-4741-81c8-5fc26415da60" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="4c631ad9-9111-400d-a622-de5289fe9e60" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="2f3d2abf-89ea-4dd5-aa61-c672d5abfc44" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="ec4b3254-7b2c-4fb3-baa0-07df8d05ab8c" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="b9e60955-e9fe-4d61-a3ae-f2b7040da81d" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d76f24a0-2c28-4e21-af42-2dc5eb0eed33" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="64fbc149-81ec-4f93-8e16-ac1fa3600589" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="7598fe31-322d-41b8-a6fd-f82b525afd11" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="8dca9943-3d97-4223-bb55-f48acff674f6" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="093920ff-be53-4737-8700-f98e6c17d680" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="42c13cfb-5762-4913-9dea-0de1211fc868" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d1695c90-4c0f-4a19-836f-1edc6cba6aa8" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="62d4ccac-b378-4f21-9719-48eaec474a2b" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="c0644488-9810-4226-a6b6-5c07b1f2b97d" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null
log.info "storedClob == null : " + (storedClob == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="ca34326f-5652-4989-8c19-85ee1b1f1581" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b1a8527f-8fcc-45d4-b2bd-8c21d003c494" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="ea238a23-417d-40c1-9d98-17ef4e51e598" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="85fb1ee6-f08a-497e-b429-6c0d136596ea" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="e0e0cc8b-3fde-4671-91ed-947b8ee6223b" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="47e17000-a4b8-46a4-a8bb-6eccdf6b0fee" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="63c6f053-9fc1-4459-b1b8-96a252151409" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="187b4a23-561e-4732-b0fa-00fdefcf401a" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob != null
log.info "storedClob != null : " + (storedClob != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="9f16b11a-1eb2-4e99-9b03-4d0c4c7d4c9b" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>oracle.jdbc.driver.OracleDriver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:oracle:thin:@192.168.0.7:1521:orcl</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>TARGET_DATA</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value>TARGET_DATA</con:value>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>oracle</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){

}

try{
sql.execute('''
  CREATE TABLE qa_jdbc (
    workingName varchar2(500) NOT NULL,
    blob_data blob,
    clob_data clob,
    constraint qa_jdbc_pk primary key (workingName)
   )
''')
} catch (Exception e){
  
}
</con:setupScript>
  </con:testSuite>
  <con:testSuite id="8d62074f-a843-4174-a7d8-56c2dd579e19" name="Jdbc Tibero TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="38e13e93-3c08-4779-9d64-be637765facd" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="70bbbf68-a208-4420-b039-8946348e7dd7" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8404197c-045a-4947-924c-1204139f0659" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="34aaca38-d927-47b8-b952-f729fa0823b3" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="84b1613a-00bf-46d9-a212-be3559b1ddff" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="aa3dae09-cef0-420b-98fd-235cae78fe2c" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b561950c-c42e-4954-b6d5-4ce66978d3f8" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="52707753-a1f9-4673-8fee-0923597cbfb8" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="efe0e631-9cc2-4200-ad6f-e3375799fdc7" keepSession="false" maxResults="0" name="insert_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="593eb0cd-ed4b-4130-b083-f2e5ccc3c1f5" name="receive - insert_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="2c2aada1-3923-4959-ad07-c650fd7c82bb" name="receive - insert_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8d4cd7af-b57c-43fd-8d72-64f911ae4ec0" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="fc8a402b-1ef3-4293-b92e-39f8a793e54e" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="0dfcc7b4-dee1-4c38-af1b-c5c0265891b8" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="09481904-d44b-4782-b5f4-ce056cb48c18" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="886f5a15-fed9-4404-a7cc-794df0cef6fa" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="6ab9c569-2bdc-4a53-9253-d078637b6460" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="361551d6-8b6e-4e20-9302-8365f560de9d" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="1cf711ce-af00-4c6d-9b9e-6adb57e6767a" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="4cbc8ad3-6b73-4f32-8315-249af5955ddd" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="618f7066-e382-4981-a545-f0f5b75b3505" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="86d4b35e-6be5-4b23-b1e6-f300e9722a36" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d3d02e79-112f-4f41-895c-d2e526b93780" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="fc458dec-f1f2-4ead-aa85-b818bcc3784e" keepSession="false" maxResults="0" name="update_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="ec6135b3-2e12-4630-862e-8d57ea023ba7" name="receive - update_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="bbdf7b53-665b-4d23-a773-f13242e58fc2" name="receive - update_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c5ae25b5-5169-4c49-8f90-4be97541944c" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="87c7710c-79e5-406b-8142-7552771d68bd" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="dd790f65-aa98-406e-8f55-afcad918caa4" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="8dabd713-0b72-4c74-83a8-5318379f524d" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="96bf8e68-9202-40ce-89e9-e6f7156575c6" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="566d7cfd-28d9-49cd-9038-76a14707262a" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="805778c6-687d-4dcc-9947-52fd9fff6f26" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="a124a2c5-67d6-4611-aaa5-f0b8eccbf87d" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="458c69da-35ca-42b1-ab1b-a5fcb907077d" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="31a265ca-8e3e-4a03-aa01-1ca775d3433e" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="53a9a45b-9e7d-449b-9b13-5700360bf0aa" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="7123166b-c17a-454e-b382-0eed436661fc" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="96cbe919-e132-4e08-b889-29071793085a" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="89c867b1-9d6d-40cd-a783-1bb8c444b207" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="1e274561-4dbc-42fb-bc5a-de8dcff5115a" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null
log.info "storedClob == null : " + (storedClob == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="6c0fc759-2f46-4e6d-a21e-5d245b70fb5d" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="7f072530-ac13-4188-a7fe-414c256c1716" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="4f5c11fb-56f2-4eb0-90d9-c47dbd9036c5" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="f99f2f96-d2bb-4f1a-9b5b-e6a30c105e51" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="0067ec0c-646c-4c15-a851-4ca533950c18" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="d2ba484b-8cbd-48d9-ba2d-187e101c1357" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="a93f1107-1e9e-4bad-b266-a0bfe8023cb2" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="9c41642f-f39e-4cb1-90f4-cf5a98aef162" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob != null
log.info "storedClob != null : " + (storedClob != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="16669f91-c747-42a2-907e-99204ff333e5" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>com.tmax.tibero.jdbc.TbDriver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:tibero:thin:@192.168.0.124:8629:tibero</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>MEGAWARE</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value>MEGAWARE</con:value>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>tibero</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){
  
}

try{
sql.execute('''
  CREATE TABLE qa_jdbc (
    workingName varchar2(500) NOT NULL,
    blob_data blob,
    clob_data clob,
    constraint qa_jdbc_pk primary key (workingName)
   )
''')
} catch (Exception e){
  
}
</con:setupScript>
  </con:testSuite>
  <con:testSuite id="c86b8bc3-d30d-40eb-9169-88e6170f3c81" name="Jdbc MSsql TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1faa79aa-c862-4018-9144-0f70a858c834" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="903d6f44-b376-4ee9-87da-09c60461d3f9" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="12a9cc0a-7e23-4958-846f-209472f2d272" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="54f593a8-1a6e-4d11-a5fe-ddf1dcf2d2a4" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b62fe6f7-9296-4fe7-98b0-a6aed55e9991" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="6c72a952-c228-4041-ab7b-88f85c53e6cb" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxISEhUQEhAVFRUVFRUVFRcVFRUVFRUVFRUWFxUV
FRUYHSggGBolHRUVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGhAQGi0dHx0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf/AABEIAL4BCQMBIgACEQED
EQH/xAAcAAABBQEBAQAAAAAAAAAAAAABAAIDBAUGBwj/xAA5EAABAwIDBgMGBQUAAwEAAAABAAIR
AwQhMUEFBhJRYXETgZEiMqGx0fAHFELB4SNSYnLxM4KSY//EABkBAAMBAQEAAAAAAAAAAAAAAAAB
AgMEBf/EACMRAQEAAgMAAgICAwAAAAAAAAABAhEDITESQRNRMmEicYH/2gAMAwEAAhEDEQA/APYk
CE5BNJqBTkCmDCgQnEJlZ0AlAcN+JG8XgUvBYf6lQHu1mp7nL1XjTWGo6NPuei3N8NpG4ualSZBc
Q3/RuDfKB8Vm0IDSceSMe12ahj2H3W6ffqqdxSjPNblnbO4C7TTt1WZdMMnAeiVvZydMp9M9UWMI
VsD/ABHof2Kmpt/xI7GR6FLatKtJxH3+607e/cIa7FvI4j1++6a2gD3/APk/HBOZbxp3jA+n0U2r
kaVvRY/3TB/tP7H7CnbTj2XTI5/chZwpkYjL7+KvWt5xAMfEjJ37FK9GVSlOfkfr16quXGmcRhoR
l/CuTwmDiORTKrBHNp+CXoddupvLlSquwya46f4uXagrxAf0zE4HLkfvmu93Q3jBAt6zscqbjr/g
TzV4Za6rHkw+47NNKSC0YkkklKAKITJSlASIFAIlANKYU8ppQCCeFGCpAmAcE1SFNhAdKgigoUCB
RCTkwYVzH4gbW8C1cGn26nsN6T7zvIfMLqCvJ/xYvprNp6U2T5uP8JVWM3XndfUlSWwwiIx1+iiN
AuMnDkNe8K7ZU2g4Bzj/AKkpS6aWbWbG4c13DPs/q7clo3loHxwwQchgAe8Zpthsmo7E4jQR812W
y9kQW8TBl6LLPOb6a4cdcK7d555Z6D5KCru+QdPMkfFetU9ljKM9OSVTYQd7wnyUTOtPhI8ZqWNR
h949nQ9vrop6LgRDh7XL92uXpd/us0gxnp9Fx2193XsxY3LHSO4KqZlcP0o02DQz316FV72gB7Ud
CNQoadZzTMZYOC0HQ9og4xgefQ9lUqLFe3qcQjUDA8x9/RS0iQcfMc+3VZ0lhnT5HmtGZh7YJ1HP
/vwPdKgLi2w5tMx0/n/qoU3lp4XZaH6rVDsJGRjy5HuMlUuqAIjTSP0k8unyTJ127m9hbFKvi0ZO
1A68wu1pVQ4BzSCDkQvEKNYtPCdPguk3e3hfbmDjTOY5dW/RVjnrqss+PfcemwlCr2N+ys0PY4EH
l+/JWVqwABOQSQBSSQQCKaQnFAoBqc1NRCAeShKRQhMOmQRQKhQSgSkUEACvDfxBvg68q4zwuLRG
kL2fbF14VGpU1a0kDrGC+c7x5e9znGSXEnqTiSlWmE+zrR8u/wCfEmV2e7uyS/HnrqVyuw6PG8NG
pXsWxrMNYABoFly5a6jo48d90bDZDGgYepK1aduBkFIximDVhI2tMZTVhrQmBStWuLLJXuKUrJvb
MHMLfc1U7ukllieGTyvenYrWHxGjB0g/suVsjBdRJzxaeThl8MPNer7yW4dScDGWC8j2gwtfxDQ6
dM/vojC/VVnPtYriRJ5weh59lHZ1eH2T8fT+FcqwYfHsuEO8/oqN5SIPEOh74Z+Yj0WjJoMeB/qc
+h5/fRJ+Ag5afT5Khb3OQOWn0++qt8WmYzHbOO4zRBVa4twR10PzCp065bgcvkVpBwyPqqt3Qnv8
0Be2XtipRcHMdHTRw5FeibC3hp1244OHvDkvIGgjL0VqzvXMcHNcWuH3BTlsRlhMnuI6FFchuvvO
2oBTeYeOeTu30XXMeCtpduayw8IFGU151TIklCKs4qRjkjFEJIwgAShKJCbCZOnQRQKhQFBOQhAZ
u8FLit6jRmWOjvwlfPF+3hMc8PLMr6VrNkELwHfnZxo13NIyOHUTE/JTfWuHlhboCazV7RYthoXi
25Dh+ZY06/tC9qtjgseSdujC9LgTwmNUgKmRVJAORKguXEDBMgvtqU6LS57gAFzlXb1e4PDQpkN/
ufh8E642X4jw+o4mMhp6JX17Tt2ScOg16BL5WrmMiIbFc7GtU4p0GAXMbw7uQ0mmBgSceXLrgmX+
/wA4tJpskAlpOk5654clK7bFeeCpRxcAQQ4FpBEgiAE7jZ2Mc5l05ixHsupHAgmPvt8kwn9B6gfT
yKmvqZa/iiDlHbJRV4ImInPywPp9FcrPKaZVxSiYw6fRT2l1OBwIVk0+PDXIf5dO6yLukWnlj6FP
1DUqf878kWOkQf5Hbos6hefpf6/eSsF8Yzhz+8kArigc/Q8+/VU3Y54H79VrUa4dgf4PcaFQ3VqC
JHl9EBUo3PCRPw06gr0LdveHjaGueCRh7WvYrzV7NMj9/BKhcupmQqnXicpL69uO0WtEuOHkVWu9
4KDWn+pjGEYry11297Za89pj1VT8w4GMQU/nUfjj0OhvK1rYOeJWhY7wNqHhBA7mF5gyo4/qhS06
3IyUt1Xwxe0UK4OoPZWQvJdnbWfTPvELs9kbw+JDTM+WKqZs8uOx06EJtu+f5EKbhVM3QJJJJGSB
SQKYJy87/FXYnHTFw0Ytwd2+wF6IVXu6LXtLXCQRBSsVLqvm/Zt34NZlUfpeJ7Tj8CvdKd+xtMVC
fZIBHXBeXb8bsflXcTf/ABvd7J5E/pK6bcSuy5tm06vtOomIOrT7hPPDDyWfJOttuPLtsjeWrUMU
aBI/uOXcKza3104+2A30Vi5rtY3RoHkudrb1W7HNafEcXH2Q3XtOGiw1b1HVvGTddpSr81PIK5rY
+2KV00uouJjMOBa4YTkc+4WtZXE+ycwn3OqjX3BvW6hczelv5hj6klrBIaBMkyJ8vourqZqjcWId
kidXcV1ZquEdujTfWJplzaJmWkNBxxiQcR8V01PZbJw8yemg5BaFPZ8K1SpAaKrlb6JJj45LerY0
t42t7/suJqGJBGfrK9juaQIgiV55vNsMsJe3I/eKnxWtxyRkdR958ilWcHe8J0k691JPCc+E/DzC
ZVg6R1biP4WkY2Mm6teHEYt+XdQ0q5b1atEkjr2+iqVKIOIw6KtosS0LgDFpwVs1wcRh8j3WMW8O
IPcKVj8JCNFtoVqU4jP7wWe9/CYIw5/sVLQuI7cuXbopbqmHiR/3+UQVXpPIILHK1TvQcHNg89PR
Z9OxMzJj4q01vDgJ+ZTpTbSp2bTm4DyWhZ2DSeFsu6NGK6/db8Oi9jaly6AQCGNOMHH2nfsF6DZ7
JoW7OGnSa3lAHqU/jSvJI8ot92i4x4ZaOuJRv9369E+IwcTG58MhzecjXyXqzQJ90KNtuOM4aJ/j
ify1ye720eJoa8yD7rtZ5Hqt/wAM/wBx+Cp3O7vhVnPp4U6mbf7HjGR0KfwVOac69RdW9OrSTJRB
QkUCkkgAmPTimPKYYO82yG3VB9F2olp5OGRXl26Vd9pdNZUkCTRqg6GYae0wvZ6i8/8AxF2Hh+bp
tyEVAMyNHDqFNi8atb2273mmwTwl3txj7Oqbtywt7pjOEObUY3gbwsDhHIzEa4rU3dvm3VtTqHE8
PC7/AGbgfr5q+LWMMYWPyuPjqkmXrF3e2WKIA9ou4uMuJzcRE+mC1yYeD5K1TpAKG4EGeqi7rTqe
LJdOKTHKFr8FE95S2emgYTVVt68nhOasAqvkXx0FRZt9QDgQRIK0nKtWCKrG6ed7wbD4TxASPiFy
91TLeRHoV6xeUgQQQuH3h2YGhzhkljknOb7cg7/Yef1lIDqPI/yoriidFXp1YMELVhtdIac49Qqt
Zgbi3+FZLJHENPuOiid7WGvz/lMqo8WOCs21fTmq/hukYH0zWpQ2U8gPgx2VaTtGx+OGBXebo7mc
VJ13cMPCWnw2f3SPed06JfhtuxRuKz6lRpIpcGByJM5jyXql/RwawZF7Gx04gqmKcs/qL9pS4abW
6NaB6AKGuZVy4MBUOJVGVBjMk4thwPkUWYKSqJCYOeziELP/ACJWlRxEp6QQpzUwJwKkDKDikgUA
GlCoEg1OegK7wq1ejxAtMEEQQeStuCiIQbz21pHZl0aZn8tXPsk5U6mk9NPTku1Y9V9uWDK1N1N4
kH4dQuV2Jtzwav5Ku7ER4Tz+pujXHny5rLPF08Of7ds0qK5Zgm0qyc50hYuixHakSmX9fhEtYXnR
oiSe5wCoV6dQGWkfXuFLTeQA5x10S2qRPSLi5pLOAxJBIMYZSFoyCs78yBikdpUxm4eqcuiyxt+l
x7lDUUFK+a/Fpkc0+pVCWy0pXK5fbbC8cA1XQXlZZlBskuPkiUVxN5swjRYV1ZkHJeoV7QO0XP7R
2X0VzJncXI2YIDh2I9YSuKDhDw3l8V0NjsY1KjaYHvGD21XfWu6zCQC0ERitsZtjlfi4/d7dbxGe
IRJJBE8iV3lpuu0U3NIyJW3bWLabWhrY4YEdFo8OfULadMLbXMbi2raVW6Y0QP6Z+Dl0W0DBpn/9
G/NY+7fs3dw3m2mfQuH7hbl82XMHLid/8j6wkKsXzoCzw7P1Ut9cgwBihbWhOLvROEEqwQToVK3h
GWCeas4JbBlIxgn4KSmZT/DbyS2ajCIRISCREkQnIIBsJEIoFARkJjgpCi0CJKYVnWhzOXJebfiR
sjEVmiOHA9ivTa20ABgOLrkFmXdv4uLo6CBh6rLPOab8eF2813W3sezhoXXEJwp1HAgO5NcTr1Xc
070HVK82eHtLHAPacC1wBB8ljv2Uaf8A43ERk10kdgc1z3KX+nZjjr+2rd3IDeIlYFztYTg7yzPo
FNWrGOGoz92nzWc6hDuKmBGcCAUo6eH4S/5LdKu5+QIk5u/ZS/k2wOIkk55ekaplF7zg2mZ5nBaN
ps4zxPcJ5DRVt0Z8uGPixZUw1sAQNApaj8En4aqjc1DB4WucQJhoJPoFLz8u+6o7RuMeEZlSUW4Q
sqzcXvJcCDORwI6EFaweNFVmkb2maxQV7cFWKTXOwa0uPQE/JTPtKgGNNw/9TCQulXdzZ83DTGQJ
+H8ruLSlBKyN2KQ8Rx5M+Z/hdCxsQV08X8XJzfyRBsFPY3COWXZPqNS/y5Z9loyc3XHg31OppUBY
fmPiFr39wGuceTIHd5j9lBvFs99RrXUhLmuDhiBljhKom4NUubBDg5hIIgiMwQg2vs+1AHEc1NXr
yeBmevRQ3FxwMgZnADqrVhb8DccScSeqZHUaQaMcTzQc4JtavJ4RiSrFC3gYmfkkELSdE+X8lZ4g
EvECNhUISToQISAJJIoIyEiE4qC5r8Iwz+SN6OS26gVqoGGZ+81kVbhz3ubxRwjTA4jAj70Tql2A
eEYnPD5krMa41KwP9v8Aby5ErDK5Zf6dWOGOHvqxbDiDXBziS3ElxMq0GuGblFRZwgMboAFIWuWW
mu90HlQPUvA5NNMo0NqNaiDos2tswEyMO2C3jSKhqW6XxVM2K2m9n6p7rorPZZIBqOIJAMDSdD1V
A0BI7hdUWYnuteLGXe2XNyWa0ot2XSH6Se5KeyiAcAAOghXCFE4LomMnjmuVvtUts7Dp1wHRwvjB
zc+x5hUdl7uNYZe7j5CIHmJMromZJnDii4y3ZTOya2lpMDRAEDpgnh3VMhNATSkHDMgCTmYxKIM4
KJ6noBALyRZTJOKmATwEbBkKjf2TXkPb7NQZHQjk7mtApkIDNp2by9rnuBA0E5rSczSUWhSAI2EN
G3a3EDHnqp4SRCRonNlDwlLCKNhVhAhOhPFLmgkKCsikEfDHJA0qEqrd24cMjPQkLTdSGiq13huB
bjpyKLrXasd76c7WsIwGAPqVYtbLhED/AKrjqUmSobnaNOmMXYjQYn0WGWW3Tjh/2nstwE/hC4i9
37fx8NOh7IMEvdDumAyUtpva98/0PR+HyRMTymvXXuAUbgFjUNv03CXEs/2+oV1t2CJDgRzBkI1+
y98WiAoXMCjNwo311N0qY09zAtm0rh7A7XI9x9z5rnKlyFJsu/DKkOPsvgdA7Q/sqwy1UcmFsdGV
G5SBRvC6HKVJysRKqNOKsMcgHEJqlQLUBEArFNRAKamEBO1PTWpyRgUITkoQAARhIIpAkkkUAkkk
kBE2mU4U09BAINCSUIoBj8pWVWrBxmZ0AGPotdM4UrNrwymPbObauOeHTXzVR2w2ySSSTicvotzh
TeFHxg/Jlve3HXO5NF7nOc5+MYAgARPIY5o0N1aNP3eLtK60hNFIKpJCudvrBt9hU8ywR2xWZtu5
BHhUAABm8AYxo36ra2rdcQNNh9nJxGvQdFk+AFlyZ3yN+LD7yYFGzqg4Vqnm6fnKvm3fHvmeoCuw
AmPqLLTf5sOvbVCYdUd5QPiMVUuNm1AJFWpP+7iPSV0LnhRvIRIVy20t0dqOqM8GqSajB7xze3me
oy9F0LgvOzXNKoHswLTI+h6aLuNl7QbXpio3s4atdqCt8MtuXlw1dxM5qexydCHhytGKdhTwFVa8
tMOy5/VWmoBFqkYgAntakEjUUgikYJIoIAhJJJAJFJJAJBFJABFJJAJJJJAJCEUCgBCaU4oJg2Fl
313xey04ann26J95cF0tGABg8z/CoPKzyy+o1ww+6gqKrUdor1GkHkzMCMus/RW6dEN90R8/VTMN
tMuSYsins6o7P2RzOfkFO7ZtKIM95MrQdT6qFzQFpMJGN5LWVX2O0+49wPWCFl1LCuNGnqHfVdPU
cqj2yi4Q5y5Rx+0aNUYeGSehB9U/durc0KoeWjw3YPbMkjQjqPquqFAJ35VpSmMnisuW2arbpuDg
HAyDiE4LOsXlns6E+i04VsCzwKVNpbliOXLsi1T0ggHMKeEC1EIB4RQCKRgknIEIAIppRhAFJBJA
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d2999e28-9c4d-454d-8758-911e78d140b7" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="28a3b513-b227-4275-8546-604fdff2368a" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1501abce-9aaf-488f-931d-1a07706161e3" keepSession="false" maxResults="0" name="insert_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="10fc74c1-1488-4bab-bfff-c6ad5302dee8" name="receive - insert_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="a0ed74d1-7dea-4661-a5c2-27b767a93b6f" name="receive - insert_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="2f21679d-d749-4cb2-8104-c1addcf27b63" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="de87727f-462d-44df-bc16-8463db0872e1" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c3bade6f-0427-42af-8126-a7ac4b049a47" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="149e5e40-16f2-46c0-8ad7-457dd994c8c1" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b2d16c51-aa53-4a42-8a1e-765478386a7b" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="f9040508-2161-4150-bebe-43a8fd8208c9" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="632be4e3-a93b-4a0f-8b0c-1479e7ec885b" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="5387618b-0b72-40ba-b5f3-51922d2a451b" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="7d70ee96-13e2-4bbc-96be-720a63be2e3c" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="54384b09-3c8b-4e2f-ad1a-7cef491e4cf6" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="d347a445-3b2d-4913-ab62-ceb23b6c692e" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="4753e1de-b2ca-4b29-8433-4060c17a014d" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="007449c4-d9ea-471b-9c98-e405ecbf83ca" keepSession="false" maxResults="0" name="update_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="176fbdcc-5442-440e-bfe8-4aa0c6c33b11" name="receive - update_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
OGY7uPhWYbe5fQJuuJ53i9/w3KLWta2k3LHsntVXZL1QKdaKXGxV22ucb7kkKT3TBnAHRSPQzueT
baUOwu9fN/eDfbjxs7gGWYjxE2ezDB8Dstt2Sv1zxK74ZgOb5pkWM09FeN679s/YbqabH1XXyU06
U+csKqO1xIHJVN6TOUcmqLG6b1RN48f5O45txgDuAbT7LbWYveNpdncLuL9jo8ff3oqUC+3DLr7v
cmipCbbc1VjLFgU65+CaSpXeAL8f9DL047tiNpxfMtpsu3DuVFnVfuDfNx853b3KvO7W4F2utmos
buto3J3IbySjyfOMNuWN2ynt71krn3LWukZS35EioqAznwbh1xU2y3LvW8u33HjZ/Dd1Mhxu14fd
8+x7A8etmTVeL2a0U1gt1hFzpqFD9Na2LLRM0paZLaXWG0oX3ACAOuv1dOH2U5R6bbey3DTZG1Xa
o2b3n467w4psHt5T2XFE5HjO0m+eLblZZiWF0bxorHS3u6UNFVv07bim236kkE9y9QO27bPKr7nG
32G5jk+C37bHIMmx213u77eZTVWqsyTDa240rdS9j19qbFWXCzuXa2Fzy3/w77rQcBAUZTgCjbgb
LbW7p5HtZlm4OGWvKci2TzVzcbay53H8WXcMzZywXbF1ZFbEsVDLCrh/Ib9V0yS8lxKUPqISFSIA
8vXqpem/xd5Gc1b7jvHK2ckck567g2zF91LxjWzG7K9r+OvGTL3mmsat/MHfO4UlsqWsf3Cy3EbR
/KaekpE1N6yOlpVLbZaVKrgCn+id6UnHfCr16r/HzenH8U33ueI7w2HjVctw2rI9j1DQ4nkGwW3G
SZniu3NtarapWDOUV6u7SH6+ldF3q10dM5VvrcbEAd2m2fpF8HcFwtvEsz20r+Rtz/5sY9vXWbk8
nMir95d07ruDhltFiwW5XTNsg7LhWW/CMcQm322gIFC1SJ7VNLUpSlAc5cheDXHrkVsXl2wV6xVW
3WL5VnVv3ZZv+zq6bbfMcY3js+RUeW2jdvHL3YKVn8Ln1FkdvaqVVrrbyqkhSHg4hREAW9xS4PWT
jLk2a7j3/fXkFyV3fzyz2rF7tufyDz0ZTdrZhtjqXa624ji1hs9usOJY1Z03B5VS+aahTUVVRJbr
ipAQBnDACAEAIAQAgBACAEAIAQAgBACANFdD8DAFOqjJKfif1CAKG4o6geH6dIAs++9qqZ5JmSWX
OgJke0yV4RDBgJxWPfjtZMIW03muVqbcT98uE0KkrUEmUgPolFL2yp4E8DOa0JCeo0kNfdL2e6Kg
XU2QVJI69gmR4zBEjppKQiSC8bYP+rfFxX06CAKhAERvxMARIAQAgDY5qgj26QBQzoSPYYA0gCut
mbaD1mhJn7flEAb4AQAgDhPkPx32g5VbPZzsLvzhlv3A2s3EtaLVk2MXByppEvJp6ti4225W+525
2mu1mvtkulIzWUNdSPM1NJVsodbWlSQYlNp1QMWNh/TN2L2Qz3At0rvn3I3kRuDtFbbpZdmsk5Pb
55dvEraC13qzrxy5N7f2i6uUVgtdzq8dcVQO3R6lqbu7SqUhVUQtU5cm1TgDsSAl8fE+3QCf6opB
rACAEAIAQAgBACAOrXkl6YdLu/vzkvJrYzlvye4Ybzbi41ieIbvXrYLIsUexrdiy4JS1dBhdRl2F
57jGU2L/ADJjFtrnaWkuVKlioTTKDau4AQBk1w14ebacJtpKrazbq8ZrmVbkmbZXujubuhudfhlO
527W6edVybjl24Oe5EKWiRcr7d32220pbZZYpqZlplpCW2wIAywgBACAEAIAQAgBACAEAIAQBoSA
JmANfjACAEAIAQBSKpU1gf2R9sAUl33dZfp9MAWbd0/K6mZBLSyZEpBBCk/e6dREMGGHH3HBj9kp
0sPBxm63W63/AMtSCk0ybh5baqMLBPeWl0xIXIApIEoo2dRO5GXVsHaVGcvmA9mmp8ZRWQXLTqk9
KXVpBmPAgkaj/Zn7IcQXzbgfwjZPj3H61GJBPQBGSJAfWYA3QAgBAG1f3fgf6P2wBQlaKUD1BP2w
BqhPcpKfaZfvgCugSAA6AAfVpAGsAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAIAQ
AgDYs6D4z+r/AEwBvGmkAIAQAgAdNYAoK1dy1EzM1KM9fb7YAk3BoR7NP2dIjxBZl+aDlPUI7j89
M+gSMuqDJIP3gSQJESlEPcSjFnZ5C02nGiZAfy5xZI00K3TI9JyJH0xSq9Q4GTduHanwMyT0noTo
P1xWQVqnH8ZapzJCQR4AhPgPAEQBftGCKZkH+wnX26T+2JBNDUge0wBHgBACAEAbF9Pp/fAFFc/x
HP76v94wBMUaQp0+5Bl9Ok/onAFVgBACAEAIAQAgBAGhMgT7ATAlbXQheYfZE0RX0I3BZ/sz+E/3
Q93mR0rmbgVT1SAPDXXw66dYh+BS6G6BAgBACAEAIAQAgBACAEAIAQAgBACAEAQiZqHsmJfXAEWA
EAIAQBscPyy6T/ZAFDIkSD1BIgCCtIl06zmYAsu7ffUk6jsVOcvaRoCdYgGMOzzZ/lGNiRJ/lTx0
1SEhxegOmqdPCRlFK+Iq+yZJ24SA8Jjp7Ph7oqKSr06J1PbqCe2fsPdoD+qAOQWh2toT7EgfVpEg
joGs/Z+2AIsAIAQAgDav7p+j7RAFFeEnFga/N9sifpgCPRmTsvak/q1lAFVgBACAEAIAQAgBAA9D
Lr4QBtSFAfOruMhOSe0T8SBMnX4xDVd4N0EktwESBACAEAIAQAgBACAEAIAQAgBACAEAIA0PQ/Aw
BCR94fT9hgCNACAEAIAhL6j4QBRlaqUf9Y/bAEFZAB/X7fb+yALPvCkBaiTPubUZSnKfgDKcp6w8
QYv7OBYtWNKBmhVuqUkCUgXJqCpkTmkIkJGRJi0viqVcDJejHy9wkZAfr6/ZFxFJVqb/ANbpzpKS
Z9ZzDsh7ug9sSC/UfdgCOjofjAG+AEAIAQBtX90wBQHe4uqCZnXQD+iAIzDT6XEL7FyChMEHp0Pw
gCtwAgBACAEAIAQBpITn4wJrsoawIEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAaK6H4GAISPvD
6fsMARoAQAgBAEu4TJZHWRlL3DSAKMAOstTrrqdddSdYAgvHT4kfqmf1wBZ146LJ/qtqI1AOidQf
d4xDBjZs62pvH8RH9u1OudZzDq3+xQn4AHp4Sij7RPCpkrRthLXiJgSn1JOnsHWKyCetsnLglJOi
FIAHX2qmJ9JmHEF/I+78P9MSCZSJACANYAQAgBAA6gj2wBsS2hBJSkAkzJ8YA3wAgBACAEAIAQAg
BACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAbVz7dPp+EAbUdSf01/wBEARIAQAgBAEsrofgf
sgCkQBKvEHX7fcD090AWncte4aaocSCZyPymU+ukoAxn2ZkixYiw8VhS7VWJaIJCiEOvFJmNO0IE
tdD1ihfEVcDKCnbSlsaqVJIT8x00mPATnMRV4FJOW0AV7ch94pUfb0ImZe4QW8F8I+6PpiQTUAIA
QAgBACAEAIAQAgBACAEAIAQAgC3cly/EsMoRdMwyjHcTtil+Um45Le7bYqEuSn5Yq7pU0tOVy1l3
TiUm9yqK03mE++vqj+n5xw8pvdnlXtJZ7hUNpdp7LY8iazS+PtLAKXEWnDUX2sS2QfvLSlPvi9DG
v3Phiylzit7MRar8w/6TNK065/4k6qoLQn5VJtjuY+66Zy7WkjFQFn6QIurAyn9n60U/NhzMcM//
ADSXpq4lcRQYzRb+bkMhM13fHdtqa02oE/1GlZXkFjuLqx4zpkge0xcjpmTJV91e38xHzY8KmO2c
fm2uKlqrKRjbri/v1nlK5Spdrqm8XrCMHeoqkqIVTt0a6zI3KtsS/wAXubBPhF1aVep70oofNXJm
MuXfm8rqa5xGCcJ7cxQpUexObby/+0e0iafOZsWIFhtUzPRStIuLSXSrk/Yin5st6jsLBf8Azde9
i1pFJwy2obR3Du/EbuZW8spnr2hrFGQFS95if3TH9aX0D5suWwyX2m/NvbX171HSb4cRs6xZK1BN
de9t85suXUjAmZuM2W92/Ha94AS088GLc9Lkvgmn5oK+uKO6njd63npq8nEW+kxTkbjeB5RcXW6d
rCt4wdtMh/FOA9rDS784ixVyiRIGnrXgT79Iw7mHkW98W14bS4rkXx2naxQXCgutFS3K111HcrdW
soqaKvoKlmsoquncHc2/S1VOtxioZcTqlSFFJHQxitNbHvKycgBACAEAIAQAgBACAEAIA2JEiR8D
+n1wBvgBACANCZAmAJR5Xa2o+6X1/wBEAUuAJWoAkNZa6/6PfAFoXVS0zSjVXY4QSJ+Hxn9EAY87
QNpXa8RXIEIsr69BogLWtHZ/qFUpy98W0veJ4GSiRJsE6dAJ9PGcwOnWK2QTts/9dTM6hs9uhGkj
4+4wBerQnIe/9XUxIJmAEAIAQAgBACAEAIAQAgBACAEAYTcvvUR4gcGLCbvyN3jx3E7q/TGptGB2
50X/AHGyBHy9v8mwu2Keu7rThWJPuoZph1U4ACYvWse7fdLaqufD6SmUox3nkT50fmjd6d0xcdvO
DGBVOy+PV7i7e1upmVLQ5FutdkOfw0HGMXZTXWDF3niflU7/ADCqBl29h1jaWtOt207mQ00lV8Ip
c2/9hYnfom90Vvb4fmOoxPFHnlzFvdFm/JXc/M37featNfcLvvPm98ybI26ao71LrLXg79RUsMPL
Skdjbv4KSVJMu3SOtu4PWXsjt5XcfDnLMz7aaULMfccl9l3fhXi11Upu3HVXcHq52lo3zLNq7LMz
4J0haVYOXJ3H7q8adVKbtxz1YPSH22oKtp2+bxZldqBKmi7b7Vi9hx911KSS42K9dbd/JSsaAhhU
vZHWWZ/EbqE7fTg6XZhd27Z3ZSXhsUY7fadb5Xr7myt0wtNtQu853ZSX0KK/GZAWn01eJ9sdo3X8
Tya9GkV3rRd81va2q4gkgVzNvctzS0DxS2G0qGhBEcPv+uvf96EoQu4tvqVE42VWPjFyctvnU4pe
9aO+LsJQjcxrfUt8bSqvLqclXzTOYcc4dcXsVNUq1bI4M6urCA6u8W92/rSGySlLCr1UVxpkkq1D
fbPxjjGd6nd/ahGMcjVMlKLqvluNv6flxjX2nHcz1G73zoxje1LISju6Om39Lgo19pyrju0+1mIM
v0+L7a4FYWapaXKlu24nZGQ+tAIQpxRolrV2g6Cco49m9y9x6l0/vDPzL3Tu6r03SvLaaLM7h1/U
Kffs7Lu9O7quzdPLaRbrtbthfVd9522wG5rkB31eH2BxwgJCRNf4BK1SSJanoIqxu5+5cOCt4moZ
tu2uEb1yn9oqx+5O4cSHy8XPy7cFwV2dPxlrVHHbYGqSpFTsrtg+laSlaV4bZZKSQQQZUo0IMZse
+e9INSjqufVP/On+cy49593QacdTzap/5svznAGc+nXxWzRp38Hg9XglcsO+XX4Leay1IaU4k9n/
ALJrTc7IptpZCgkU6TIdvcAY5lpXrb37ps65GRbzLVVWN6Ea7OCnDpkq8W6nLdM9Yu9tPmvvF63l
2qqquwVaLgpQ6ZKvFup1/bo+k3uHZ2K+4bU59Yc7pmg67T43klKcYyB9pJmhhm4ByqsNRVFOiQtT
CFK6qSOncOg/xB9v5koWdexb2HcdE7kX822nxbSpNKvhJpHauieuehZco2dbx7uJcdE5x/aW0+La
XvpV8GWhsTz89Sf01L0rFsN3K3H2+s7bja3dtNyqReYbc1aAR2rttqyE19pZacC+0PWuoZJBklcd
0YGdoncOOszS71nJsP7VuSf002ryaO5tM1fT9Vx1laVftZGO+MJKS9q3r2pHok4ZfmtbbX11Ni3O
jZ5vH6ZxtptrdfZOmrLlRIf+6ty/4DdKxyvp2V9fMoat7t1/hHSJvaZxsPbyf5zaRvfrI9NXFT1C
OHXNakfd43b54huBdaGlTWXTEkPVNkza005nN24Ylfae33tthBHzOoZWyP7ca67j3rP95Fpc+Bdj
KMtxmbFkqEAIAQAgBACAEAIAQAgBACANq/u/E/0/sgCRqTJv4kf6PpgCmkyE9epHt16e3ppAErVq
ASPGfs90tf1wBaFwmUrVMlQSrpqfunoJ6RDBwBs4UosuNCUkrtIkZaAkrUqRnoSB9UUL4tpPCpkc
gzbGpnIDr4nodT4RW+ZBO20lVwQQT8rUyPCRTrL2TMEC+GZSHwMvr/dEgjwAgBACAEAIAQAgBACA
EAIA4q3p3v2n47bc5Fu1vXnePbdbfYtSLq7xkeR17VFSNyBLNHSNqJqLjc6xY7GKWnQ5UPrPahBM
VQhO5Lpgm5ENpKr3Hi+58fmmM5yxOSbd8EMFO31gWau2I333Gp2KzMK1gqdY/mWH4SfMtmPF5BCm
XrguqfQZK8lJ0G4saYk1K86vkvzliV5vZE6FtpOJfI/mnl1y3h3ey7KKS2ZRXqul+3U3GeuF+y3M
HX3XlPnH6K5VCayvSlxJSl1ws0LQICO4DtjgXe3qr252VF4dumXrCWyzbapDxuy2qK8Nsny4nWXe
XqboXaaePX71q/8AlQa91/8AiS2qK8NsvA7ltjOHuxewAZrsRxcXjK20JS5m+WFm85H39gStVvUt
lFBZELMz20jLah3SK1dY8r92ep/dnd/VYzL3yNNf+DZrGFOUnXqn/SdPA80dz+o/c/dNbOVe+Rp7
/wAG1WMWv5T+KftdPAyhJJJJMydSTqST4mOu9xwI0gSIAQAgBACAEAIApd6sViySgctWR2Sz5Da3
kLQ5br5bKK60akuS8wfh65l9tBXITKQDp1jLws/P068sjT792xfX2rc5Qf8AutfWZWHnZ2n3VfwL
12xeT3wlKL+po66N5PTB2V3Brnr1t5dbjtBdaha3ai22qjbveH1DqgNWbLV1DFTZZr1IpXyz4JZE
5x3b21699xaVaWNrtmGo2UqKdfl3l5yScZ+bSfizuHt71t17TLax9bsxzrSWydei77Wk4y82k/Fn
VxuLx+5QcIc8tG4eLXnJ7M/Ya4VmJ7z7UVt6oE0LzZQpH4qsoOy4Y9VOBUl09X/CdAMi4mPRfaPq
D2z3tj/8hdVvNS96xdajcXkq0mv5Ua+NGd+dq9+dv922urTrvy81L3rNxqNxeSr768Y18aHfd6ev
5n7d7a9217ec7bJXb2YS5UMU1PvJi1LQUO5eO0y1BCnsjsbDdJaszo2EnuLjP4atkNfNPXk+RpsJ
e9Y92XLgc4jda2SPbBsByO2Q5R7eWndPYTcjGNy8Ku9PTvN3PHbixVPW999oOm23y39wr7Hd6fVL
tLVNtPIUkgp0jT3Lc7UumaaZkJpqqObYoJEAIAQAgBACAEAIAQAgCG54CAKbWLPyNjx+Y69PDUfC
IYJCUwTOfj4/V9AgCQqzoj6dPHw1+ESC2Kz5iQDI/MkeyZBSNPGYgDgTZ5kqx/G1EEKFtSAAJADt
WDL2TB/VFtbZE8DIplM0KIkemvwB6ewyit7iCdtQ7a8E/wBdo9R1lpIfCC3gvdkePxP7IkExACAE
AIAQAgBACAEAIAQBiLzV5s7EcDNk77vbvtkrNstlE29S4vi1G6wvK8/yUtFdFjGJ2xa0u11fUrIL
jkvJpWZuulKExds2bl+fRBfoKZSUVVnzf+bXPnlx6ve/9ut9fT3KnxJm51f/ACq2KxyteOI4NaO+
S77kD/8AAprpemqNIXXXarAS3qhkNokg7DOztL7a025qWp3Y2sS3Gspy48kuLb4RW1ml1bV8HScK
eo6ndjaw7aq3J08kubfBLazOzjN6fO1mzFut1+3At1p3N3OKG6mpuN2pPxeLY7Un5xS43ZasKp3n
KacjW1KFvOKn2BtOh8i99es+u9xXp4WgzuYOiVaXS6Xri5zktsU/1IvzbPKPefq3rOu3p4mhzuYe
j7vddLtxc5SW2Kf6sXu3s7BRIBKQEpShKUIQlIShCEAJQhCEgJQhCRIAAAASEdLNuUnKTbk3Vt7W
3zbe9nUTbk3KTbk3Vt7W3zb4sRBAgBAHF26+9W1ux1ipcj3UzK2Yha6+pXR25VYmqqq251TbZedY
ttst1PWXKuWy0JrLbSkomO4iYnyHt3tXXu6smWLoWPK/cgk5OqjGKe7qlJpKvBb/AAob7QO2Nc7o
yZYuiWJXpwScnVRjFPd1SbSVeC3+woO0XJHZDfZVcztVuHZ8qrra0KivtKGbjarzS05UUfiVWi90
VuuDlKFCRdQ2tsTEzqIyu4+yO6O1FG5ruLK1Ym6KacZwb5dUW0n4OleBk9wdmdydrqM9axpWrEnR
TTU4N8uqLaT8HSvA5vjihxgQBg7yo54bb8WcgsOIXbGr9nmV3igF4rbNj1dbrcLDZ3HFtUlVca24
hbJqrg42ryWEgq8tPeogFM+1ew/SjVe+MK7qUb8MTAhLohKcXJ3JLfRKnurc5c9i3M7O7I9L9T7z
wrmoq/DFwYy6YylFyc5LfRJr3Vub57FuZIcaPUG2h5J5OrBqWzX7b3NXmnn7LY8nqrdWsZE1TIW9
UNWm6W4pYXcWKdsuGmWlK1IBKCqREXe9vSHXezsH96xu28zTY065Qi4yt14yi6+7XZVPZx2FzvL0
o1rtLB/ekbtvL06NOuUIuMrddlZRdfdrsqns4+GeMdSnVogBAG1xDbrTrDzbbzD7amn2HkIdYfaW
JLaeZcCm3WljqlQIMVwnO3NXLcnG5F1TTaafg1tRVCc7c1cttxuRdU02mn4NbUdZvJn03dvdzGLj
lWzbVv23z9a36160I72sJyV9YddcZdokBYxyuqH1CT9OnyD/AF2v60d9djeuGq6ROGn91OWXpdFF
XUv21tc3/mRS4P3uNWd29mesmpaXOOD3M5ZWnbErv+LbXN/5iX9bxZ118XOW3Lz0rOQdTftvq654
bkFJUUdNuFtjkPnVGEbj4+h5LopbtQBX4Stp6plJNFdKX+OwT3Nrl3IPqvBztL7i063qGnXYXsK4
qxnF/U+TXGL2o9PaXqmFquJDUdMuxu4dxVUouq8nya4p7UfSL9PT1IOPvqK7P2zcLai/0Vuzagoq
RrcnaW5V1OnMsAv6mU/i6WqoFKbfuNjcfCjSXFlBp6huWqV9yBrb+Pcx59Mt3B8zcRmpKq3nYNFg
rEAIAQAgBACAEAIAQBDX1B/TT/TAFHqtXCddAPol4wBAl7tPjOZmZz11AiAUysP3R8fCfQT+yJBb
FUZHuP8AVSozlM6ga/ERAODdn1/+wMXBBHda3FGZGhSoplMeB6xQq1qTwMgmNQog9s0g/Lp4T93g
YuEEzQLIuFMkqJ+U9JaTURIyPUyiCS/mfu+/+kxJBGgBACAEAIAQAgBACAEAYGeoj6geznp07AXn
efdCoTdb7V+dZ9s9uKKraYyDcXMFsldLaLelSXFU1upQQ9X1ikFulpwSZrUhKr+PYnkXOiO7i+RT
OSgqs+bjvnv5y+9W3kvUZRnN1qskv9SuqOPY0w9VUu22zmGO1IIpLfTFSqe2W2mSUh6oUFVlweGp
UohIv65rmjdoaTPU9VuK3ix9s5y4Rit8pPgluON6/wBwab29p89U1e4reNHcvtSfCMFvcmd0XGPj
Bg/GXDP5LYG2btl94YpV5pmztN5dffaxltE6Sk8xTrtvx+keBLFMlQBUfMXNZ+XxB376gar31qPz
sjqtaTak/k2K7Ir9adNkrjW+XBe6ub8ad7986l3nn/NvdVrS7bfybNdkV+tKmyU3xfDcubyWjgJw
gQAgBAGsAeWL1EN2b3ufydzi217zyLHtlWv4BjNtU4o09Kza1j+b3BLXd5aaq73QrccUBMtpbSfu
x7q9IdCx9E7HxbttJ5GbH59yXFufwxryjGiXjV8T2t6U6JY0bszGuW6O/mR+fclxbn8Ma8oxSS8a
viYv7T7oZRs1uHi25OH1j1LecYulNXeU24UNXSgS4kXGzVqJKQ/RXSjK2XEKChJU5TAjnOuaNhdw
aVf0jUIqWNftuLr9ltbJLk4ujT5o5rrOkYeu6Ze0nPipY16Di68G90lycXRp80ew/Ac2sm5OEYnn
+NvB6x5jj9syG2qCgpTbFypW3zTOEEyepHVKaWDqFIIOsfPDWtKydC1bI0fMVMjGuyg/Gj2PykqN
eZ4G1jS8jRNVyNJy/wC/x7soPxo9j8pKjXmXcJTE+k9fhGrdabN5rHWmzeeRnmdWX2u5V79O5Ct1
dezuNfKJjzVqX5dnoXEUthaZ7lr7KZFmaY8tIkAmWgj6E+n9vEtdk6XHBp93+5237Wqyb8epurPe
nYtvEtdnabHC/wDb/dLbXm1WXt6q1MdLRd7pYLrbb7Y7hV2m82euprlarnQvLp6ygr6N1L9NVUz7
ZC23WXUAgj4dI5VfsWcqxPGyYRuY9yLjKMlVSi1Rprimjk1+xZybM8fIjGePci4yi1VSi1Rprk0e
vHixujct5+P22G5F6Ww5e8gsCkXtynCUtu3ez3Ctslxe7Ekhtb9VblLUnwUox8+e+tCs9t9252jY
yaxbV2sK8ITipxXjRSp7Dwf3totrt7unM0jHTWNau1hX9ScVOK8aKVPYc/xxI4sIAQAgDF3lJxYw
rk7iDdsu60WLNrEzULwvNmKcO1Nqfd+dVsujSO1y5Y7WupHmsE9zSj5jRCwQrsT0+9Q9S7Ez3KCd
7R7rXzbNd/8ALhXZGaXsluZzzsXvzUOy81uCd7SbrXzbVd/8qHBTX0PczoRZVyj9O7fqwZdi2Q33
a7cvFqxu54pmuMVjq7DlFuadSpYYdkKHIbDXIT5dXQ1SCUglDraTIx7X7e7k0PvDTFqGkXFdx3sl
F7J25fqzjvi+XB702ewu3u5NJ7lwY6jo91TtP4lunB/qzjvT+p70fRF9IH1bduvUo2lTbr47Z8N5
O4DbWEbp7bsveQ1dGGyimRn2Fs1DinqzGLs6QXW0la6CoUWl/KUKVGXiyx51W229z/Izk0Jqa8Tu
UjELggBACAEAIAQAgBAENzw+n9kAUZxXeoq9p/bp8IAh+Gns0gCkVmhn4dv7v3wBbVSAoK0nIK+g
kS+iUAcG7RtkY7iaiOw/yolRBCZkuOACeo0BHxihLbQngc/tg9p19hBB16aD3RUQTFGpKK2nXpIa
EjrqsyUfeO6HEk5BZGk/06/0RJBHgBACAEAIAQAgBACAOF+Q+/u2vF/ZjcDffdy/U+PYHtzj9Zfr
xWPOIS/VrYbIobPbGVEKrLxea1TdNSspmpx5xI6TIrtwlcmoQ+JkNpKrPmA8xeWfI31cuXhyivpa
51N1uFXYdottm6txWO7XbfN1KngahZP4Vh5ujT+Lu9wUAp96YnINojY6lqWmdsaRd1TUrit4dmPV
KT3t8Ipb3KT2RS4mi1jV8HRsC7qmp3Fbw7Uatv6klxk3sSW9ndBxx494fxw27o8Lxppmru1UGq7M
MoLCUV+T3zsk5UPOFIdRbqPuLdIxohpsTl3qUo+Ee+e9tR731iWflOUMGDas2q7LcOfJzlvk/ZuR
4k707wz+8dVebktwwoVVm1XZCPN8HKW+T9m459jhRxAQAgBACANYA8pvqBYDc8C5V7ofjqZ1qhzC
6jNrHULQoN1tvvrTbzy2VkdqzTXBLrS5H5VJ16x7w9JdWsar2Hg/Kkndx7fyZrjGUHRV840aPbfp
bqlnU+yML5TTuY8PkzXKUHRV840a8zDCOyDsI9O/pf3y53niPjDFx85TeP5dmtgtLjw0XaWbk1c2
gyqZK2WKy6PtJnLt8vtlJIjxR6541nH7+uTtUUruLZnKn61JRq/FqKPHXrTj2bHfNydqildxrU5U
/WpKNX4tRR2Ex08dTnn+9VPjffbJn7fIXGrU/W4jl1FbrfnVRRtF1OP5RbGGLXQ3C4IQkFmhvttZ
ZQHZFIfZV3Edwj1z6F95Yubo3+k8y4o6liuTspvbctNuTUebtttNcI0Z6p9Fe7sbM0j/AEvl3FHU
cZt2k38dptypHm4NtNcFQ6f/AH+Htjv871PS16U9PkFPxVSb0xVM2+p3Hy2sxZdUlaE1NhfprKld
RRd4ku3rvLdV2KT8qnA5HjT17lhy72h92aeQsK2rtOElKfSn49LXsoeRfXGWJLvGH3dp5Cw4K7Th
JSl0p+PS17KHZPHSR02WrnWWW7AsIzDOLspKbbiGM3vI6wqMkqatFuqKwNkzSZOraCdCDrprG00T
S7ut6xi6RYr83Jvwtqiq11SSb9iq/YbLRtNu6xq2NpVmvzMi9CGzbTqaTfsVWYccCeSuf8lcM3Fv
O4NutlJX4tl9BQWyptFH+CpXbderfU3JFuWjvUl5+z+SlvzPvLSoFZJMdner/Yui9k52Db0WU/lZ
FmXXGUnJ9UGl17dqU67t1VsodieqvZmkdn5mHDSJS+XftS6oyk5Pqg0uvbtSlXduqtiRnjHTp1SI
A4U382FwXkTgFbgmbUxbUFKrMcySkabVeMUvYbKGLpbXFia2lfcqacny6lmaVSPapPLezO8dU7J1
eOqac+q1Kkbtpv3bsOT5SW+Mt8X4VRyjtHuzUuz9VWo4D6rUqK7ab925Dk+Ul9mW9Pwqjzpd3Iv0
8+SWO5VieRXPA90tuLzT5HhOZ2F6qZtGUWdD/aHUSLbV4xm/0oVTXGge7klK1sup7gDHu/t3uHSO
8NGhqumSU8a4qSi/ity4wmuEk/p3o9r9u9w6d3LplvVtKn1WZb19qEuMJLg19a2o+l96YvqR7S+p
Fx+s+5GIVluse6WO0VutW9W1f4xK7tguXqpwmofpqd1X4qrxG+PtLetlZIpcaPlrV5zbgFrJx5Y9
zpfwPc/w4nJoTU1XidkcY5WIAQAgBACAEAIAgvfcP91X2QBRYAhOzEpdVGR9kpElUvGQEAUatUTO
RIl9h9vwAgC1nSohesz83WR1AMvGZgDhTadcsdxNoq7lptIWZCY7fMX110UgnT4zihfFyRPA5+aW
kJHiDoZeOmk9epnFRBvZ0faJOnZIjpI96iCfhIwByTTf4afb2iJBMQAgBACAEAIAQAgDQkAEkgAC
ZJ0AA6knwAgD5235hn1Qq/l7v25xX2cv1RUcfNicjftd1VaHyuk3T3co3lW+4XRf4dRTcbNi1QVU
VtT8yHKjzXkj5kGN9g48bNv51zZJqu3gvw3mLeuJ12+6id4IcUWePeBqynK6NlW7Ge0FK9fXCS6r
GLEtQq6DFKZRAQ3UDuS7XKTPvfAR3FLYn429XvUJ926p+6dNk/8AT+JN0p/i3FslcfOK2qH08Tx1
6qd9PufUv3Xp8n+48WbpT/FuLY5vnFbVD2sz0jps6mEAYfc6d3M52V49XrL9u3PweR1eQ4/jKb2G
WqhzHKG9KrfxN6p23wpr8UhdI3TtKUlQbcqUqlMCO0PSLtzSO5u8I4OtRVzEt2J3PlutLko9KUXT
gk3JrjQ7H9K9A0ruLuqOHq6U8W3YncVt1pclGiSdOCq5NcaHG3p38kcn3525yiz7hXxN9z7Abywi
puLzbbVxuuNXpDj1rr65LDDFO47S1jL1MXE/MsJT3a6neetXZGB2rq2Nm6LZVnScu210x+GN2FKq
KbbXVFqXKtaG49Xuz8LtvVMfN0iyrOmZMGnGPwxuQ3pKra6o0fKu7idhUdJnUAgBAGO/IvjHtjyY
xNWP51bfIvVDT1AxXNLehKMgxaseHcHaR0lKKygcdA8+kemy8n+yoJWOZdmd8az2TqP3vTZdWJNr
5tmT9y6vH9WS+zJbV4qqOXdod56v2bqH3vT5dWLNr5tlv3LiXPlJfZktq8VVHVHYfR1zEZWwjKd5
sYVgzVWldTUWCx3VOU11Ah1JNPT01ev+W0FY+zMFxTjiG1GYCo7+y/4h9GWA54OBkvU3HZGcoq2p
c3JVbSfJJtcjvTK9e9HWC5YWFkPUXHZGbirafjJOrSfJJvwO7Lb3b/EtrMMx/AMGtLVlxfGaFNBa
6Folxfb3reqKqrfV/Eqq+uqnVvPuq+Zx1alHrKPMmtazqHcGp3dX1SfzM29KrfBLcoxXCMVsSPOG
s6xn69qV3VtTn15l6VW+CW5RS4RitiReUao1hLVtFRXKjqrfcqOluFvrmHKWtoa6nZq6OrpnklDt
PU0z6HGX2XEGRSoEGLti/exr0cjGnK3fg6xlFtSi1uaa2plyzevY92N/HnK3fg6xlFtSTXFNbUzD
ip9PXh/VZEMlXs7bm6nzxUm1U19yWlxpToWV/NjbF3RaSyVHVvyvLP8AZjsqHrH6hQw/uf36uynW
7dt3Kfz3Gvt3+J2JD1b78hifdPvieynW7cHc/rU+ulfEzBtVptdittDZrJbaCz2e2UzdHbbVa6Rm
ht9BSMjtapqSkp0NsMMoHRKQBHW+Tk5GZkTy8u5O7lXJOUpyblKTfFt7Wde5OTkZl+eVlzncybku
qUpNuUm+Lb2sn4sFkwn9Q3MGcR4o7htrX21WXv2HCbeA4Gyt683RmqrUy+8tIs1sqiQOuk9Jx2x6
K6bPUPUDFuqvy8WFy9J0rui4xryrKa+g7O9INOln98Y91V6MaFy69ld0elV5VclR+BxT6VuNPWjj
pfL8+nsOXbj3uppxIzXRWSgttqaeJkAQqs/EJHWXZ745B/EHm28ju/Gw4fFj4Ua+dycpfiS+k3nr
plwv904+LH4rGGq+c5OVPoSOy6OhzpUQAgDHPk7xwxnkvtzV4hdSxbcnt4dr8Gyn8Oh2psN87QUs
uKPa45Z7sUBmraChNCu8SWhJjnfp/wB85vY2tRzbdZ6XcajftVopR/WXKcN6fGlGc17G7zzOzdWj
lQrPTbjSvW67JR/WXKcN6fGlGdLXpo8qM64C89tptwmrnVWS1UO4VLtXvTZBUrRbL5gN+vrOO5Xb
7myFinqU2p8pr6N1YPkVNM24mXzA+9pSs6hgxv2H1WrltTg+aa6ov2pnuLFyLd+3bybLrZuRUk+c
ZJNP6GfV0p6hirp2KqlebqKapZaqKd9laXGn2HkJcaeacSSlbbjagpJGhBnHHTYkaAEAIAQAgBAC
AJap0bHvVL6wT+yAKdoqft6Tl7RAEB6QAB8SAJA9ZEyJ10kDAFvVXUz98vH3D9cAWw8sIbcV17Ur
MjITMjLXrqYA4K2qcCLfiCJyLlleTOWhSlU1DunJOqhp4kRQq18CeBz8gpIKZyX7QdFewK+Pt8Yq
IJhhzudTpIyM/iFLSoH3jSCByXQnup2SepZSf1CJBOwAgBACAEAIAQAgDqJ9bDnXbuC3BzcPIrXd
UUm7u7VFX7U7OULToTXjJMioHae6ZM0j7/4XD7I67WLWJAPeSmc1iMvDs/OvJP4FtZRcl0x8TwFe
mrsM3uru9cNzcsol3TF9rVMXZpy4JcfZu+4FwdU/ZzUOL+SqdtgS5XuJUVEuhoqBBMdd+tnd8+3e
2lpWDPo1PPbhVP3o2Uv2klxXV8Ceze6bjpj1g7qnoPby07Dn06jnNwqt8bX+JLwr8Keze6bj0Rkk
kkkkkkkkzJJ1JJPUkx4pPIBpAkQBxXvhtsxvBtFuHtq92B3LMYuFBbXXJBNPe2kJrbFVTUlQSae7
0rK5y0lHJuztdfbXc+FrVX8qzfXX425e7PlX3W37DkXaetPt7uPE1erVq1eXX4wl7s/91t+w88fC
beRfGrkQilzmnetFmyNb+2ueNVKFtOWCrNzQ1R3KoQ4popast7aHnFSVEU63CkTkY9m+p3bH+tuz
p29Nkp5VqmRYaeybUW+lUrXrg2l40PW3qL25/rDtSVvAkp5Nul+zR7JtRb6dn68G0vGh6cdNCClS
SApKkKC0LSoApWhaSUrQtJmCJggzEeDWnFuMk1JOjT3pren4o8UNOLcZJqSdGnvT5GkQQIAQAgBA
CAEAIAQAgDpF9Wnddirue2+y9sf85yyt1ee5QyypC1CsuTX8sxqgcbSVOecKRFQ+lJAMnUkTChHq
7+Hnt6djBze5b6p94krNp/yINynLlTqov6LPTXoRoUrGFl9w3lR35K1bb/Ug6zfKjlRf0Wdn/Fvb
13azj1tLhNWyGLlbsQoa+8NBAbKL1kK3shuyVACZUiuui0zPzSGsdD+o2sx17vbUdQttux89whtr
7lpK3Gj5PpqvM6V7+1Za33fnZ0G3Z+c4Q21922lBUfJ9Nfac9xwk4eIAQBqDIzHUaiDVVRkNVVDz
Q+ohsjWbU8gL7kDYecxXd56vziyVnzgU90q6gDJ7N5oJk9b7m55zWs/IfR4pMe6/SHuq13L2hZsy
aWoYKjYuLwiv2c6cpQS9qZ7S9LO5bfcPatq3JpZ2ElZuLwivcnTlKP1pn0I/Q15jM8xfT62mvN2u
X47cfaCiZ2Z3KS68HKxy8YZR09JZb0+PvhOQY1+FqAT1c8wTPaY5fm2vlZDS+F7V7TtO3LqgdwcY
hcEAIAQAgBACAIFQJol+nUQBTiCOsAQlKB6T+Hh9UAW7XglYCSJyJPXU9ZGALLrPNWHW+4JkFgk6
z6yAH9bX9cAcJbUtIVbcYdE1D+TICAtXytq7HC4UJAmCvu+afWQ9kW18RVXYc6GaR1I6CcySD4GZ
98VlJGZqD+JQTIzbkrpInvMiT4mXjDiDle3qCqWnM+rKZfUP3RIJ+AEAIAQAgBACANCQASSAACSS
ZAAakknQACAPmG+tRzUy71A+feUWDFKusu22u1OUVWyWyGNUrq10VZU0d2TacgyhtgK8pVwyzI2l
qLp1TRstJmAkxvrTsafgyyshqFuEHOcnwilV/QjXZeTasW55N+SjYtxcpN7koptv6Dsy417HWvj1
tFjW3NEpmputM0q6ZbdmkBH84yu4pQ5dakHuWo01MsJp6cEkJYaT4kk+Be/u7Lvefct7V3VYa9yz
F/ZtR+H2y+J+fgeFe9+6LndvcF3VHVYq9yzF/Ztxez2y+J+fgc8Rww4kIAQAgDoz9TzjM9Z72nkV
iFv7rHf1Uls3KpaVCQLXfglFJbcocbQkKFLe2whipXqE1KEqVIuzPrb0K75jn4H+j9Rn/wA/jpvH
be2dre4edvguMX4HqL0Y7zjnYX+lM+f/ADthN2W3tnb3uHnb4L9XyOdPT55n0OeWaybDbl15pc+s
NAi34RkNfUlTWb2ehalT2aqffUVpym1UjfajuJFbTtgj+KlQVxT1k9Mbun37veGhQ6tOuS6si1Fb
bUnvuRS/w5PbL9R7dzqcY9WfTq5g3rvdeiwrgXJdV+3FbbcnvuRS+xJ/Fs917dzO1npoeo0Pxjzo
dCGkAIAQAgBACAEAIA4b333ywnj5t7c8+zWrT2tIdpcesLLqE3XKr8Wiqks1rZUQtXcuSqh6Xl0z
AK1kaA8r7O7R1PvTWYaVp0Wrao7tynu2rddsm91XujHfJ8N5ybtPtXUe7tWjpuBFq2qO7cp7tuFd
sm91eEVvb9p0P8bMLzXmdyyf3JzOkcrLBbMlps+z+r8tRs9DQ251teN4ZTOqbDU6o0bFKyyBMUrT
jhAlM+uu9dW0v007AWl6e1DIdh4+NGvvSlJNSuPj7tXOUubS5I9Td36np3p72P8Au7Bajfdj5GPH
7Tk1SVzn7tXKUudFyR6RSZkmQEz0SAlI9yUiQSkeAGgEeG9u97WeM9vHazSIAgBACAMFvUR2nRub
xtyO6UlD+KyHbKoazuzuNNLcqk0FIBTZPSs+WQotv2RxbyhJQJpkyE47f9E+4XovelvCuy6cLPi7
MlXZ177bdf5ScefvUO1PR/XXpHd0MS5LpxM2LtSXDr32267N9Vz20Lk/K08r2NqeXO4HGnI7wmjx
nkfiLdwxWmqX+ykO5eBJfrqZmnCj2fjb1jFRVtpA1WacDUyj2bqdrqtK4t8X9TPZdl0lRn0Do0Rk
iAEAIAQAgBAEB4zEvZ+8QBJrMvqI+M+sASLxklZExITP9HxgC1KlxSu6SiBPWZnIagD2dIAoFU15
iCqZmnuIlp001111gDgXaBaVWnFEkmZsiHE6zJKkrQpPuHcmcW18RPA56dCpKAl9f1a6AxWyCWaW
rz2UmX+GpQ1/19deshKAOYLcZUVKR/5FB/V+2JBVIAQAgBACAEAIAwR9Tbkb/wCFDghyX3vp3Eov
eNbbXa14olTvkqdy/LS1imNJaWCFBxu7Xlt0duoDZPhF/Gt/NvxhwqUzfTFs+bL6ae3FVuFyWpsv
uSXK2i20tF0za6VjxKvPyS6l61WNTyiCVPu3GvfrAZj56YTmDI8J9bdcWj9jXcWDpk51yNiPPp+K
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
QdDH0l07JnqOi4+beS+ZfxYTlTdWUFJ09rPoRpWVczdOxs25/e3bNubpzlFN/Wz66caQ3ggBACAE
AIAQBKr+6fo+2AJRxQ+r9soApNWsqASk9ZzI8OnsgC36tCQkAGc+stJ9NNSYApDyAELPcZdpJ9h0
J9vsEAY27SEGz4WpEkk2lSVgGaiE+aEKUJzToBL4RbWySJ4GRC1BSTqoEDX6JdPjFwglGpfim0zP
chtY6CUlrKp+06iI4g5etPd/L6bunMNgaz6Dp190SCswAgBACAEAIAQB5gvzVm7ruG8FNstq6V9T
VRvHvnZk1iEOdpfsuAWe4ZDVtLQNXGjc6miUR0mkRstMhW85co/jLN5+7Q85XpI4kKHbHdXOHETd
yPN7djtM72gdtLjNnRV1TPdMlU6m9tqkZS98482/xF6g56rpulLdbx53X5zl0rZ5RZ5c9fM7r1HT
9MW63ZndfnOSitnlFnbTHnA6AEAIAQAgBAEvV0lJcKSqoK+lpq6grqd6kraKsYbqaSspKhtTVRTV
VO8lbT7DzSilSVAggxdsX72NehkY85W8iElKMouji1uaa3MuWb17GvRyMeUoX4STjKLo01uaZ0p8
pvTJrGHLpnPHFsVlG4qorbjtRWPJTV03eUqW3hNfUKS1VUwmspoalYcSPlaWr5UR6o7B9dMfJVvS
u8qWslUjHJS9yX/mr7Mt3vL3XvdD0t2R6zY+SoaZ3ZS1kJJRyF8Ev/MS+F7veXuve6GIW0HNDkfx
lqDg1c5U3qx2ZZp3Nuty6K4JfsobHYae1Vb/AOHv1jaTp2tpU5TCUw0Y7H7l9NezO+IfvGcFDLuK
qyMeSTl4ypWE/aq+Jz/uH0+7S7yh9/nBQyZrZfsNJy8XSsJ+1V8TtM2e9TzYzPlsWvcKium0V9ck
j8Rdl/zvEHnOwqPZfqBlNTQpUoST+JpkJn1UI6B7l9Be5tKi8jQrkNQxl9lfs7y/ot9MvZL2HR/c
Pon3Dpqd/RbkM7HX2fgur+i30y9jXkZ8Yzn+CZpTt1eIZriWUU7yEuNO2DI7RdUuIXLtUgUVW8oz
KgOnXSOoM/t/XdKk46lh5VhxdH12pxVfNqn1nVedoWtaY3HUMTJs9Lo+u3JKvnSn1l5Fl1JkppwE
dQUKB+oiNP1R5o1HVHmjQNOkyDbhPsCFE/ZDrjzQ6480U653O2WVh2pvNzttop2Ulbz90r6S3tNJ
AmVLXVvMpSABGXjYWbmXFaw7N27ce5QhKTfsSZlY+HmZc1axLN27ce5RhKTfsSZglv56h+yG0VBW
UGHXSi3ZzlJWxTWbGa5L2PUFQkhKnb5krIcogywTMs0qnnlkds06kdudoeivc+v3oX9YhLT9K3tz
X7WS30hDeq85UpyO0u1fSHuHW7sb2rRlg6Zsbc1+0kt9Iw4V5ypTkdOFVXcoee+4qGUJuOWPUbx8
mkYS9atuNv6R4AFxxR8y32kKaHzLWpytqSNO8mUel7dnsb0p0Tq/Z4uO1tbpK/fa/wB64/BbF4Ho
aFrs30z0dy/Z4uO1tb969ea/3pvwWxeB308WeLeHcYsKVaLWpi+ZvfW6Z7N81Ux5b92q2QVN2y1p
cm7QY5bnFq8hmfc4qbrk1kBPkX1C9QdQ771JXJ9VrR7LfybNd1dnXOmx3JLe/srYjy13331nd6ag
pyUrWk2m/lWq7uHXOmxza+hbEZQR14cEEAIAQAgBAERr/Fb/APOI/wB4RTP4H5Mpn8D8meWprXnn
bOv/APbWwe4y/wCa9v1+qPpH29/2xg/9Da/9NH0E7e//AAWD/wBJZ/sRPrtRrTkwgBACAEAIA2qM
h7z0gCUeVJPxP7IAkV9Br9HtgCm1JGgAlqf1S+qAKS+2FCXun4fX4DwgCnrpR2K8UyMwektZiQ06
GAMWNn3UC14a2ZhbllSuSj/WLaye3x7eyWnti2vjJW4yCdWO7yx3dwAV0UEdqiU/fl2dw9k5+6UV
sggtrlVs6GZac16TCXO7t8ZmRPgJThxJOabeR+Fal0CES93yJMokgqSDMS9kAb4AQAgBACAEAeJf
83Ve605Hwnxvzl/y5Ns3bv34fuPlmu87FrcHin7pWGDIHrrG40pbJvjsMe/w5GF3psW9ih4l4Y8y
hKV3XI83udSUgDvqP8w1Nt71kAdy/wANbW0zMzJIHhHjr11uSn6g3Yybahi2EvBdLl+Nnjb1ouSn
3zci3shjWUvob/GzPCOnTqgQAgBACAEAIAQBxfuXsntLvFRij3M2/wAay7y0FunrrjQJbvNGCnsB
ob5RqprtSKQjRJQ8O3wlHJNB7v7m7Yn1aHmXrEOME+q2/OEqx+o5BondXcXbsq6Nl3rMOME+qD84
SrH6jrI3b9JywXBx+5bJbgP46sgqTiudNvXe3d00ybosjoUIuTCCJyFQy+R4uGO9u3f4hrkIqx3T
h9b/AM3Hon7bUnT+rL2HdOg+u8oxVnuXE6n/AJtii+m3J0/qyp4GEGT+nly2wNblzt+FU+QKpV/L
cNvMqoq24BJV8rlOwXbPeVE9oJS02pQMtNJx2rgesHp5qtLLzVabVem/blBeTbThX2nZeF6q9ial
S08xW21Wl6EoLyq0419pbTdTzysCf5Y2vk/bUUxLX4U0ufHyyj5ZAu0ziiABoZkEeMbZ2vTXK/bO
Oizcttf+X2128zZu16f5P7Zx0ibltr+w212kQ3bnvcUmkNTyhq0vjsLCaPPSXJ/1QG6RKyT7jEfd
fTS37/Rosacf+X/OPu3p9D3ujSFTj+w/OT1u4T8zdxnm13bb7MFIdUKg1u4mU01G204tQ/iO09+v
L9zbd/iEmVOVAT+EYeT6nenOkQfRn4uzZ02I9T8qW40ps50MTI9ROwdKg+nOxtmzpsx6n5UtxpTZ
zoZhbQek5eF1VLct8s8t1JQNrbW9iO36nqytqUpKFKp6nJ6+mp6ekacTNBLFOtwdQRoY607j/iE0
+1blY7Wxbl2/tSu3/cgvFQTcpc9rXJnXncHrrgWoSs9t407t7hcve7BeKgm5PntpyZ3CYBt3hO1u
MUOHbf43bMXx23pT5VBbWAg1D6W0NLrrhVLK6q5XB5KB5j761uKPUx5q1vXtX7jz5alrV+d/Klxb
2RW/phHdGK5JHnrWNb1TX82Wfq96d7Jlxe6K5RjuivBF5xpzViAEAIAQAgBAERr/ABW//OI/3hFM
/gfkymfwPyZ5aGVd3PG2KSZz5aWAggzn/wDNe39CPGPpH29/2zg/9Da/9NH0F7eX/wBiwV/9LZ/s
RPruRrTkogBACAEAIAgrMz8NP3wBLP8ARPxP2QBJOeH0/sgCQdGomNfb16yPWAJJTRUSfj9PWXwg
CXdTJJSEk+3w6SmNNQAIAw42qeUtrAkiaSqwhLk0p/qsuLA9oBH1xb+2TwMlFgS1n9HT2if0xcIJ
NhJXcqZszIWntSfCRcHd7zOesU8Qc0UZCB5XhJIT/siXwGkVAqbfj9EARIAQAgBACAEAeH783SB/
zF4Unx/yhu2PHp/NsWPwjc6V8M/NGPf3oxV9OUS4i7ce+5Zwf/1nev2CPGvrl/8A0PI/6ex/YPGf
rN/33f8A+ns/2TOKOoTqsQAgBACAEAIAQAgBACANwWoaBSgPcT++I6Y8kU9MeSHes9VKP+0f3w6Y
8kOmPJG2JKhACAEAIAQAgBACAEAU29Xmmxyy3nIqxaG6SwWi53upWv7iWbVRP1y+7UaEMS+mMzT8
O5qOfY0+0q3L96FtLn1yUfymVg4k8/Os4NtVnevQglz6pJflPOL6dW3lZyd9SDjHi9Uh+oGdciLD
mN9LaAl1FotN9fzq8urSj5W0s0FsX3S0Eo+kvyYYGnxxrWy3atRgvKMVFfiPoXi40Ma1bxLapbtw
jBeUUl+Q+srHHTZiAEAIAQAgCXgCE4Rp7p/Z+6AJNwiZn11A+yAJBRGpPT4fVAEEJmCZ9IAl1JEp
TMz7tIAwN22p65VXtc/TVtVTBi1Pi4U7a0Ko62ndpnA3+JZUkqUplUijsUkpmTr0i1ulQq4GWK/P
E/lbdTKXyqU2oz6iSypJ+uLjr7Ck229Z/m9EFIWj55hKkiZJXrJQJBEpRHHbvBy0CQQR1BmIqBV0
K0Ch4gf0iAJiAEAIAQAgBAHh+/N0/wD7i8KdB/8ACG7evj/3ti2nSUbnSvhn5ox7+9GKvpymfEXb
j/3lnA+rMr1HjX1y/wD6Hkf9PY/sHjL1l/77v/8AT2f7JnFHUJ1YIAQAgBACAEAIAQAgBACAEAIA
QAgBACAEAIAQAgBAGAPqO7zt7X8fblitC8lOTbuuP4ZQNpdCH6bHi0l/K7kEJcQ6UG3kUiVASDlV
OfyyPc/of2w9b7tWq3l/yOnJXHs2O69luO6mzbP+iqHbfo3269Y7oWp3V/yeAvmbtjuPZbXLZtl7
Ecq/lYeJd73C5TbgctLva+3A9icTr8Lxu41LCi1X7k53Shioat61AIU7YsVDynVJn2GrQky7hHsT
U7qjaVpfFJ/UexLMay6j35RozJEAIAQAgDRX3TAEuVBMAQCZTJgCTdMpE+/9kASCwTID6fZ9MAOi
TL9usx16QBLGUjqeuvjLw6dZawBg/tu2427tuQQE/wAhdK0gLUVA0zyUagdoACZa9JiXjFpfGirg
ZQkEpBHUCfx0+IPX3xdKSNaWvNvNvUon+Gl8y8CQe7UTkCDLpEA5NiQVGnJ7O09Uy+o9PqlAE6gz
Hw0/dAG6AEAIAQAgDx0fm3dorxcdv+JO+dEw69Z8VyzOduL+6hCi3Qu5ZbbderG46ofKkVb9iqEC
fimNtpc11ThxaTLF9bEzqf8ASyz2jyPj7dsJ70i67c5pc2XmO75lWjKQL3balKSAe38aatCiJpBC
fEx5T/iB0i7id12NX34+ZipV5TtNxa9sXFnkr1z0u5i9y2NV2/IysZRrynabTX9VpnZdHQx0mIAQ
AgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgDclJUoJSCpSiEpSNSSTIAD2kwboqkbtp5nufu8T+9
/IuvseO+ZdbHt89/y3xOmoCuo/m94Nehu81NEhKih5265AvyGikDuQ0jrOce7/SPtf8A0x2dZ+eq
Z+ZS/drvXUvcj/RhT2t7Ez2r6Xdtvt3tS0rqpnZVL1yu9OS9yP8ARjT21ezafR69IriA7wk4F7I7
O3qgpqLP66zL3A3RLDaUuOZ7m5ReLpS1DnalbzlkpXKe3gq6ClkI5Tl3fnX3NfDuXkjtGEemNOJ2
XRjFYgBACAEAQnF9oIHXp7tRAEoZnx19vWANqiAkzgCnuqJ+k/ZAEv8AemOkup9vugAr7p+j7RAE
qpRGhHX9Os/rgDCPb5ZaVt2nvJ82wrT3mQGlO8QlQB6mRlFtfGidtDJ5J7kgj2e2LhBOWNJRdqMm
c1IqABP2p6kfprEcQclpTLU9fD3f0xIJlkgKkfEafGAJ5vx+j9sARIAQAgBACAOsH1kuODvKL04u
TG3Vstjd0yqz4U7uRhLJZ82oTlG3D7eV0iKMgFbdTW0dufpgU6lL5HQxk4lz5eRGT3Vo/aUXF1Ra
Pnk+mDuxTYJv3V4bdapNHad2bAbAwKhXlITldpfNysDSgpMkPVqDU0wmQS6ttPjHX/rj29c1rs77
9jR6srAuq7sVW7bXTcS8lSWzkdNesmhXNX7U++Y8erJwriubFV/Lapcp5KktnI9FnTQ9Y8Tnj80g
BACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAMaeXO9NPsRsRmmYIqgxkVxoXcVwppK0oqH8ovrD
tLSPMBUyU2mmLtY4oA9qWfAkR2B6ZdrT7s7uxsOcerAsyV69sqvlwdel/wA+VI041Zzn067bl3N3
TYxZxrhWZK7d5dEHVJ/zpUjTjtMAfQK4VucxufeGXPJaF647ZcexS70bg1NQ2X6a5Xa2XFAwqwVb
rgUhx+95MBUOgzUpmlcJ6zj3lnXvlWHSilLYl4foR7ktR6pckj6bsccMsQAgBACAEASz/Ufr+P8A
ogCBAEB1UxIe3X+iAKc4oqMh9HuHifbrAGgAAkIA2OGSf01lrAEk8sAe7X95MxAGEmHMqQ7t62lK
nB/Jg4CDogNMKUsgmZMkTA1kSTFqnvomuwygpfnbSqRkAD4T0AGususXSCt2NAVdWyTPtZdUkEaD
uKU6dCNBIj2RAOQYkGoMiD7DAFVQJD4/oIA3QAgBACAEAQ3mWall2nqGm32H23GX2XkJcaeZdSUO
NOtrBQttxCiFAgggyMAfNM9cj0wsp9PzkrW7r7cWyub4270ZZX5Tttf7Wl5Le3WZ1FSbzc9vq+pZ
SBb36GtUuqtLhKQ9SfIJraVPf4t6GVZdm6k300kntUk1R7OTWxmFetRacJpO3JNNPamnsafsMgOD
fLel5FYUcby2ro6bd7DqVtq+UoWllWWWdpKW6fLrdTqIJdV9yvaR3eU+PMACHAE+M/Vn05n2hqP7
00uEn27kSqtn9zNvbbf8l74Pl7vA8d+p/YE+1s/95abCT0G/Kq/8Gb3wf8l74P8Ao8DO6OnTqgQA
gBACAEAIAQAgBACAEAIAQAgBACAEAIAQBrAHnd9Tve17PN6Wts7dVFWLbQUpoqhplzvZrc1u1OxV
32qWlBKVuWulUzQpB+ZDiHh4iPavod2vHRO1Fq9+NNQ1GXzHXfG1Gqtx9u2b80evPRzttaN2ytUv
RpnZ763XerSqrcfaqyfmuR7qfQH4Ns8N+CWHXvJbI3b94OQopN2tw6h5nsuVHbbtSJVg2LvrWkOt
t2THHUOKb6CpqnfGOxs6982+0vgjsX5Tui3HpjXizvBjDLggBACAEAIAl1az9hgCUK5TEjMafTAE
k6uWg9/1jr9MASqRLrqT1/ZAG6AJR9yRA/SQ+n2wBTnnAkS1PdPrI6DrPTpAGGmKEpqtvPnPaixq
7Ea9q0OU6wtRn90oX0n1nFulZrkStxk1SSSz9AUo9QBKZHxlFwgq9jdCLxTJBPa4y6kT9vcVfCYl
EA5GiQBrpAFWSZge7SAN0AIAQAgBACAMfeUfGXabl/sfnOwO9OPs3/B85tblG/8AI2LlY7o2C5ac
ksFWtKl2++2OtCX6d5EiFJ7TNKlA3LVydqanB0kiJJSVHuPmR88eCHJP0nOStBaLtcLkm0G6Vd+2
Q3rsdO6xZs0sVM8e1ipICqWlyCkpXAzdbW6SFAqIC2VpVG4v2MDXNPuYOdbjdxLsXGcJKqaf4VT3
pmp1DT8bPxbmDn243cO7FqUZKqaf5eT3pnatw+5X2Pk9hL7tRT09k3JxRqkp82x1klNK8XklDGSW
ILUpa7NcVoPc2SVUj38NRIKFHxH6m+neR2NqSuY7lc0LIbdqb3wfG1PxS+F/aXimeNPUTsK/2ZqC
uY7lc0W+38qb3wf+XPxX2X9peKZl/HWB1yIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAYU83OU9Nx
v26/C49U0r26uaNP0OG0LiBUCzU0vLuGXV7E+1LNtQoikQvR+rKRIoQuO2PSj0/l3nrH3rPjJdv4
sk7j3fMlvjai+Ke+bW6Ozezs70x7Gl3bqv3rOi/3FjNO4/8AMlvjbXg982t0dm9mEfo1enFnXqPc
sLZfcppa+o2J2ryu1Z5vvmly71t3+rTX/wA5osFpapYlXX/L61mdQEz8ij8xxcpoB9r37lrCxlZs
pRioqMYrcklRU5JLcezLFmEIxtW4qNmKSSWxJJUSXgkfT0paWmoaWmoqNhqlo6NhmlpaZhCWmKem
p20tMMMtoAQ20y0gJSkAAASEcfM4jwAgBACAEAIAgqkDIfp+hgCSf0M5aSJ+Ogn9kAU9SSTMez9p
gCFAGxRkOsif2fZ1gClOKUCSoTJ+7r8J6+yAKXUvJCVKUdAFCU+p0MhofCIBiXjSZVe3jzcg25j/
AJYBOih2rmR4Ago001BijdNeRVwMlKKflT06J+w9YuFJUrTL+b2/2gvAaay7R2gn2aRHEHJUSCO0
iSpmWggCcQdZe39kARYAQAgBACAEAIAxK5s8N9oudXH3Ndgd3rRTVNuyKgedxnJU0jL18wPLmGlm
yZdjtS4A5S3C2VUitKVJTUMlbS5pWYu2b07FxTh/tKZRUlRnzHOQ3HvlL6UvKqqwrMG6jHcxxmqq
KzEcuo6d9zC91sGdqOxu40CnUinutkvFKEorKNR86jfmlQQtKFRn6rpWk90aTc0zU7au4V2NGnvi
+EovhKL2po0GtaLga3gXNK1W2rmJcW1PenwlF8JLemju34x8ocF5M4ai82FbVnzC1MMt5nhFRUJX
cLJWkBKqyi7iHLhj9Y5M09SkGU+xztWNfDnf/p/qnY2ou3eTu6Rck/k3ktjX6s/1ZriuO9HjHvjs
bUezM9wu1uaVck/lXqbGv1ZcpriuO9GTEdfnBhACAEAIAQAgBACAEAIAQAgBACAEAIA4C5GchcN4
47fXDMMlfpqu9P01Qzh2J/iks3HKL12KTTU7TYJfatjL0lVVR29jTYIn3ECOa9jdk6l3vrEMHFUo
4EZJ3r1Pdtw40e5za+GPtew5f2Z2fqHeGqxw8ZSjgxkneu092EeKT3ObXwr2vYdC2w2xnJr1ReVl
uwDDGXso3DzmuRXZBfqluoRiW22FUz7bVZergUd7doxfHqRYQwyCF1Dva2nudcJj3hpel6X2zpVv
TdNtq1hWY0SW+T4tvjKT2tntrR9HwNFwbel6XbVvEtRolxfOUnxbe1vmfTs4KcL9reBXHDB+PW1t
K27S4/SmuyzKnqZpm753mlwSl2/ZXeVoHcuorqkdrLZJTT0yG2k6JjXXr0r9x3Jf7DexioqiMw4t
FQgBACAEAIAQBsV7ZTmOvslAFOf1UfZ2/GX9MAScAQVgA+z9UASbrgAJ6aSH64gFHqHwkdyjoegH
w69YAtSrqiTqe4EK7Uk+/UkAyM4AxtxLudXgSdQEY+wtBGomlbq1TkflJTp74o+0kTwZklQHuYR/
aIA+JA1PQRcIKpRlLFfRuj/ykug6mRUevsOsRxBySDMAjodR9MSCaaM9T7P2j7YAjgyIMAR4AQAg
BACAEAIAQBgf6gvp7bE+opslX7Tbw2oUd5t4qbltzuRa6en/AM2bd5OphTbF0tFU4ib9vqFdqK2i
WfIq2flVJQSpN+xfuY8+qG7iuZTOKmqM+bFya4x8qfSi5QOYnmDVXYMisdZUVWB7hW+iql4LuniS
3JIrbc4+lNLcqCuppIrrc4vz6V2aVBJCVnP1LTNK7m0u5pupW43cK6qSi96fBp71Jb00aPV9HwdZ
wbmmapbV3EuKjT/Gnwa4Nbmdn/F31A9ud9nLZh2ZMsbdbpVIRTMW6qqCrF8qq0tBS145dXyDSVVQ
pJKKGqIdJ+VtbplPyJ376M6x2xG5qejOWbocdrov21pfy4r44r9eK80jyn3t6S6r24p6jpDll6Mt
r2ftbS/lJfGlxlH2o7BiCkkKBBGhBEiPiDHSu86g37jSBIgBACAEAIAQAgBACAEAIAQBsdcbYZdq
H3G2KenbU8++84hphhpAmt155wpbabSOqlEARXbtzu3I2rUXK7J0UUm23ySW1sqtwndmrVqLldk6
JJNtvkktrZ1x8ifUi2p2oVWY3tq3T7sZu2h5pb9urQ3hFjqUlxoC4XtgrXd32XUzLFF3JI0LqZ6d
49meh2ua4o53cMngaa2moNVvzXhF7IJrjLb4HcvaPo3rGsqOZr0pYWA6NQp+2mvLdBPnLb4HVls5
sny09ULkijENu7Ncdx9yMhcQ7c7lUKXQ4XtziyXe38Zdq9SVW/FsWtTX3Gh/FqFiSEuOr19YaTpO
kdr6XDTdMtxs4VtbEt8nxlJ75SfFv8R6g0bRdP0TBt6ZpVqNrFgtyW98ZSfGT4t7T6NHpWelxtV6
Zuy7uLWKopsz3lzhFDcN3t1XKNLFRf7lTIUaaxWBtxJqbXh9lU6pNNTlXc6sl52a1STh5OTPJnV7
ILcjfQgoLxO02MYrEAIAQAgBACAEAQ3FSEvpP7vpgClrk5PuEwT0/WIAllH5pJPgTKR6T8CNfGAJ
Zw6T1E/A9QNevsgCj1b40l01/pOmkjEbQWlW1nmKKUlUk6aa+Phr7YbiSgVrwQ2RMlztUUk9BLQk
npOcCDgfDUgVOFqc7kBOOU6WShRCSszPYtIEiFlMu7wEUKnWqFS3GR1o/wAIzUDrNM9FBJAJH6vp
i4UlURLzW+oIUog6GXygS6+2UAciUBLtKypRnJIB/wBmYH6hAFRSZEeyAJpKQdSfq/pEARAJCWv0
wBrACAEAIAQAgBAGxSiDICZPtmB9YBnL2dYAx85J8V9guX229x2p5DbZ4/uNh9wQ4phm8UnbdbHX
KQUN3bG700lq6WC7U8wpD9O62qYkruTMG5buztS67bpIhxUlRngn9U/8vtvpw0r75vBxmp8m3043
Medd6tFEya7dPainbV5qm8it1tbQ/kNkop/w7pQtl1tABfbRIrjd42dC8ui7RT+pmNctU3bYnXrx
19Svcnaq30mKbm26o3YxKhLVLRXB64CkziyUjPlsmkbudQlbF7Yp20HtbrJPJUO3zgPljqXvT0U0
HuW9LUNJktP1OVXLpjW1N76ygqdLfOFObTOne7vSDRO4b0s7S5LB1GVXLpjW1N85QVOl+MaeKZ3B
ba8yeN26jNKMd3Rx+2XSpAH+XsuqEYre23u0FVOli8Kp6WtcEzL8M88FAE+Bjzbrvpb3xoEpPIwb
l7Gj/iWF82LVaJ0jWUfbHZxPP2s+mveWiSk7+HcvY8ft2f2kaVonSPvL2rZxMlaKso7mz+IttZR3
JiU/Ot9VT1zUvaXKVx1AH0xwTIxcnDn8vLt3LU+U4uL/AN5I4VkY2RiS6Mq3ctT5Ti4v60iYiwWR
ACAEAIAQAgBAG9KFrMkIUs+xKSo/UATBtLfvIqt3EsjMdydvdvaFy5ZznGKYnRtJKlO32/W23rMi
R2tU71QKmodJEghtClqOgBOkbrS+3Nf1q4rek4eTfk3T3LcmvbKnSva0bjTe39c1iat6ZiZF+TdP
dhJr2yoor2tHXju16p2zeKs1tv2qsV83Nvrfe1TXGrZdxjEEOguID6qqsbXea9hJSFAN0zZWDLuT
1Hc/bv8AD/r+bON7uO/aw8V7XCD+Zd8v1Iv2uj4Hbeg+hut5co3dfv28XH4wh+0ueVfgj9Lo+B1c
7kcn+TvLa/W3b5movV2N8rGqOy7UbVWa6JbvFY86Awwu0WxdxvuQPKWUgfiXXkiWgAj0J2v6d9p9
nL5umY6eXTbeuvrueyTSUV4RSO9+2+wu2e1/e0vHTy2tt2579x+TapFeEUjvp9P/APLC77btvY5u
LzYyD/kVtu8aW4K2nx95m47vX6hUA6ijvFY2H7JgrdQkBLiSqqrW0n7iFajkuRqlu2mrW2XPh+k5
tGy3tke1Di/w+43cNcEb2644bVY1trj6gyu6P2ulL1/yOrZQEC45NkVYp+8X2uVInvqHlhJJ7Qka
RpZZMsiVZtuRkKKithkxEEiAEAIAQAgDQqAgADMAwBr01MASLy+8dZAfUfCAJWAIK5J+Ev2wBTKh
Z6IOnv8AH9msAWldqgtzbQVTWDMz0HgQB7pRFaAtF58JJAVKWqiTIJAEyZ+Ok9fCI8idhRn3AqQ7
p6HUaznrPr4/tgQcPYyVk4OAoIU5ZqVQChoUoDqVpTIGYcSJf3oo+2ipbmZJWwBNOB0kf1SE/bqJ
RdKSof8AHbEhoFGch4yHXr4RAL6sr3cwWj1Se4fAynL6YkFagCaZJKTM9IAjQAgBACAEAIAQBDdK
gglJ7Tpr2951MpACepPTQ/CAMVd9t5uP68a3F2ozffjCsKyapxq42qvs1q3rxjbXc23OVtt/EUv8
pulRfLdc8TvFYl1lVNVrShDZWkmaZxXGLluVQecFncDK6VDaavdPlVi+Md/4K3M5F61nGChuC3+9
TS1VK2ccvFU1WOoTPy1VKgAZqUFTlX8p8iNpyntjUc492Lrf7Px73O5SZVi1tZpHay2p9Rjhbuzc
6akSpFKKlV4c2Uyq922hrH5p8tx3sWnSYnBwUdstg2nTZzD4c8Z8q3A3JxvPVU23nKCz31qhzKur
uYnHSpFvv9YlkoVmGF4dsJiNpafrPxTbq0pqKaoMydTOMy1lX7SSXvR5MolbUvM6ns59OjcnFDVq
te8vFHMWqd9xr+XWPkJijt8SkEdgqaS4UlroW3VdyUy8/wC8dJjWNlbzIyVZJxf0ll2Zp7DGdqyb
17MXsM43dMix26l1YDu3GXNXinecStKVFxeGXW5UTxKkpkXR8wlKLGVi6TrEHYzrVjJgt8bkYzp7
JJtGJn6VjZdmK1PHt3bEt3zIRknTl1JnM9q548v8FeaorhubeahdGttt2iz3GrTc6hYakksVLl6t
KK8FaRIkLS54gg6xwzO9J/T3UOqVzTbULk/tWnO20+a6ZJL6KeBwnN9Mexc1ylc0+1Cct7tuUGvF
dLSX0UMjMf8AVr3XoqVprJNrcAyOpQO1dZbLnfsaD4HRS6ZRyBtDih1KSEz1CQNI4Nl/w89rXrjn
iZmbYtvdF9FxL2tRb9r9pwzK9Ce2rtxzxcrLswf2fcml7Wk/pftOY7Z6vOKKabN72Oydl/TzU2bL
bNVMgyHcGl3CjoXFazl3JGkcZvfw43+p/d9Wh08Ouy6+3pmzj130BudT+Rqcejh1WXX20kcpUXqt
ccn6dDlbjm6VuqFJBXS/yG11/lkgEp/E093Q052nSYAEaG5/Dz3dGbVvLwJQ4OtxfV0mjuehHdEZ
NW8rClDnWa+rpJr/AP1V40f/AIRun8f8rUH/AOdRR/8A567x/wDlaf8A1p/8JT/+ie6//k4P9af/
AAmxfqrca0oUW7Luk4sAlLf+Wre33ECYT3qvBSmZ0nBfw9d4V25WBT+dP/hC9Ce6uOTgr2z/AOE4
Lzv1cmSh+n2w2eeDvcU091z2+I8ntHcPNVZsfHmuBZkQg1bZA0JnHK9J/h0sxanruoykqbYWIU28
uuddnD4Tk2meglmLU9Zz5SVNsbMOnby6512f0TGLIPVE5P3WncYt9w2+xVxw6VNlxFqoqGgZTQ1/
mO435pM+kygrE9CDrHO8T0N9Psa4rlyxkXqcLl6XS/NR6a/iOaYvo32Nj3FOdm/epwndk0/NR6an
BOQcoeVe4nmC47s7oXCmfHlGjsVTX2q3SX3Apap7DTUjTZWFS+UzMcy0/sTsvS0lhaZhwadau2pO
vnOrOW4PZfaWmpLD07Ei061dtSdfOVWWnb9jN2coBvNdbm6TzkpW7ds1ye1Wl9bajot5+/XNutOq
ui5HWOUxlbtx6IJKHJKi+hbDk8YKEemCUYrgqJfQjI3bHZ3jLgopch5G5Jd9wUMOl93Ado9z9v7I
iuaYIWaKsyMM5Zd6U1CQUq8ukZVr8jk5GLcrlx/3dPaq/UVqO2j/AA9p3B7L+tPx64yWH/LXBD06
th9hdwHqZi1Ue5G4d3yjdrK6ua0tuv19ZY7JbMqu9XWiZLabo0hS1CaCAExg3Ma5cXVeuSlT7NP0
l6qjstpOfg/0HaFtn6wnN3OcYbv9/uyLZfGm2vNx7A/TY5Ibi47Utpp/MRV0+SsbrW6pNXWma/J8
tCEeXoqR0xJWsXi17WXIybW1bTkyyep96lmQXhNNZdv7Vc7XRt0lwcfV6fnJbHbhVsPhSqa3XCny
vfCzMULtb2lDi2FuKbVLsBmSLLjjv3bW2XgVEuz6p3q1t19a1UcUNsXrS0XE2m5Ve1e5NnrMgfRV
raRRUNod3jqn0VTjKQopCnFpTr2mI+V4Mg5ywDn56q+7eUWDDaDjVtBs5XX+6UNnayPcLaXkLkeM
29ysadT/ADW91+OX6mpbDaGaxKEuuPuqCEuJPdrGNcrGfSiUdy3Huj5SUlivw5RZDsXkuSLvbK8Y
qdiMezbHLJT46bdTpfYvlLnF8v1c/dxdUuKQ4y8hksKE0giUUpyrzJMigekwQZfpqNIuEGsAQ1K8
B9JgCHAG7zO0a+6Q69OsAQluTBOvT9Ph0gCVUqft+r+mAISlBOpgCSccJBn4/X+ggCkVTvlpJKj0
OktBKU/qgDj29Ord+Zp5TaErm4rsmFokoK+Y/cmSDPrMfGI2gtd9xC0KRqpKhJUzIyn0mCOvxlKG
9AkH6hLTZWuYPadNJz98j0ERUHGuNj/ruANLIStnHlPkfL9xAUCD7B5iwdOpin7SKuDMibeqSEgf
2PdodT7Z6zi4UlRBH4poy6tqn7ZTHbp00JiOILotbym1dyZaSSoe1Opl9IiQXY2tLiQpJmD+o+IP
vEATaPll+v3wBMQAgBACAEAIARD3A4x3nwnJtx9rc3wTDdx8k2hynKrBW2eybnYfR26vybCK6rb7
G7/ZaS7IcoH66kE+wOCU1TBBkRcttRdZKqB0qX30XN6cxvZy3J/VC5MVuWvWpq2VuRja3Zamv1zb
YUgMC8XFVoq6u7NssMoaCah11fYhIC+0ARkfeVDYoqnn+gFIe9ErfRFUpyzerJypsrLyUt1aKHbn
aFmrcSoAvobrqW30a6fzRPtPYrt98offfBfh7AXDdfSm3fwDHrvdrZzG303PqqemoGU4/bLRmtry
S+0tM9Tt09K27QcmMCxh51b4VV1Sl/hUuL8xSewlCIpWSnwB1q5V6IW/WY7h5LnmP1XKTaity1dH
ccie2/3T2rx2myC8UlO7SIul5o8j3cz3IK+8rabQpT1TdahIMgiUX3kwpsRDXVsKtVeiXv1Z6Vx5
7fn1KblUveUKgWDdDYW4VXeUo8wg3DcK1+egHx88aDoYp+9+H1Ip+T4/WUej9IDefDb5Z8vxnfH1
VbDmdmq27hS3apxXjfuXRuN2xxFdS0Vbal782ujuLLlQwAGKjvZUTIpUDrEMmMJuaiqy38K+dBOM
pJQlJuMd3GnkcQb81nKLJqK74Bm2f8pNxali61dtyKu3l9LjYWnSyineFKtleSY3fcoXWll4TDrS
1ICfuqOkZsflL30kn4Sf4i3KtHV/Sjrcv3pt7YZDUO3W95vunYK2qUXKlm3cV7VilCy8s/xC3T25
5LDKQs+ATp4RfWRJKiSp5lvoLOrvSSwu40LtTh++1e26lfap3PcMyWxUDCeqlkY5i2TVSykf1e1H
xipZT4x+gdCe5lFt3pCYtUuSvXOfZXHANFtU+1nInKX0LAPclf8AL9r6BvqPAnWH3t8IP6V+cdHi
XTTej3sa2krvXqTbcUDaZdyqbjDyRqBr76jF6VI+kxH3ufC2/pQ+WuLKi36SvDdI/wCueqrhbCkE
JeI4wbzttNk+1dSy0U/SBEfer3+U/pQ6I/rfUY4Zjxn9Mnb2pu1GfUUy/cS52KrqKOpYw7i1lBpK
x+kWUOm3v3/J7Q1UsFST2lUu6XSLiu5Ev8NJeYcYricMWrOthcb3VtFp2u3R3LdwmnbpJ7j3LB9p
9vrjRVpT3uKax7La27sijpkjtDrlQXFOf1AnWKLk7yWy25PzCS31Rn5b73ac2tFTdsh5Y8pKvCWX
WG3FYbmPFwJDJKGayocp6i74xbkllTiShKHVFQMpicYkb2RXbYS9pX0x3uRzZbuFXFfdGz67k8yM
2qnKZi5LXmHJngRg1LdLfVvEtOox+9bgXqvoHEhHaGn1d63B3AAFM4nl5EPhhFexk/Ltve6m+l9J
3jtcX0/ySzcmeyobdqaPzeR/p83GldYbU2ZPVjOcIVRPBCpgKYWFEgRYlnZq+GEX7GVdEeb+k7Ou
JvG3ifxqxWttWWcHs/5J1Nchtpxvejd3gFljNkcSovv1eJUliyrH61tx5aW0LNRWPrKdEBHaRGPP
IzJy6+ikuaRetqMEnB0fPicKWzBNm8QrL/fdzeOO0WJMu3CufYsds4ybb0VNTMvPOv29VDdMH9QK
yVlzfYY7WHFCnQkEEgJnKJ6HLb0Pq8iuUo0dWqkWmuHFyqqaumxbhBxu3NXUFuo/mVRsflVtuzrt
PJttD7NTzBvtRWONrbCh5Lrg9k5ziqNuUXVRa9hRCSTrVGXO3dl2IyXHL5d6z06di7XZbKplF2rq
fgVvpkltp3aXzKioZTc8Ty7MahmrCUI7HGG3VEKme5JiJSkt72+wudXivq/MXU5Z+FlruVut142I
4MYTU5IzR0dtZzba7mdx2r313J1nybaL3ftrVW24PectltaE1LXlrSSflAlYlepKm/2L8xbltdTs
12i9OTapilyGo3G2c28wGruK7evH3ePu93IdE6AU6/NTeK683rHx+IZcWlTCqRgMlJPcD4w7qeym
/wAERQve/enRhi0Uze2/I7mtso004t6tptueTOc1TF0nT+QKepZ3EOdMMhtSUqQWPJAMzEAzD2c2
8rNqNvrDglfuFuLupUWJmobVnu697pchzy/ipqnqtDl+u1FbLPTVL1KH/JR20zfa22AZ9YA5KKgk
TJlAEJTw6Jn4zOns8NdYAhFyftPx/X8IA2rWOk/pgCXW8lJkZmUug+X4A9J+6AJJyon9Pt+Pj7oA
knHxrKZPif3QBbdwqFKHb3dqVAgjxOo8OkogFl16HFNrDrhWlKioAGQmNAFhISFEA+MAWw6pKE6z
PiACZ6eH92IBa10qApXcuo7WWwtakSl3Lke1M+vanoEiczFJNS3rIG263DvNRN+msLTaJAAr84kK
UVH/AIaO4THwh9peRPAyBt6pdoOk0Jlr49p6+PjFwpKohc6ltM5EJUB8s+4GREle6R0iOILlt4IU
qenu8fED64kFw06igzQZe0HXofZ0gCqIqUH7wKT9YgCbbcSdO4e7UfprAEXuSPH9v2QBp3J9sAbo
AQAgBACAEU0rvQMK+VOy+abgVeP5RheacjVV1npf5G7tdszvta9jMYviK+rTULyfK7+9aKm8ly1t
Dyx+EqAtaD2hpRBm6UDFS8cV+StqrHbZg9HuDfLK7T0jhv8AnnqP8kKS7h6spWHbrTN0ljw+4+Qm
hrS40ytp5AcQAqSZyFxK2tm2g2lsXvhPykftoNG9Ym6imadV51058c7Lg+pCEKX5lQLVaKVVU4fB
DaSpRlJJ6RfjOzxTJTpuOsK0cgah+8Jx+z8i7taGhUuC6Pub8eq7UKtr1qdeYX+F/FbNfh3qNVW0
tBPmqQAmfcRrFzqx+UvoHUzJ3B9yOIN0p7xXclef+4mPXusdZZstv275b8ybTQNseSo1a7hSZzj+
K3hmpS8plaB2ra7fvAAidicrfXWKdPIqUlTada/Iiy7a0GbZhfdgOeuLZ/tdTUjNVjNpz/1AudVv
3NqENUaX7o1cKLCqF20rU5cVOoYDKirsSklUyRGXayYVSaSf80tuFqWy5Vxe9VMFsQ3esFFmtPTb
j0FduNiVWhNTcqG1c9eeCl+Q4opC7Xf73jdwoGq4qMgzUarl9Iyp3bVPclFS/mosfLkrmxv5XBcv
acmXbI/TwyS7+U1g/LzG6l91bbdAOb29FBQJdBBW1S1+X7SPh1IOoUX1AjxiIXLklslB/wBFfnJc
PB/SVi0bc8Csor3LVZdp+WmZXpEvMt9r503+9XUzQFpSqkp9vPxE1NnuE0iadYnru8ZQp/N/SU9K
5P6SlbgbTcANuwE7ncG+aFrZKE1CHcr5PZBSsPtKmRVNqvGH29pxpSZ/P0lExnfkvduQ+gNRW9P6
TGLKM/8ASbetz9owLhBvDfr7XIfo2rkrl5gjNTaVrSpgVlGi+Wiqp6+5MOqm206wtoqHzAgSi4nk
R2zuRUfIJQruZzjxs9NOx73X+htOCcJN+rvbH6Rm9XatHMzizcbpabPUJDtI9cWabA69yxmuMkD8
U02pLiu1MjMRh3Mq4m27ia5IvRjBv4dh2fWT0TmbY47UJ4P7+NLbqxU0w/8AGtxsWnykAFumLQ2i
7ZJIBnLr1nFi7mXnstvZ5lbUKbEjk28+mRurecfqMdu/ELkzcbNX0abfX2BHOzjZ/IX6alU09Rr/
AJadlmGGnUPtJ+VpKRJA1MzFEMm70vre2nMt0lXcqFybP+mNuTgO4v8AnG4cAsJ3Fx5OM1FH/wAv
t/uQ3H/LcffvF3cplVF4VT4tx1aq6S5WtLSksFupSzImaFKIKaJX5tbJS+kq6VyRmhS8Q7K6wqmy
P0Z+HS0ONLK1Y/uJtOW1rUtoJpk/zDa61vBxSColc+09o9sotSyMmL9xt+0npjyRxDnXDzZG3Ir6
2/8AoOYzfbRbShpt/abcfY+uyStS4sNedQWKmyHB6ipLR1UpVQHAkTE4fe8tc/p/QVJRp+gyP4eY
Dxyp743tVi3pV7kceLG21dLxcMv3k212zuWL0dekB1mgRklZm+a3+5VF0UO1hNKhynbV94oGsQ7t
972/pGzw+g7VLRt/gViSlNjwjD7KlAklFoxuy29KB/ZSKOiZAHwilSuN+89hGwuRFFTMJKaWnYpg
oKBSyy202e8AKUpLaUdxkPbEg2qplPJWl6TjapAtOSW0vr3dyFBYUhU5gK7u0jSIcUwToEvj4n3x
HTFA0K0jx+r9JRUCWW8T0Eh0/p+iAJdZOhmepHt+2AIZM/YPgJQBLuuhAnOROnceg+rWWsAUp6vK
SNTLr9Hu9sAS66wHx9hkSZ6wBLuVYAlPxnIe/wCHw90AUt+qKtATLw8Pp09kAUV5SipWpmTr1mRp
KfuEQgW3d3w00skiatBPSfjM+OktYAsCprlKJS2FrWRIJBkTrqo6/I2mfzHoBFNdtSSnttKbIW72
OPKXMrMlBJ6ITThYIbbSPcCTqesQClUNGk3bC1K7lKTaEoSruIEikoKpAgzT2THQdYfaTHB8jnSn
JBbUP6oBl7ZS0+sRcIKwwoF9hWslOrl7wpAGvtAiCS5WFdqidfCcSQV5pYEvfrL4j7RAE3AEwDOR
EATCHvBf1j9sATE56jUQBuCyPf8AGAIoUD0gDWAEAIAQBDLYKiolR/1eoBAAmJzkrTwlAECtpGa6
lqaN/v8AIqqZ+lf8tx1lws1DSmXfLfZW280vy1mS0qCknUEGAOvk+l9xcV+JLtdyHe/FKUpXmcqu
RMmipbix+GQ3uShFOElwyCABIAf1RKqN12X1raCFTelVwkpnfPVt3nNQ8VlxbtVv3v8APLdJmFec
te5pU6FhXzAntUrWWsT9+ucF9RNDfX+lLwDulTS1l24/0d1qKNt5qmeumf7p3FxtupCA+gLrM6fP
a75aZ+OnXWKHnXK/D9QoSzPpKenO0pKkcW8KKgQZrvWdOzke5SSXMrWVtqJ1SolJ8QYj75cl7tNj
8vzChcLXpa+nsy0hlvidtKhCAEgptFcHVJSZpDj5uJfdIVrNSjOK+uRBrbfS29Pm0rdcouKW1gW8
4484aqgudwm44e5a0i4XSqSgk9O0CQ0EhEq5OO5gvIenpwbCm3P/AAnbBKfa8vy6tW2WNLrwGm/K
R3V66NVYvsQSBNZl8Yn513mwcns8XuOjFMikGx201RStILbVPcMBxy6sNslRPkoZuVDVoS12mXaJ
D2ARLvXGqVf4eQJaq4n8Xq9pDFdxx2Gq2GgEtNP7P7eqS2lP3EoBx0dqEDQASEWuqbfvPYNhdWB7
E7L7V1FZV7XbTbabb1lyZbprlW4JgmL4nWXCmadD7dNWVVitdC9U0wdHd5bhUmeoAOsAcqJbCEpS
CqSekzMiZnKapkge8mIqlsqDXsB1KiT4EhMx9SRE9XCoNOzWfcf19TLu6EDWX0QBtUjuOqiQJy+Q
kg+0EzEpe6ANS3pIEDxSQACjUH5RLSZ6+2AIRZ+ZJ71fKpKtUg6pInIuEgd40PUy6EQBMAp9yddJ
yGvugB3J9v7fsgDQuIAJJ0EASqqgGcgT8dBAEDzFE/NqPYPCABWD7fH9fj8YA2LcABJ6eA+qAKY5
WIHQkn2+A+r3wBTH3ypJUtZCR4TI+n2eEAUV2pSSFhXUGUiJEeABmQZxAIJqO9Mwr5gdSQPdqAT4
SgCEXB/WUT46nx/fEgknXwFBJUEzMk69dJyT09onEbSSmv1DTKFOLXKQ1nP2T+iQgyDiy8XN65VB
DRWy02pX8VR+Xs7iD2o1811xIPYDonRR0EQ3XyJJFBSZ9qAJ9gM/mWUifaVrMifm8NBPWIBFICED
oO2XXxPsmfE+ENgLZx66W6+M4Re7RXUtytj9spzQVtIvzWKth1NQlTzS5AlDb6CkiQM0mI+0vIng
c4sOj+Hr1A00lLr7vD64rqUlZad7Pw81aedp4yPbOfhOG7aC52XApKFjooD9ftiQV1pWiRP2S+Ps
HvgCpIUCJfof9EARkKlofo93+mAIsAagkdCR8CRAGnnq/tK/VAGw1Dide49fq1+iAIqLgofeT3fD
T65kwBF/mLQ6zB9nar7ROAIrday5/WAP1fbAEUOf6wM/h+yUAa+Z70j6v2zgCEp8DSZPwA/ogCEa
hR1mR9Al9sAbEvLB+8ZfADr8IA3ed/aHd8SZ/sBlE1ADmo+QHX+qlUz4/wBo9IVBE81Q18pY8NEk
zP0gkfREA185XQhQMpyIKZ/SQAYA0NQAZHzAdNCJHWeup6QBoalXUJEgfm/iM6DTUyUflP1wANSS
rt+WR8e4dkj4hXbIkeycAPOVPqwAT95TwVpP2BJI0gDd5wH31oPvQFqAHu7WzKfsilxi9rBqlaVm
YcUAPGShOfuUkEyMFGNQbwTLqZH26/bMiKgCrtEyr4Aql7pzJgDZ5iT4qJ6693Z1MpkK6THhAAuS
nKUtJEFQ9vUHXSANBM9ST46zPgQepgDRTrbehV8ANTAEqXS4T4AdBP7ffAGnTrAEJTyETmf0984A
prtw7ZdkyT49JdPhOAJJytKknvUr+j6JEygCnKrG/wDW9kuoJ98tZaQBTK2pWtPaklI69fDpqJHw
iNgKctXyp1nrOcwZe7x8YeAIRf8ALEydJyEz9Xs1HtgCUVXDQFXdroBORP0n2CD3Akn69I1PaEgz
11P/ANLWYEAWVdLt5s0JUsJKikE6KXPTRJI0JGntlPpEN7CS2+pmVd6tdf7PdKaEynOUtT/W+EUj
h4kdtASSqZJ+Udfl0J1AOgnP4w8QbHFgJXofl6H3AEg9B8wOsonzBwjtEt207dbcMuVFNWGjtSWF
KoH/AMSwp1VxrnQ02+WmFvuUqakIcUUBRUlRI6xQ371SVuoZJ26+0z7jDRWtDi1SShYUk96RMpT0
7pp8PZFdakU+gupVU3/1X559zxRMGfaryypHfI/IVBMxOU5Qf1Aui1Vfc0ylahNIJUZkiXcQDMDr
EpkF10z6Tp3dBMeJkZxUCoJdl0Mvs9ukoAm0ug9f6f3QBHSs+BmOkjAEQLHwn9IgCCpQBPsmYAlX
HQJ69Cf1ewGAIP4gdPE9Jft6wBs8xJJBmPAk+M/YQZzgApxABPcP6fpl7IAlvxJE+11XxCjIDwGk
Aa/j3mTo8sk6yn3Dp7DMCAN/83dT94IJM9ZS6ddJwBoi9OalTbZEwJBRSff7QYAmEXumUZFDg1lp
2qHh16eJgCKLvTlUihwD+1IEfVOcATYrqVQ/xUAS1Cgf1hQgCEq50SJDzky1MkIMgBqTokAQBqLr
QKE/xLQEgr5hKQUZDqmWphUG1y60LQE3wqc5BAKukp9BKIqgSir7blD/AByJE9UqnoB7oVQIKsgt
yNQtbhJkAlB1J+MusGwS5yainJTbwJ6fcPu11EFSgNRktMpJ8tpapSkFlKZH2adxnEVqwRG8gQr7
7IT1OjkvtTDcSRFZAP8Aht+2fcsnUeGnboYmpBA/nz85LQ0Seku76pd3X2wBtGQulXbJtA/1R3dd
J/MYVBUWq9agSHu8aHSR6/RAEwapSgO51Wg11kB9USAh1M/vAylPXWUtP1RAN/4ltE9Z/V4fEiAJ
CouSWwZHoTpMDx9+mkKoFIVcEuGfcVewTkNJE+PhAEkquQFSWrt6pmdQfpnISgCE7VtqHalfXQe4
T1PgQCekKgki94kjxJlKUvb8NIApr9cwAVrdSlImNVJ6jqCZ6mFaApzl1pkgdrqToTqROQnMynpE
VQKO9d2XTq+JS7gBLQGWsukK7SaFGdvlGyAk1U+3x7/McJJ1KjpqZn3CIqKFv1ORtuhSkOSR3FKS
ozJEyO6UxKZHjpKIclTwFC2Hr3RuP+UqoQZk/OXACtYI7mkdpn2jx9vSFagnGbixJR70pAKk/eSQ
AkkTJGg01gTRkyi5U6wtIfTMJABHbJOhI8ZHSFUEinXLIrdQ0lQ+/UUyEMsqdedW62hppDSFqcUt
SiAChA1ily+kJHPlT/h03/v1f+/Fwgu3/wC+U395X+4Iniwt5I2//vO6/wDaqX7FRJBedJ9wfA/s
iECpo6D+6f8AdMSCYgDcn/pJ/bAEaAEAIAgHqfiftgDYr+r/AHhEPcDUdPpP2mJBtX0Hx/fEcQQU
9B8BBA1iQaHp9I+0QBsX/hn+6P2QAb+7+nsEQ9xL3kSJIEAajor4ftEQ9wNivu/V9oiQtxLjoPgP
sihgk/6v+0fsisPeajqPij7IL84Nh6wD3kVrqfiIh8QTKv8Aoq/ZDiDeOo+IhzAPU/EwW4ENHQfD
9pilE8Cbpvun6PsiVvII56H4H7IqBsH+Kr+6IgG8/tH2iAJJ3w+j7Yn8xPA0HUfERD3EEq/4f3j9
iYP8xPAhHx+A/wCjAPeRB/xP7oiFuRBR6n/Ac/2/91UVE8CRPUf+b/6KYp4kvj5EJ3+r+niIj8w/
MUl77i/j+2D3FPAlk9F/H/7UxD/IEU1z/GR8Vf7xip7wiqf8Jz++v9sRxKvzG1n/AA1f3R/uqiAi
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="29d2839c-6a81-4751-9636-7da04b5b0c68" name="receive - update_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3952074f-a0e0-498a-851c-244cd30a7e38" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="86bac688-8cee-41fc-b9c0-1179e9210dc3" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
QdDH0l07JnqOi4+beS+ZfxYTlTdWUFJ09rPoRpWVczdOxs25/e3bNubpzlFN/Wz66caQ3ggBACAE
AIAQBKr+6fo+2AJRxQ+r9soApNWsqASk9ZzI8OnsgC36tCQkAGc+stJ9NNSYApDyAELPcZdpJ9h0
J9vsEAY27SEGz4WpEkk2lSVgGaiE+aEKUJzToBL4RbWySJ4GRC1BSTqoEDX6JdPjFwglGpfim0zP
chtY6CUlrKp+06iI4g5etPd/L6bunMNgaz6Dp190SCswAgBACAEAIAQB5gvzVm7ruG8FNstq6V9T
VRvHvnZk1iEOdpfsuAWe4ZDVtLQNXGjc6miUR0mkRstMhW85co/jLN5+7Q85XpI4kKHbHdXOHETd
yPN7djtM72gdtLjNnRV1TPdMlU6m9tqkZS98482/xF6g56rpulLdbx53X5zl0rZ5RZ5c9fM7r1HT
9MW63ZndfnOSitnlFnbTHnA6AEAIAQAgBAEvV0lJcKSqoK+lpq6grqd6kraKsYbqaSspKhtTVRTV
VO8lbT7DzSilSVAggxdsX72NehkY85W8iElKMouji1uaa3MuWb17GvRyMeUoX4STjKLo01uaZ0p8
pvTJrGHLpnPHFsVlG4qorbjtRWPJTV03eUqW3hNfUKS1VUwmspoalYcSPlaWr5UR6o7B9dMfJVvS
u8qWslUjHJS9yX/mr7Mt3vL3XvdD0t2R6zY+SoaZ3ZS1kJJRyF8Ev/MS+F7veXuve6GIW0HNDkfx
lqDg1c5U3qx2ZZp3Nuty6K4JfsobHYae1Vb/AOHv1jaTp2tpU5TCUw0Y7H7l9NezO+IfvGcFDLuK
qyMeSTl4ypWE/aq+Jz/uH0+7S7yh9/nBQyZrZfsNJy8XSsJ+1V8TtM2e9TzYzPlsWvcKium0V9ck
j8Rdl/zvEHnOwqPZfqBlNTQpUoST+JpkJn1UI6B7l9Be5tKi8jQrkNQxl9lfs7y/ot9MvZL2HR/c
Pon3Dpqd/RbkM7HX2fgur+i30y9jXkZ8Yzn+CZpTt1eIZriWUU7yEuNO2DI7RdUuIXLtUgUVW8oz
KgOnXSOoM/t/XdKk46lh5VhxdH12pxVfNqn1nVedoWtaY3HUMTJs9Lo+u3JKvnSn1l5Fl1JkppwE
dQUKB+oiNP1R5o1HVHmjQNOkyDbhPsCFE/ZDrjzQ6480U653O2WVh2pvNzttop2Ulbz90r6S3tNJ
AmVLXVvMpSABGXjYWbmXFaw7N27ce5QhKTfsSZlY+HmZc1axLN27ce5RhKTfsSZglv56h+yG0VBW
UGHXSi3ZzlJWxTWbGa5L2PUFQkhKnb5krIcogywTMs0qnnlkds06kdudoeivc+v3oX9YhLT9K3tz
X7WS30hDeq85UpyO0u1fSHuHW7sb2rRlg6Zsbc1+0kt9Iw4V5ypTkdOFVXcoee+4qGUJuOWPUbx8
mkYS9atuNv6R4AFxxR8y32kKaHzLWpytqSNO8mUel7dnsb0p0Tq/Z4uO1tbpK/fa/wB64/BbF4Ho
aFrs30z0dy/Z4uO1tb969ea/3pvwWxeB308WeLeHcYsKVaLWpi+ZvfW6Z7N81Ux5b92q2QVN2y1p
cm7QY5bnFq8hmfc4qbrk1kBPkX1C9QdQ771JXJ9VrR7LfybNd1dnXOmx3JLe/srYjy13331nd6ag
pyUrWk2m/lWq7uHXOmxza+hbEZQR14cEEAIAQAgBAERr/Fb/APOI/wB4RTP4H5Mpn8D8meWprXnn
bOv/APbWwe4y/wCa9v1+qPpH29/2xg/9Da/9NH0E7e//AAWD/wBJZ/sRPrtRrTkwgBACAEAIA2qM
h7z0gCUeVJPxP7IAkV9Br9HtgCm1JGgAlqf1S+qAKS+2FCXun4fX4DwgCnrpR2K8UyMwektZiQ06
GAMWNn3UC14a2ZhbllSuSj/WLaye3x7eyWnti2vjJW4yCdWO7yx3dwAV0UEdqiU/fl2dw9k5+6UV
sggtrlVs6GZac16TCXO7t8ZmRPgJThxJOabeR+Fal0CES93yJMokgqSDMS9kAb4AQAgBACAEAeJf
83Ve605Hwnxvzl/y5Ns3bv34fuPlmu87FrcHin7pWGDIHrrG40pbJvjsMe/w5GF3psW9ih4l4Y8y
hKV3XI83udSUgDvqP8w1Nt71kAdy/wANbW0zMzJIHhHjr11uSn6g3Yybahi2EvBdLl+Nnjb1ouSn
3zci3shjWUvob/GzPCOnTqgQAgBACAEAIAQBxfuXsntLvFRij3M2/wAay7y0FunrrjQJbvNGCnsB
ob5RqprtSKQjRJQ8O3wlHJNB7v7m7Yn1aHmXrEOME+q2/OEqx+o5BondXcXbsq6Nl3rMOME+qD84
SrH6jrI3b9JywXBx+5bJbgP46sgqTiudNvXe3d00ybosjoUIuTCCJyFQy+R4uGO9u3f4hrkIqx3T
h9b/AM3Hon7bUnT+rL2HdOg+u8oxVnuXE6n/AJtii+m3J0/qyp4GEGT+nly2wNblzt+FU+QKpV/L
cNvMqoq24BJV8rlOwXbPeVE9oJS02pQMtNJx2rgesHp5qtLLzVabVem/blBeTbThX2nZeF6q9ial
S08xW21Wl6EoLyq0419pbTdTzysCf5Y2vk/bUUxLX4U0ufHyyj5ZAu0ziiABoZkEeMbZ2vTXK/bO
Oizcttf+X2128zZu16f5P7Zx0ibltr+w212kQ3bnvcUmkNTyhq0vjsLCaPPSXJ/1QG6RKyT7jEfd
fTS37/Rosacf+X/OPu3p9D3ujSFTj+w/OT1u4T8zdxnm13bb7MFIdUKg1u4mU01G204tQ/iO09+v
L9zbd/iEmVOVAT+EYeT6nenOkQfRn4uzZ02I9T8qW40ps50MTI9ROwdKg+nOxtmzpsx6n5UtxpTZ
zoZhbQek5eF1VLct8s8t1JQNrbW9iO36nqytqUpKFKp6nJ6+mp6ekacTNBLFOtwdQRoY607j/iE0
+1blY7Wxbl2/tSu3/cgvFQTcpc9rXJnXncHrrgWoSs9t407t7hcve7BeKgm5PntpyZ3CYBt3hO1u
MUOHbf43bMXx23pT5VBbWAg1D6W0NLrrhVLK6q5XB5KB5j761uKPUx5q1vXtX7jz5alrV+d/Klxb
2RW/phHdGK5JHnrWNb1TX82Wfq96d7Jlxe6K5RjuivBF5xpzViAEAIAQAgBAERr/ABW//OI/3hFM
/gfkymfwPyZ5aGVd3PG2KSZz5aWAggzn/wDNe39CPGPpH29/2zg/9Da/9NH0F7eX/wBiwV/9LZ/s
RPruRrTkogBACAEAIAgrMz8NP3wBLP8ARPxP2QBJOeH0/sgCQdGomNfb16yPWAJJTRUSfj9PWXwg
CXdTJJSEk+3w6SmNNQAIAw42qeUtrAkiaSqwhLk0p/qsuLA9oBH1xb+2TwMlFgS1n9HT2if0xcIJ
NhJXcqZszIWntSfCRcHd7zOesU8Qc0UZCB5XhJIT/siXwGkVAqbfj9EARIAQAgBACAEAeH783SB/
zF4Unx/yhu2PHp/NsWPwjc6V8M/NGPf3oxV9OUS4i7ce+5Zwf/1nev2CPGvrl/8A0PI/6ex/YPGf
rN/33f8A+ns/2TOKOoTqsQAgBACAEAIAQAgBACANwWoaBSgPcT++I6Y8kU9MeSHes9VKP+0f3w6Y
8kOmPJG2JKhACAEAIAQAgBACAEAU29Xmmxyy3nIqxaG6SwWi53upWv7iWbVRP1y+7UaEMS+mMzT8
O5qOfY0+0q3L96FtLn1yUfymVg4k8/Os4NtVnevQglz6pJflPOL6dW3lZyd9SDjHi9Uh+oGdciLD
mN9LaAl1FotN9fzq8urSj5W0s0FsX3S0Eo+kvyYYGnxxrWy3atRgvKMVFfiPoXi40Ma1bxLapbtw
jBeUUl+Q+srHHTZiAEAIAQAgCXgCE4Rp7p/Z+6AJNwiZn11A+yAJBRGpPT4fVAEEJmCZ9IAl1JEp
TMz7tIAwN22p65VXtc/TVtVTBi1Pi4U7a0Ko62ndpnA3+JZUkqUplUijsUkpmTr0i1ulQq4GWK/P
E/lbdTKXyqU2oz6iSypJ+uLjr7Ck229Z/m9EFIWj55hKkiZJXrJQJBEpRHHbvBy0CQQR1BmIqBV0
K0Ch4gf0iAJiAEAIAQAgBAHh+/N0/wD7i8KdB/8ACG7evj/3ti2nSUbnSvhn5ox7+9GKvpymfEXb
j/3lnA+rMr1HjX1y/wD6Hkf9PY/sHjL1l/77v/8AT2f7JnFHUJ1YIAQAgBACAEAIAQAgBACAEAIA
QAgBACAEAIAQAgBAGAPqO7zt7X8fblitC8lOTbuuP4ZQNpdCH6bHi0l/K7kEJcQ6UG3kUiVASDlV
OfyyPc/of2w9b7tWq3l/yOnJXHs2O69luO6mzbP+iqHbfo3269Y7oWp3V/yeAvmbtjuPZbXLZtl7
Ecq/lYeJd73C5TbgctLva+3A9icTr8Lxu41LCi1X7k53Shioat61AIU7YsVDynVJn2GrQky7hHsT
U7qjaVpfFJ/UexLMay6j35RozJEAIAQAgDRX3TAEuVBMAQCZTJgCTdMpE+/9kASCwTID6fZ9MAOi
TL9usx16QBLGUjqeuvjLw6dZawBg/tu2427tuQQE/wAhdK0gLUVA0zyUagdoACZa9JiXjFpfGirg
ZQkEpBHUCfx0+IPX3xdKSNaWvNvNvUon+Gl8y8CQe7UTkCDLpEA5NiQVGnJ7O09Uy+o9PqlAE6gz
Hw0/dAG6AEAIAQAgDx0fm3dorxcdv+JO+dEw69Z8VyzOduL+6hCi3Qu5ZbbderG46ofKkVb9iqEC
fimNtpc11ThxaTLF9bEzqf8ASyz2jyPj7dsJ70i67c5pc2XmO75lWjKQL3balKSAe38aatCiJpBC
fEx5T/iB0i7id12NX34+ZipV5TtNxa9sXFnkr1z0u5i9y2NV2/IysZRrynabTX9VpnZdHQx0mIAQ
AgBACAEAIAQAgBACAEAIAQAgBACAEAIAQAgDclJUoJSCpSiEpSNSSTIAD2kwboqkbtp5nufu8T+9
/IuvseO+ZdbHt89/y3xOmoCuo/m94Nehu81NEhKih5265AvyGikDuQ0jrOce7/SPtf8A0x2dZ+eq
Z+ZS/drvXUvcj/RhT2t7Ez2r6Xdtvt3tS0rqpnZVL1yu9OS9yP8ARjT21ezafR69IriA7wk4F7I7
O3qgpqLP66zL3A3RLDaUuOZ7m5ReLpS1DnalbzlkpXKe3gq6ClkI5Tl3fnX3NfDuXkjtGEemNOJ2
XRjFYgBACAEAQnF9oIHXp7tRAEoZnx19vWANqiAkzgCnuqJ+k/ZAEv8AemOkup9vugAr7p+j7RAE
qpRGhHX9Os/rgDCPb5ZaVt2nvJ82wrT3mQGlO8QlQB6mRlFtfGidtDJ5J7kgj2e2LhBOWNJRdqMm
c1IqABP2p6kfprEcQclpTLU9fD3f0xIJlkgKkfEafGAJ5vx+j9sARIAQAgBACAOsH1kuODvKL04u
TG3Vstjd0yqz4U7uRhLJZ82oTlG3D7eV0iKMgFbdTW0dufpgU6lL5HQxk4lz5eRGT3Vo/aUXF1Ra
Pnk+mDuxTYJv3V4bdapNHad2bAbAwKhXlITldpfNysDSgpMkPVqDU0wmQS6ttPjHX/rj29c1rs77
9jR6srAuq7sVW7bXTcS8lSWzkdNesmhXNX7U++Y8erJwriubFV/Lapcp5KktnI9FnTQ9Y8Tnj80g
BACAEAIAQAgBACAEAIAQAgBACAEAIAQAgBACAMaeXO9NPsRsRmmYIqgxkVxoXcVwppK0oqH8ovrD
tLSPMBUyU2mmLtY4oA9qWfAkR2B6ZdrT7s7uxsOcerAsyV69sqvlwdel/wA+VI041Zzn067bl3N3
TYxZxrhWZK7d5dEHVJ/zpUjTjtMAfQK4VucxufeGXPJaF647ZcexS70bg1NQ2X6a5Xa2XFAwqwVb
rgUhx+95MBUOgzUpmlcJ6zj3lnXvlWHSilLYl4foR7ktR6pckj6bsccMsQAgBACAEASz/Ufr+P8A
ogCBAEB1UxIe3X+iAKc4oqMh9HuHifbrAGgAAkIA2OGSf01lrAEk8sAe7X95MxAGEmHMqQ7t62lK
nB/Jg4CDogNMKUsgmZMkTA1kSTFqnvomuwygpfnbSqRkAD4T0AGususXSCt2NAVdWyTPtZdUkEaD
uKU6dCNBIj2RAOQYkGoMiD7DAFVQJD4/oIA3QAgBACAEAQ3mWall2nqGm32H23GX2XkJcaeZdSUO
NOtrBQttxCiFAgggyMAfNM9cj0wsp9PzkrW7r7cWyub4270ZZX5Tttf7Wl5Le3WZ1FSbzc9vq+pZ
SBb36GtUuqtLhKQ9SfIJraVPf4t6GVZdm6k300kntUk1R7OTWxmFetRacJpO3JNNPamnsafsMgOD
fLel5FYUcby2ro6bd7DqVtq+UoWllWWWdpKW6fLrdTqIJdV9yvaR3eU+PMACHAE+M/Vn05n2hqP7
00uEn27kSqtn9zNvbbf8l74Pl7vA8d+p/YE+1s/95abCT0G/Kq/8Gb3wf8l74P8Ao8DO6OnTqgQA
gBACAEAIAQAgBACAEAIAQAgBACAEAIAQBrAHnd9Tve17PN6Wts7dVFWLbQUpoqhplzvZrc1u1OxV
32qWlBKVuWulUzQpB+ZDiHh4iPavod2vHRO1Fq9+NNQ1GXzHXfG1Gqtx9u2b80evPRzttaN2ytUv
RpnZ763XerSqrcfaqyfmuR7qfQH4Ns8N+CWHXvJbI3b94OQopN2tw6h5nsuVHbbtSJVg2LvrWkOt
t2THHUOKb6CpqnfGOxs6982+0vgjsX5Tui3HpjXizvBjDLggBACAEAIAl1az9hgCUK5TEjMafTAE
k6uWg9/1jr9MASqRLrqT1/ZAG6AJR9yRA/SQ+n2wBTnnAkS1PdPrI6DrPTpAGGmKEpqtvPnPaixq
7Ea9q0OU6wtRn90oX0n1nFulZrkStxk1SSSz9AUo9QBKZHxlFwgq9jdCLxTJBPa4y6kT9vcVfCYl
EA5GiQBrpAFWSZge7SAN0AIAQAgBACAMfeUfGXabl/sfnOwO9OPs3/B85tblG/8AI2LlY7o2C5ac
ksFWtKl2++2OtCX6d5EiFJ7TNKlA3LVydqanB0kiJJSVHuPmR88eCHJP0nOStBaLtcLkm0G6Vd+2
Q3rsdO6xZs0sVM8e1ipICqWlyCkpXAzdbW6SFAqIC2VpVG4v2MDXNPuYOdbjdxLsXGcJKqaf4VT3
pmp1DT8bPxbmDn243cO7FqUZKqaf5eT3pnatw+5X2Pk9hL7tRT09k3JxRqkp82x1klNK8XklDGSW
ILUpa7NcVoPc2SVUj38NRIKFHxH6m+neR2NqSuY7lc0LIbdqb3wfG1PxS+F/aXimeNPUTsK/2ZqC
uY7lc0W+38qb3wf+XPxX2X9peKZl/HWB1yIAQAgBACAEAIAQAgBACAEAIAQAgBACAEAYU83OU9Nx
v26/C49U0r26uaNP0OG0LiBUCzU0vLuGXV7E+1LNtQoikQvR+rKRIoQuO2PSj0/l3nrH3rPjJdv4
sk7j3fMlvjai+Ke+bW6Ozezs70x7Gl3bqv3rOi/3FjNO4/8AMlvjbXg982t0dm9mEfo1enFnXqPc
sLZfcppa+o2J2ryu1Z5vvmly71t3+rTX/wA5osFpapYlXX/L61mdQEz8ij8xxcpoB9r37lrCxlZs
pRioqMYrcklRU5JLcezLFmEIxtW4qNmKSSWxJJUSXgkfT0paWmoaWmoqNhqlo6NhmlpaZhCWmKem
p20tMMMtoAQ20y0gJSkAAASEcfM4jwAgBACAEAIAgqkDIfp+hgCSf0M5aSJ+Ogn9kAU9SSTMez9p
gCFAGxRkOsif2fZ1gClOKUCSoTJ+7r8J6+yAKXUvJCVKUdAFCU+p0MhofCIBiXjSZVe3jzcg25j/
AJYBOih2rmR4Ago001BijdNeRVwMlKKflT06J+w9YuFJUrTL+b2/2gvAaay7R2gn2aRHEHJUSCO0
iSpmWggCcQdZe39kARYAQAgBACAEAIAxK5s8N9oudXH3Ndgd3rRTVNuyKgedxnJU0jL18wPLmGlm
yZdjtS4A5S3C2VUitKVJTUMlbS5pWYu2b07FxTh/tKZRUlRnzHOQ3HvlL6UvKqqwrMG6jHcxxmqq
KzEcuo6d9zC91sGdqOxu40CnUinutkvFKEorKNR86jfmlQQtKFRn6rpWk90aTc0zU7au4V2NGnvi
+EovhKL2po0GtaLga3gXNK1W2rmJcW1PenwlF8JLemju34x8ocF5M4ai82FbVnzC1MMt5nhFRUJX
cLJWkBKqyi7iHLhj9Y5M09SkGU+xztWNfDnf/p/qnY2ou3eTu6Rck/k3ktjX6s/1ZriuO9HjHvjs
bUezM9wu1uaVck/lXqbGv1ZcpriuO9GTEdfnBhACAEAIAQAgBACAEAIAQAgBACAEAIA4C5GchcN4
47fXDMMlfpqu9P01Qzh2J/iks3HKL12KTTU7TYJfatjL0lVVR29jTYIn3ECOa9jdk6l3vrEMHFUo
4EZJ3r1Pdtw40e5za+GPtew5f2Z2fqHeGqxw8ZSjgxkneu092EeKT3ObXwr2vYdC2w2xnJr1ReVl
uwDDGXso3DzmuRXZBfqluoRiW22FUz7bVZergUd7doxfHqRYQwyCF1Dva2nudcJj3hpel6X2zpVv
TdNtq1hWY0SW+T4tvjKT2tntrR9HwNFwbel6XbVvEtRolxfOUnxbe1vmfTs4KcL9reBXHDB+PW1t
K27S4/SmuyzKnqZpm753mlwSl2/ZXeVoHcuorqkdrLZJTT0yG2k6JjXXr0r9x3Jf7DexioqiMw4t
FQgBACAEAIAQBsV7ZTmOvslAFOf1UfZ2/GX9MAScAQVgA+z9UASbrgAJ6aSH64gFHqHwkdyjoegH
w69YAtSrqiTqe4EK7Uk+/UkAyM4AxtxLudXgSdQEY+wtBGomlbq1TkflJTp74o+0kTwZklQHuYR/
aIA+JA1PQRcIKpRlLFfRuj/ykug6mRUevsOsRxBySDMAjodR9MSCaaM9T7P2j7YAjgyIMAR4AQAg
BACAEAIAQBgf6gvp7bE+opslX7Tbw2oUd5t4qbltzuRa6en/AM2bd5OphTbF0tFU4ib9vqFdqK2i
WfIq2flVJQSpN+xfuY8+qG7iuZTOKmqM+bFya4x8qfSi5QOYnmDVXYMisdZUVWB7hW+iql4LuniS
3JIrbc4+lNLcqCuppIrrc4vz6V2aVBJCVnP1LTNK7m0u5pupW43cK6qSi96fBp71Jb00aPV9HwdZ
wbmmapbV3EuKjT/Gnwa4Nbmdn/F31A9ud9nLZh2ZMsbdbpVIRTMW6qqCrF8qq0tBS145dXyDSVVQ
pJKKGqIdJ+VtbplPyJ376M6x2xG5qejOWbocdrov21pfy4r44r9eK80jyn3t6S6r24p6jpDll6Mt
r2ftbS/lJfGlxlH2o7BiCkkKBBGhBEiPiDHSu86g37jSBIgBACAEAIAQAgBACAEAIAQBsdcbYZdq
H3G2KenbU8++84hphhpAmt155wpbabSOqlEARXbtzu3I2rUXK7J0UUm23ySW1sqtwndmrVqLldk6
JJNtvkktrZ1x8ifUi2p2oVWY3tq3T7sZu2h5pb9urQ3hFjqUlxoC4XtgrXd32XUzLFF3JI0LqZ6d
49meh2ua4o53cMngaa2moNVvzXhF7IJrjLb4HcvaPo3rGsqOZr0pYWA6NQp+2mvLdBPnLb4HVls5
sny09ULkijENu7Ncdx9yMhcQ7c7lUKXQ4XtziyXe38Zdq9SVW/FsWtTX3Gh/FqFiSEuOr19YaTpO
kdr6XDTdMtxs4VtbEt8nxlJ75SfFv8R6g0bRdP0TBt6ZpVqNrFgtyW98ZSfGT4t7T6NHpWelxtV6
Zuy7uLWKopsz3lzhFDcN3t1XKNLFRf7lTIUaaxWBtxJqbXh9lU6pNNTlXc6sl52a1STh5OTPJnV7
ILcjfQgoLxO02MYrEAIAQAgBACAEAQ3FSEvpP7vpgClrk5PuEwT0/WIAllH5pJPgTKR6T8CNfGAJ
Zw6T1E/A9QNevsgCj1b40l01/pOmkjEbQWlW1nmKKUlUk6aa+Phr7YbiSgVrwQ2RMlztUUk9BLQk
npOcCDgfDUgVOFqc7kBOOU6WShRCSszPYtIEiFlMu7wEUKnWqFS3GR1o/wAIzUDrNM9FBJAJH6vp
i4UlURLzW+oIUog6GXygS6+2UAciUBLtKypRnJIB/wBmYH6hAFRSZEeyAJpKQdSfq/pEARAJCWv0
wBrACAEAIAQAgBAGxSiDICZPtmB9YBnL2dYAx85J8V9guX229x2p5DbZ4/uNh9wQ4phm8UnbdbHX
KQUN3bG700lq6WC7U8wpD9O62qYkruTMG5buztS67bpIhxUlRngn9U/8vtvpw0r75vBxmp8m3043
Medd6tFEya7dPainbV5qm8it1tbQ/kNkop/w7pQtl1tABfbRIrjd42dC8ui7RT+pmNctU3bYnXrx
19Svcnaq30mKbm26o3YxKhLVLRXB64CkziyUjPlsmkbudQlbF7Yp20HtbrJPJUO3zgPljqXvT0U0
HuW9LUNJktP1OVXLpjW1N76ygqdLfOFObTOne7vSDRO4b0s7S5LB1GVXLpjW1N85QVOl+MaeKZ3B
ba8yeN26jNKMd3Rx+2XSpAH+XsuqEYre23u0FVOli8Kp6WtcEzL8M88FAE+Bjzbrvpb3xoEpPIwb
l7Gj/iWF82LVaJ0jWUfbHZxPP2s+mveWiSk7+HcvY8ft2f2kaVonSPvL2rZxMlaKso7mz+IttZR3
JiU/Ot9VT1zUvaXKVx1AH0xwTIxcnDn8vLt3LU+U4uL/AN5I4VkY2RiS6Mq3ctT5Ti4v60iYiwWR
ACAEAIAQAgBAG9KFrMkIUs+xKSo/UATBtLfvIqt3EsjMdydvdvaFy5ZznGKYnRtJKlO32/W23rMi
R2tU71QKmodJEghtClqOgBOkbrS+3Nf1q4rek4eTfk3T3LcmvbKnSva0bjTe39c1iat6ZiZF+TdP
dhJr2yoor2tHXju16p2zeKs1tv2qsV83Nvrfe1TXGrZdxjEEOguID6qqsbXea9hJSFAN0zZWDLuT
1Hc/bv8AD/r+bON7uO/aw8V7XCD+Zd8v1Iv2uj4Hbeg+hut5co3dfv28XH4wh+0ueVfgj9Lo+B1c
7kcn+TvLa/W3b5movV2N8rGqOy7UbVWa6JbvFY86Awwu0WxdxvuQPKWUgfiXXkiWgAj0J2v6d9p9
nL5umY6eXTbeuvrueyTSUV4RSO9+2+wu2e1/e0vHTy2tt2579x+TapFeEUjvp9P/APLC77btvY5u
LzYyD/kVtu8aW4K2nx95m47vX6hUA6ijvFY2H7JgrdQkBLiSqqrW0n7iFajkuRqlu2mrW2XPh+k5
tGy3tke1Di/w+43cNcEb2644bVY1trj6gyu6P2ulL1/yOrZQEC45NkVYp+8X2uVInvqHlhJJ7Qka
RpZZMsiVZtuRkKKithkxEEiAEAIAQAgDQqAgADMAwBr01MASLy+8dZAfUfCAJWAIK5J+Ev2wBTKh
Z6IOnv8AH9msAWldqgtzbQVTWDMz0HgQB7pRFaAtF58JJAVKWqiTIJAEyZ+Ok9fCI8idhRn3AqQ7
p6HUaznrPr4/tgQcPYyVk4OAoIU5ZqVQChoUoDqVpTIGYcSJf3oo+2ipbmZJWwBNOB0kf1SE/bqJ
RdKSof8AHbEhoFGch4yHXr4RAL6sr3cwWj1Se4fAynL6YkFagCaZJKTM9IAjQAgBACAEAIAQBDdK
gglJ7Tpr2951MpACepPTQ/CAMVd9t5uP68a3F2ozffjCsKyapxq42qvs1q3rxjbXc23OVtt/EUv8
pulRfLdc8TvFYl1lVNVrShDZWkmaZxXGLluVQecFncDK6VDaavdPlVi+Md/4K3M5F61nGChuC3+9
TS1VK2ccvFU1WOoTPy1VKgAZqUFTlX8p8iNpyntjUc492Lrf7Px73O5SZVi1tZpHay2p9Rjhbuzc
6akSpFKKlV4c2Uyq922hrH5p8tx3sWnSYnBwUdstg2nTZzD4c8Z8q3A3JxvPVU23nKCz31qhzKur
uYnHSpFvv9YlkoVmGF4dsJiNpafrPxTbq0pqKaoMydTOMy1lX7SSXvR5MolbUvM6ns59OjcnFDVq
te8vFHMWqd9xr+XWPkJijt8SkEdgqaS4UlroW3VdyUy8/wC8dJjWNlbzIyVZJxf0ll2Zp7DGdqyb
17MXsM43dMix26l1YDu3GXNXinecStKVFxeGXW5UTxKkpkXR8wlKLGVi6TrEHYzrVjJgt8bkYzp7
JJtGJn6VjZdmK1PHt3bEt3zIRknTl1JnM9q548v8FeaorhubeahdGttt2iz3GrTc6hYakksVLl6t
KK8FaRIkLS54gg6xwzO9J/T3UOqVzTbULk/tWnO20+a6ZJL6KeBwnN9Mexc1ylc0+1Cct7tuUGvF
dLSX0UMjMf8AVr3XoqVprJNrcAyOpQO1dZbLnfsaD4HRS6ZRyBtDih1KSEz1CQNI4Nl/w89rXrjn
iZmbYtvdF9FxL2tRb9r9pwzK9Ce2rtxzxcrLswf2fcml7Wk/pftOY7Z6vOKKabN72Oydl/TzU2bL
bNVMgyHcGl3CjoXFazl3JGkcZvfw43+p/d9Wh08Ouy6+3pmzj130BudT+Rqcejh1WXX20kcpUXqt
ccn6dDlbjm6VuqFJBXS/yG11/lkgEp/E093Q052nSYAEaG5/Dz3dGbVvLwJQ4OtxfV0mjuehHdEZ
NW8rClDnWa+rpJr/AP1V40f/AIRun8f8rUH/AOdRR/8A567x/wDlaf8A1p/8JT/+ie6//k4P9af/
AAmxfqrca0oUW7Luk4sAlLf+Wre33ECYT3qvBSmZ0nBfw9d4V25WBT+dP/hC9Ce6uOTgr2z/AOE4
Lzv1cmSh+n2w2eeDvcU091z2+I8ntHcPNVZsfHmuBZkQg1bZA0JnHK9J/h0sxanruoykqbYWIU28
uuddnD4Tk2meglmLU9Zz5SVNsbMOnby6512f0TGLIPVE5P3WncYt9w2+xVxw6VNlxFqoqGgZTQ1/
mO435pM+kygrE9CDrHO8T0N9Psa4rlyxkXqcLl6XS/NR6a/iOaYvo32Nj3FOdm/epwndk0/NR6an
BOQcoeVe4nmC47s7oXCmfHlGjsVTX2q3SX3Apap7DTUjTZWFS+UzMcy0/sTsvS0lhaZhwadau2pO
vnOrOW4PZfaWmpLD07Ei061dtSdfOVWWnb9jN2coBvNdbm6TzkpW7ds1ye1Wl9bajot5+/XNutOq
ui5HWOUxlbtx6IJKHJKi+hbDk8YKEemCUYrgqJfQjI3bHZ3jLgopch5G5Jd9wUMOl93Ado9z9v7I
iuaYIWaKsyMM5Zd6U1CQUq8ukZVr8jk5GLcrlx/3dPaq/UVqO2j/AA9p3B7L+tPx64yWH/LXBD06
th9hdwHqZi1Ue5G4d3yjdrK6ua0tuv19ZY7JbMqu9XWiZLabo0hS1CaCAExg3Ma5cXVeuSlT7NP0
l6qjstpOfg/0HaFtn6wnN3OcYbv9/uyLZfGm2vNx7A/TY5Ibi47Utpp/MRV0+SsbrW6pNXWma/J8
tCEeXoqR0xJWsXi17WXIybW1bTkyyep96lmQXhNNZdv7Vc7XRt0lwcfV6fnJbHbhVsPhSqa3XCny
vfCzMULtb2lDi2FuKbVLsBmSLLjjv3bW2XgVEuz6p3q1t19a1UcUNsXrS0XE2m5Ve1e5NnrMgfRV
raRRUNod3jqn0VTjKQopCnFpTr2mI+V4Mg5ywDn56q+7eUWDDaDjVtBs5XX+6UNnayPcLaXkLkeM
29ysadT/ADW91+OX6mpbDaGaxKEuuPuqCEuJPdrGNcrGfSiUdy3Huj5SUlivw5RZDsXkuSLvbK8Y
qdiMezbHLJT46bdTpfYvlLnF8v1c/dxdUuKQ4y8hksKE0giUUpyrzJMigekwQZfpqNIuEGsAQ1K8
B9JgCHAG7zO0a+6Q69OsAQluTBOvT9Ph0gCVUqft+r+mAISlBOpgCSccJBn4/X+ggCkVTvlpJKj0
OktBKU/qgDj29Ord+Zp5TaErm4rsmFokoK+Y/cmSDPrMfGI2gtd9xC0KRqpKhJUzIyn0mCOvxlKG
9AkH6hLTZWuYPadNJz98j0ERUHGuNj/ruANLIStnHlPkfL9xAUCD7B5iwdOpin7SKuDMibeqSEgf
2PdodT7Z6zi4UlRBH4poy6tqn7ZTHbp00JiOILotbym1dyZaSSoe1Opl9IiQXY2tLiQpJmD+o+IP
vEATaPll+v3wBMQAgBACAEAIARD3A4x3nwnJtx9rc3wTDdx8k2hynKrBW2eybnYfR26vybCK6rb7
G7/ZaS7IcoH66kE+wOCU1TBBkRcttRdZKqB0qX30XN6cxvZy3J/VC5MVuWvWpq2VuRja3Zamv1zb
YUgMC8XFVoq6u7NssMoaCah11fYhIC+0ARkfeVDYoqnn+gFIe9ErfRFUpyzerJypsrLyUt1aKHbn
aFmrcSoAvobrqW30a6fzRPtPYrt98offfBfh7AXDdfSm3fwDHrvdrZzG303PqqemoGU4/bLRmtry
S+0tM9Tt09K27QcmMCxh51b4VV1Sl/hUuL8xSewlCIpWSnwB1q5V6IW/WY7h5LnmP1XKTaity1dH
ccie2/3T2rx2myC8UlO7SIul5o8j3cz3IK+8rabQpT1TdahIMgiUX3kwpsRDXVsKtVeiXv1Z6Vx5
7fn1KblUveUKgWDdDYW4VXeUo8wg3DcK1+egHx88aDoYp+9+H1Ip+T4/WUej9IDefDb5Z8vxnfH1
VbDmdmq27hS3apxXjfuXRuN2xxFdS0Vbal782ujuLLlQwAGKjvZUTIpUDrEMmMJuaiqy38K+dBOM
pJQlJuMd3GnkcQb81nKLJqK74Bm2f8pNxali61dtyKu3l9LjYWnSyineFKtleSY3fcoXWll4TDrS
1ICfuqOkZsflL30kn4Sf4i3KtHV/Sjrcv3pt7YZDUO3W95vunYK2qUXKlm3cV7VilCy8s/xC3T25
5LDKQs+ATp4RfWRJKiSp5lvoLOrvSSwu40LtTh++1e26lfap3PcMyWxUDCeqlkY5i2TVSykf1e1H
xipZT4x+gdCe5lFt3pCYtUuSvXOfZXHANFtU+1nInKX0LAPclf8AL9r6BvqPAnWH3t8IP6V+cdHi
XTTej3sa2krvXqTbcUDaZdyqbjDyRqBr76jF6VI+kxH3ufC2/pQ+WuLKi36SvDdI/wCueqrhbCkE
JeI4wbzttNk+1dSy0U/SBEfer3+U/pQ6I/rfUY4Zjxn9Mnb2pu1GfUUy/cS52KrqKOpYw7i1lBpK
x+kWUOm3v3/J7Q1UsFST2lUu6XSLiu5Ev8NJeYcYricMWrOthcb3VtFp2u3R3LdwmnbpJ7j3LB9p
9vrjRVpT3uKax7La27sijpkjtDrlQXFOf1AnWKLk7yWy25PzCS31Rn5b73ac2tFTdsh5Y8pKvCWX
WG3FYbmPFwJDJKGayocp6i74xbkllTiShKHVFQMpicYkb2RXbYS9pX0x3uRzZbuFXFfdGz67k8yM
2qnKZi5LXmHJngRg1LdLfVvEtOox+9bgXqvoHEhHaGn1d63B3AAFM4nl5EPhhFexk/Ltve6m+l9J
3jtcX0/ySzcmeyobdqaPzeR/p83GldYbU2ZPVjOcIVRPBCpgKYWFEgRYlnZq+GEX7GVdEeb+k7Ou
JvG3ifxqxWttWWcHs/5J1Nchtpxvejd3gFljNkcSovv1eJUliyrH61tx5aW0LNRWPrKdEBHaRGPP
IzJy6+ikuaRetqMEnB0fPicKWzBNm8QrL/fdzeOO0WJMu3CufYsds4ybb0VNTMvPOv29VDdMH9QK
yVlzfYY7WHFCnQkEEgJnKJ6HLb0Pq8iuUo0dWqkWmuHFyqqaumxbhBxu3NXUFuo/mVRsflVtuzrt
PJttD7NTzBvtRWONrbCh5Lrg9k5ziqNuUXVRa9hRCSTrVGXO3dl2IyXHL5d6z06di7XZbKplF2rq
fgVvpkltp3aXzKioZTc8Ty7MahmrCUI7HGG3VEKme5JiJSkt72+wudXivq/MXU5Z+FlruVut142I
4MYTU5IzR0dtZzba7mdx2r313J1nybaL3ftrVW24PectltaE1LXlrSSflAlYlepKm/2L8xbltdTs
12i9OTapilyGo3G2c28wGruK7evH3ePu93IdE6AU6/NTeK683rHx+IZcWlTCqRgMlJPcD4w7qeym
/wAERQve/enRhi0Uze2/I7mtso004t6tptueTOc1TF0nT+QKepZ3EOdMMhtSUqQWPJAMzEAzD2c2
8rNqNvrDglfuFuLupUWJmobVnu697pchzy/ipqnqtDl+u1FbLPTVL1KH/JR20zfa22AZ9YA5KKgk
TJlAEJTw6Jn4zOns8NdYAhFyftPx/X8IA2rWOk/pgCXW8lJkZmUug+X4A9J+6AJJyon9Pt+Pj7oA
knHxrKZPif3QBbdwqFKHb3dqVAgjxOo8OkogFl16HFNrDrhWlKioAGQmNAFhISFEA+MAWw6pKE6z
PiACZ6eH92IBa10qApXcuo7WWwtakSl3Lke1M+vanoEiczFJNS3rIG263DvNRN+msLTaJAAr84kK
UVH/AIaO4THwh9peRPAyBt6pdoOk0Jlr49p6+PjFwpKohc6ltM5EJUB8s+4GREle6R0iOILlt4IU
qenu8fED64kFw06igzQZe0HXofZ0gCqIqUH7wKT9YgCbbcSdO4e7UfprAEXuSPH9v2QBp3J9sAbo
AQAgBACAEU0rvQMK+VOy+abgVeP5RheacjVV1npf5G7tdszvta9jMYviK+rTULyfK7+9aKm8ly1t
Dyx+EqAtaD2hpRBm6UDFS8cV+StqrHbZg9HuDfLK7T0jhv8AnnqP8kKS7h6spWHbrTN0ljw+4+Qm
hrS40ytp5AcQAqSZyFxK2tm2g2lsXvhPykftoNG9Ym6imadV51058c7Lg+pCEKX5lQLVaKVVU4fB
DaSpRlJJ6RfjOzxTJTpuOsK0cgah+8Jx+z8i7taGhUuC6Pub8eq7UKtr1qdeYX+F/FbNfh3qNVW0
tBPmqQAmfcRrFzqx+UvoHUzJ3B9yOIN0p7xXclef+4mPXusdZZstv275b8ybTQNseSo1a7hSZzj+
K3hmpS8plaB2ra7fvAAidicrfXWKdPIqUlTada/Iiy7a0GbZhfdgOeuLZ/tdTUjNVjNpz/1AudVv
3NqENUaX7o1cKLCqF20rU5cVOoYDKirsSklUyRGXayYVSaSf80tuFqWy5Vxe9VMFsQ3esFFmtPTb
j0FduNiVWhNTcqG1c9eeCl+Q4opC7Xf73jdwoGq4qMgzUarl9Iyp3bVPclFS/mosfLkrmxv5XBcv
acmXbI/TwyS7+U1g/LzG6l91bbdAOb29FBQJdBBW1S1+X7SPh1IOoUX1AjxiIXLklslB/wBFfnJc
PB/SVi0bc8Csor3LVZdp+WmZXpEvMt9r503+9XUzQFpSqkp9vPxE1NnuE0iadYnru8ZQp/N/SU9K
5P6SlbgbTcANuwE7ncG+aFrZKE1CHcr5PZBSsPtKmRVNqvGH29pxpSZ/P0lExnfkvduQ+gNRW9P6
TGLKM/8ASbetz9owLhBvDfr7XIfo2rkrl5gjNTaVrSpgVlGi+Wiqp6+5MOqm206wtoqHzAgSi4nk
R2zuRUfIJQruZzjxs9NOx73X+htOCcJN+rvbH6Rm9XatHMzizcbpabPUJDtI9cWabA69yxmuMkD8
U02pLiu1MjMRh3Mq4m27ia5IvRjBv4dh2fWT0TmbY47UJ4P7+NLbqxU0w/8AGtxsWnykAFumLQ2i
7ZJIBnLr1nFi7mXnstvZ5lbUKbEjk28+mRurecfqMdu/ELkzcbNX0abfX2BHOzjZ/IX6alU09Rr/
AJadlmGGnUPtJ+VpKRJA1MzFEMm70vre2nMt0lXcqFybP+mNuTgO4v8AnG4cAsJ3Fx5OM1FH/wAv
t/uQ3H/LcffvF3cplVF4VT4tx1aq6S5WtLSksFupSzImaFKIKaJX5tbJS+kq6VyRmhS8Q7K6wqmy
P0Z+HS0ONLK1Y/uJtOW1rUtoJpk/zDa61vBxSColc+09o9sotSyMmL9xt+0npjyRxDnXDzZG3Ir6
2/8AoOYzfbRbShpt/abcfY+uyStS4sNedQWKmyHB6ipLR1UpVQHAkTE4fe8tc/p/QVJRp+gyP4eY
Dxyp743tVi3pV7kceLG21dLxcMv3k212zuWL0dekB1mgRklZm+a3+5VF0UO1hNKhynbV94oGsQ7t
972/pGzw+g7VLRt/gViSlNjwjD7KlAklFoxuy29KB/ZSKOiZAHwilSuN+89hGwuRFFTMJKaWnYpg
oKBSyy202e8AKUpLaUdxkPbEg2qplPJWl6TjapAtOSW0vr3dyFBYUhU5gK7u0jSIcUwToEvj4n3x
HTFA0K0jx+r9JRUCWW8T0Eh0/p+iAJdZOhmepHt+2AIZM/YPgJQBLuuhAnOROnceg+rWWsAUp6vK
SNTLr9Hu9sAS66wHx9hkSZ6wBLuVYAlPxnIe/wCHw90AUt+qKtATLw8Pp09kAUV5SipWpmTr1mRp
KfuEQgW3d3w00skiatBPSfjM+OktYAsCprlKJS2FrWRIJBkTrqo6/I2mfzHoBFNdtSSnttKbIW72
OPKXMrMlBJ6ITThYIbbSPcCTqesQClUNGk3bC1K7lKTaEoSruIEikoKpAgzT2THQdYfaTHB8jnSn
JBbUP6oBl7ZS0+sRcIKwwoF9hWslOrl7wpAGvtAiCS5WFdqidfCcSQV5pYEvfrL4j7RAE3AEwDOR
EATCHvBf1j9sATE56jUQBuCyPf8AGAIoUD0gDWAEAIAQBDLYKiolR/1eoBAAmJzkrTwlAECtpGa6
lqaN/v8AIqqZ+lf8tx1lws1DSmXfLfZW280vy1mS0qCknUEGAOvk+l9xcV+JLtdyHe/FKUpXmcqu
RMmipbix+GQ3uShFOElwyCABIAf1RKqN12X1raCFTelVwkpnfPVt3nNQ8VlxbtVv3v8APLdJmFec
te5pU6FhXzAntUrWWsT9+ucF9RNDfX+lLwDulTS1l24/0d1qKNt5qmeumf7p3FxtupCA+gLrM6fP
a75aZ+OnXWKHnXK/D9QoSzPpKenO0pKkcW8KKgQZrvWdOzke5SSXMrWVtqJ1SolJ8QYj75cl7tNj
8vzChcLXpa+nsy0hlvidtKhCAEgptFcHVJSZpDj5uJfdIVrNSjOK+uRBrbfS29Pm0rdcouKW1gW8
4484aqgudwm44e5a0i4XSqSgk9O0CQ0EhEq5OO5gvIenpwbCm3P/AAnbBKfa8vy6tW2WNLrwGm/K
R3V66NVYvsQSBNZl8Yn513mwcns8XuOjFMikGx201RStILbVPcMBxy6sNslRPkoZuVDVoS12mXaJ
D2ARLvXGqVf4eQJaq4n8Xq9pDFdxx2Gq2GgEtNP7P7eqS2lP3EoBx0dqEDQASEWuqbfvPYNhdWB7
E7L7V1FZV7XbTbabb1lyZbprlW4JgmL4nWXCmadD7dNWVVitdC9U0wdHd5bhUmeoAOsAcqJbCEpS
CqSekzMiZnKapkge8mIqlsqDXsB1KiT4EhMx9SRE9XCoNOzWfcf19TLu6EDWX0QBtUjuOqiQJy+Q
kg+0EzEpe6ANS3pIEDxSQACjUH5RLSZ6+2AIRZ+ZJ71fKpKtUg6pInIuEgd40PUy6EQBMAp9yddJ
yGvugB3J9v7fsgDQuIAJJ0EASqqgGcgT8dBAEDzFE/NqPYPCABWD7fH9fj8YA2LcABJ6eA+qAKY5
WIHQkn2+A+r3wBTH3ypJUtZCR4TI+n2eEAUV2pSSFhXUGUiJEeABmQZxAIJqO9Mwr5gdSQPdqAT4
SgCEXB/WUT46nx/fEgknXwFBJUEzMk69dJyT09onEbSSmv1DTKFOLXKQ1nP2T+iQgyDiy8XN65VB
DRWy02pX8VR+Xs7iD2o1811xIPYDonRR0EQ3XyJJFBSZ9qAJ9gM/mWUifaVrMifm8NBPWIBFICED
oO2XXxPsmfE+ENgLZx66W6+M4Re7RXUtytj9spzQVtIvzWKth1NQlTzS5AlDb6CkiQM0mI+0vIng
c4sOj+Hr1A00lLr7vD64rqUlZad7Pw81aedp4yPbOfhOG7aC52XApKFjooD9ftiQV1pWiRP2S+Ps
HvgCpIUCJfof9EARkKlofo93+mAIsAagkdCR8CRAGnnq/tK/VAGw1Dide49fq1+iAIqLgofeT3fD
T65kwBF/mLQ6zB9nar7ROAIrday5/WAP1fbAEUOf6wM/h+yUAa+Z70j6v2zgCEp8DSZPwA/ogCEa
hR1mR9Al9sAbEvLB+8ZfADr8IA3ed/aHd8SZ/sBlE1ADmo+QHX+qlUz4/wBo9IVBE81Q18pY8NEk
zP0gkfREA185XQhQMpyIKZ/SQAYA0NQAZHzAdNCJHWeup6QBoalXUJEgfm/iM6DTUyUflP1wANSS
rt+WR8e4dkj4hXbIkeycAPOVPqwAT95TwVpP2BJI0gDd5wH31oPvQFqAHu7WzKfsilxi9rBqlaVm
YcUAPGShOfuUkEyMFGNQbwTLqZH26/bMiKgCrtEyr4Aql7pzJgDZ5iT4qJ6693Z1MpkK6THhAAuS
nKUtJEFQ9vUHXSANBM9ST46zPgQepgDRTrbehV8ANTAEqXS4T4AdBP7ffAGnTrAEJTyETmf0984A
prtw7ZdkyT49JdPhOAJJytKknvUr+j6JEygCnKrG/wDW9kuoJ98tZaQBTK2pWtPaklI69fDpqJHw
iNgKctXyp1nrOcwZe7x8YeAIRf8ALEydJyEz9Xs1HtgCUVXDQFXdroBORP0n2CD3Akn69I1PaEgz
11P/ANLWYEAWVdLt5s0JUsJKikE6KXPTRJI0JGntlPpEN7CS2+pmVd6tdf7PdKaEynOUtT/W+EUj
h4kdtASSqZJ+Udfl0J1AOgnP4w8QbHFgJXofl6H3AEg9B8wOsonzBwjtEt207dbcMuVFNWGjtSWF
KoH/AMSwp1VxrnQ02+WmFvuUqakIcUUBRUlRI6xQ371SVuoZJ26+0z7jDRWtDi1SShYUk96RMpT0
7pp8PZFdakU+gupVU3/1X559zxRMGfaryypHfI/IVBMxOU5Qf1Aui1Vfc0ylahNIJUZkiXcQDMDr
EpkF10z6Tp3dBMeJkZxUCoJdl0Mvs9ukoAm0ug9f6f3QBHSs+BmOkjAEQLHwn9IgCCpQBPsmYAlX
HQJ69Cf1ewGAIP4gdPE9Jft6wBs8xJJBmPAk+M/YQZzgApxABPcP6fpl7IAlvxJE+11XxCjIDwGk
Aa/j3mTo8sk6yn3Dp7DMCAN/83dT94IJM9ZS6ddJwBoi9OalTbZEwJBRSff7QYAmEXumUZFDg1lp
2qHh16eJgCKLvTlUihwD+1IEfVOcATYrqVQ/xUAS1Cgf1hQgCEq50SJDzky1MkIMgBqTokAQBqLr
QKE/xLQEgr5hKQUZDqmWphUG1y60LQE3wqc5BAKukp9BKIqgSir7blD/AByJE9UqnoB7oVQIKsgt
yNQtbhJkAlB1J+MusGwS5yainJTbwJ6fcPu11EFSgNRktMpJ8tpapSkFlKZH2adxnEVqwRG8gQr7
7IT1OjkvtTDcSRFZAP8Aht+2fcsnUeGnboYmpBA/nz85LQ0Seku76pd3X2wBtGQulXbJtA/1R3dd
J/MYVBUWq9agSHu8aHSR6/RAEwapSgO51Wg11kB9USAh1M/vAylPXWUtP1RAN/4ltE9Z/V4fEiAJ
CouSWwZHoTpMDx9+mkKoFIVcEuGfcVewTkNJE+PhAEkquQFSWrt6pmdQfpnISgCE7VtqHalfXQe4
T1PgQCekKgki94kjxJlKUvb8NIApr9cwAVrdSlImNVJ6jqCZ6mFaApzl1pkgdrqToTqROQnMynpE
VQKO9d2XTq+JS7gBLQGWsukK7SaFGdvlGyAk1U+3x7/McJJ1KjpqZn3CIqKFv1ORtuhSkOSR3FKS
ozJEyO6UxKZHjpKIclTwFC2Hr3RuP+UqoQZk/OXACtYI7mkdpn2jx9vSFagnGbixJR70pAKk/eSQ
AkkTJGg01gTRkyi5U6wtIfTMJABHbJOhI8ZHSFUEinXLIrdQ0lQ+/UUyEMsqdedW62hppDSFqcUt
SiAChA1ily+kJHPlT/h03/v1f+/Fwgu3/wC+U395X+4Iniwt5I2//vO6/wDaqX7FRJBedJ9wfA/s
iECpo6D+6f8AdMSCYgDcn/pJ/bAEaAEAIAgHqfiftgDYr+r/AHhEPcDUdPpP2mJBtX0Hx/fEcQQU
9B8BBA1iQaHp9I+0QBsX/hn+6P2QAb+7+nsEQ9xL3kSJIEAajor4ftEQ9wNivu/V9oiQtxLjoPgP
sihgk/6v+0fsisPeajqPij7IL84Nh6wD3kVrqfiIh8QTKv8Aoq/ZDiDeOo+IhzAPU/EwW4ENHQfD
9pilE8Cbpvun6PsiVvII56H4H7IqBsH+Kr+6IgG8/tH2iAJJ3w+j7Yn8xPA0HUfERD3EEq/4f3j9
iYP8xPAhHx+A/wCjAPeRB/xP7oiFuRBR6n/Ac/2/91UVE8CRPUf+b/6KYp4kvj5EJ3+r+niIj8w/
MUl77i/j+2D3FPAlk9F/H/7UxD/IEU1z/GR8Vf7xip7wiqf8Jz++v9sRxKvzG1n/AA1f3R/uqiAi
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="4f753b3c-cdb9-4c9d-869b-ed7145c5755c" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="1d18c51e-5ff8-42ca-8b5e-ecfd68d7c3a6" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1b08bda0-db76-46a1-a90f-cac091df30d1" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="eef8d6ba-dbb0-4eb5-9d94-66ec34cc964e" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="0dc7343c-7a6f-44ee-879b-b0ea8d9b87d9" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="671b540b-6dff-42e3-a809-ef960296d17e" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8570af6d-695b-42b2-9b29-33b6366b2577" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="8642c58b-bd8f-470c-8399-5599df1cf26b" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="068ad993-a0ff-424f-a09a-d342b96b8d92" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="c002dc5a-b25f-41e8-bf68-28164215120b" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="eb18f7ab-aac6-4815-8887-7649d9415964" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="f482dfea-ec22-4bd4-b465-3bd37615d5b2" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="75c8967d-e3f2-4a39-aa2c-7d5197cb2ee5" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null
log.info "storedClob == null : " + (storedClob == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="66725392-93c2-419d-8244-18afd31740c8" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c7341ef1-4a18-4afa-bf0d-9adc0122c4be" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="be340bd3-a7ef-4d7a-bdd6-dae3381b500f" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="6ea4b80a-cffc-4214-83a2-ca8e02df8576" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="8644cedb-929d-415c-9ae3-768e5d9f3a3d" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="ae710afa-e8cf-4f17-b28e-9fbf1bd8fd50" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="0cfe770f-78d4-4eba-b0b1-c751e2c3a2d3" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="b87db292-07a9-4981-a6a7-b16a8d1d6d40" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob != null
log.info "storedClob != null : " + (storedClob != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="511c643e-57ca-4b50-a698-d53451eb1b89" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>net.sourceforge.jtds.jdbc.Driver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:jtds:sqlserver://192.168.0.229:1433/ilmoa</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>megaware</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value>megaware</con:value>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>mssql</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){
  
}

try{
sql.execute('''
CREATE TABLE qa_jdbc (
	workingName varchar(500) NOT NULL,
	blob_data VARBINARY(MAX),
	clob_data VARCHAR(MAX),
	constraint qa_jdbc_pk primary key (workingName)
 )
''')
} catch (Exception e){
	
}
</con:setupScript>
  </con:testSuite>
  <con:testSuite id="3332cf68-fc80-4bfc-b82e-24efb2da023b" name="Jdbc Mysql TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="ba589849-cc71-4b2e-bb18-9c0361a32fc0" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d7094e15-1ce7-49a9-9cac-89e0516fda88" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d8e9f17d-46ad-49f7-bf28-43a46344ff96" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="b875df95-bcf7-4716-a3d2-f1f50ad1a711" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="01ad7e77-35b5-4747-b95d-82268550ba44" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="32e25c8a-6fb3-4b8b-859f-da61c893e1cd" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3e682ab8-1cd4-45d5-8918-f1ce6d596820" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="b31b3e3f-63ff-4be4-bbee-858ce5634875" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1b1605c0-eed4-43f3-99ca-8b4ccaf4ad5b" keepSession="false" maxResults="0" name="insert_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="baa4c898-a494-4280-92d5-bede6542b748" name="receive - insert_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="4d6e8142-e6ec-431c-a8fe-b29e070908dd" name="receive - insert_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="01eb5458-f6d1-46e3-a766-819c9f10defe" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="eeeb236e-eb60-4c40-8c6e-4bd8ff8413ec" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration><scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText></con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

try {
	def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 
	sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
} catch (Exception e) {
	log.info e.getMessage()
} finally {
	sql.close()
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="51326c4e-6223-4ce0-8578-0845aa037a51" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="1b6dc62b-61e8-456d-a4ac-37631b855ab4" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="5327ceb3-2516-4783-bb0a-ee045bf0dd65" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="15c2b457-ea0d-47e2-9e5e-5666094b5007" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration><scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = null

try{
	java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
	rs.next()
	storedBlobFile = rs.getBlob('BLOB_DATA');
} catch(Exception e) {
	e.getMessage()
} finally {
	sql.close()
}

assert storedBlobFile == null
</scriptText></con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="f48e2a0d-86aa-4f7b-ba1d-299a3ca4f72a" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="b5ca26cc-a231-4484-87a2-bbd6d975bc71" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="b75219be-158a-48a3-872e-c0c707bcf7c8" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="26d81935-43dd-4891-b0c8-da458ba7fae9" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="c600637b-9d30-445d-bda8-81159451caa5" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="bb727c86-21e2-4c18-8db5-b47e51c73b37" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="696ed8d5-79c4-45b4-be75-bec61a377ca2" keepSession="false" maxResults="0" name="update_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="231fe1ec-3844-4fba-97b0-b3e7e3143053" name="receive - update_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="b58217de-4f86-4cc2-af02-8f23ba94ba8f" name="receive - update_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="6fb85a4b-1fb1-47d1-9326-4029abd7f067" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="bf6dcaff-72a3-4321-873d-fd50a7b967de" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="faa4d443-79e6-4a1c-8478-71e2028878a4" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="dd57a49f-d97a-4646-8c66-790b79c8a14a" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="0d766afa-ce35-4715-8345-27da08f183f7" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="ae0b5fd6-0938-457e-a275-c8794634c5f0" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a5fde685-6604-4c23-a199-e14370197847" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d0e4c405-d424-4c50-84f4-abf6c4d721e1" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c1fd7916-992d-4e3b-ab9a-c71247dca4f7" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="c853b930-3967-4442-9634-3d72bd3cf6a2" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="bcfe64d4-b4b3-457c-8229-eed08d0afd86" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="1218becc-a2dc-4e4f-a2fd-51dfd0ba248f" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1f454745-96be-43b8-a45a-f5d1a940adf4" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="a67d30be-b1ab-4220-a6d6-f1215acf4748" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="be6bcc68-f99c-4003-be43-4dbfc11e6623" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText == null
log.info "storedText == null : " + (storedText == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="48a14859-9f10-4049-af68-d5affc433712" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="f9f379a1-71e2-4955-910c-16a74f5b076e" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="bf74f66e-2ec9-41ad-8fd1-2ba724fa37ab" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="f4886480-dc56-4070-bf0f-dc3e47faac26" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="365704ad-15c3-4885-bba8-bb8181879236" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.ResultSet rs = sql.executeQuery("SELECT blob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'")
rs.next()
java.sql.Blob storedBlobFile = rs.getBlob('BLOB_DATA');

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="8dfb36f7-f3af-42d0-957b-4195575df850" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="886542a4-fd11-4a0b-b386-da839f91de95" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="3e25859b-6cf1-4b67-9854-78f914dc31c6" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText != null
log.info "storedText != null : " + (storedText != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="8d3ecdfd-6e05-4301-8221-c950050b132e" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String storedText = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedText == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>com.mysql.jdbc.Driver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:mysql://192.168.0.229:3306/qa_db</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>qa</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value>qa</con:value>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>mysql</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){
  
}

try{
sql.execute('''
CREATE TABLE qa_jdbc (
	workingName varchar(500) NOT NULL,
	blob_data BLOB,
	clob_data LONGTEXT,
	constraint qa_jdbc_pk primary key(workingName)
 )
''')
} catch (Exception e){
  
}
</con:setupScript>
  </con:testSuite>
  <con:testSuite id="6fefef83-4212-41f4-9436-819a0d0f8945" name="Jdbc Maridadb TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="942adbad-6560-4291-9a15-319744d11e41" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d092c9c8-68fc-4d21-80bf-7082de2eb419" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3ab8f7e6-cff0-41e6-903a-70e4e89a389e" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="7887882c-4013-4340-8a52-8b1fc9f76dd0" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="723d17b7-6902-4452-9d92-995a525e909c" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="4fbe51c1-162e-4e91-b5df-0d284108468d" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1b465933-9d40-4ac0-b002-5cd1cc3c9aab" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="eb03c0da-2db6-40a8-a8db-ad1563c84109" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b9a8a787-85d1-4a63-8126-bf4df6af31c5" keepSession="false" maxResults="0" name="insert_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="f486f9e9-0d5f-4b0f-95c6-c7f03b08866f" name="receive - insert_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="e0c28f18-e5e0-42b4-9211-b3402445a5c7" name="receive - insert_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="facc6f65-e350-4bd1-9976-3fbff859fe83" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="2f73ba76-15dd-4578-acc2-d35482aeb7e7" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration><scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText></con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="cd31f264-b04a-4377-ab69-534f013008a7" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="fc17ebdc-07ea-45d2-a9b7-a5224378858f" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="e3a15dbd-c1ed-403d-a5a4-df0544a52368" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="317dc8b7-7036-4a5c-bb04-41542bb24b5f" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a1a2625f-b9e8-4d10-a0aa-e20e732b7ada" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="66c5d7bc-8164-470b-a440-81ffa9379e2a" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="bbd0ed4f-1b9f-4caa-bd10-91cbe7d07d40" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="14a1cc96-8585-4364-b28b-89c4bd847922" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="54016713-1bef-4989-87be-e7a639cf1a9d" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="fd6a2caf-9782-4f76-af2f-354a1602d937" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="f82ea960-0746-4a6a-a6ca-82983a6c1c1d" keepSession="false" maxResults="0" name="update_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="94cf7db5-638b-49b5-9d7d-d3e0e01d7d64" name="receive - update_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="ee101b1c-e48c-417c-bc48-c398a716a819" name="receive - update_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3bf7ca79-5545-4a89-b678-ed79cd7d8599" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="e126a18f-4ad1-4fae-b7d0-57370a06aff5" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="06b75a21-fe7c-40e2-bb50-28ec6edd1fe7" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="ea5db0c3-91f2-4e32-b37b-0b13c3f520ab" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="516b53f1-e66b-4d39-885f-205f31250649" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d34c7e54-b7f0-4a07-af24-50168ff0c910" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="49655e5e-bab0-4a24-9bc1-01c7989228d4" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="10f5011e-eaaf-4d95-a447-4e77afa544ee" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="eb28a3ea-e2f4-4b51-8aca-d0ea1e39f1b6" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="435bcb26-3269-41c1-89da-cfedda8f8ed1" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="125a47b9-1c99-430e-89b2-37d7256e1225" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="e11694af-83d7-44c4-a1b8-823e74daedfd" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="9690b29c-3000-411f-8a6d-7a8f19aca44d" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="cb693f6f-5654-418a-bbb8-2ad191f2b62f" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="c7018acb-8c42-4d9e-95e1-260c006ec7b6" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null
log.info "storedClob == null : " + (storedClob == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="da74930b-e5a5-42ee-aa27-3f5527cff8c9" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a8657882-fd17-40eb-b09c-91937b24f380" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="7728e12e-f5ef-4777-8fe6-367a02227c29" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="6f361b46-2527-4aee-a731-fa286cb6d797" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="c74cbfe9-c794-4fec-89f8-74bbce543446" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="e0d377a4-54ec-4915-9cf9-510b85bc59b6" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="774502c6-867e-4187-89ed-f3c1c4483e05" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="332a3a38-c324-4256-812b-e23b723b2def" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob != null
log.info "storedClob != null : " + (storedClob != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="e6cbde18-5a52-438e-882a-cac9ead04bad" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>org.mariadb.jdbc.Driver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:mariadb://192.168.0.7:3306/megaware</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>mega</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value>mega</con:value>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>mariadb</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){
  
}

try{
sql.execute('''
CREATE TABLE qa_jdbc (
	workingName varchar(500) NOT NULL,
	blob_data BLOB,
	clob_data LONGTEXT,
	constraint qa_jdbc_pk primary key(workingName)
 )
''')
} catch (Exception e){
  
}
</con:setupScript>
  </con:testSuite>
  <con:testSuite id="25d41c3f-5075-430a-9771-af43d3555a20" name="Jdbc Altibase TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="7415e458-4144-4a5c-bd9e-cac8c803fbfd" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="115f5e29-e7f4-4535-8cdc-63fe765f32b6" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="cd2156a1-7a1d-4506-b56a-f87c9d34daac" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d144f14a-c448-419e-80b3-2b708585b4a5" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b7d252b3-f925-4724-b59b-efd989dd82fc" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="5e6fe0f1-63b2-4065-b447-cf0e10b9b5d4" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="cf1b0f81-3049-4bf7-9046-f27ffc3f205e" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="5639d86c-9dd1-42be-96a3-02f2f2c6277d" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a27430ad-6c27-4799-a2a1-3dd29b43acfb" keepSession="false" maxResults="0" name="insert_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="8d9e4711-9b48-4794-bf4a-36b782c36978" name="receive - insert_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="97a3b4c9-d903-4a52-939b-5ec72e3639c6" name="receive - insert_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="bf48959d-a4ec-40b3-855a-ab5d6078aea7" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="0ecab2db-82e1-4a9c-b2ce-de76a4e6737d" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="4ff2be1a-b452-40f3-ba26-f2ac10a66332" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="6e7188ee-b99f-4641-889d-b9ecdedeb9ab" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="945568e0-69e3-47d4-a97c-09b1916c0d86" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="87cc8952-88f0-4f73-849f-77311422083a" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="07b05634-b58a-412f-a9f7-0506d896d345" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="ff075c49-c5bd-477a-973f-8af29aee41be" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="3ab5d4e2-4f15-45e7-8e41-ab17fdae6698" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="168246ab-dff8-4234-8b95-96192369dee6" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="f6c8670a-488a-4829-99cf-92a847ebfbcd" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d8ccf5f1-8036-4514-ba15-c38924ed1f07" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="3779c945-06e0-40b7-858d-229b441e4747" keepSession="false" maxResults="0" name="update_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="c7e0e635-0374-4c57-bbc8-bfb8c8f0e862" name="receive - update_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="aa618590-e558-4583-b2fc-1aa056520c03" name="receive - update_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="ecdbf360-ffe3-4298-bd03-0243fb949de9" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="95182af6-9fe5-4ef2-8ece-b401f55e5250" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
Ys7eJVu3nL9vxK108+ygpGXVJSpxQb71q7QdFuKmslKRLqYnpHkTSMdaeulK4ukpz+GSENec2oqQ
kSUjy1pUnVIlISMhCg4HJDFlaWEF1hKSJdqWyezRJ1HfMpn8YrpzIKgmy0jaD5bSEdxSpWnVYEio
yJ6eBEOkVIjFip1eWpSSVNzSCmXQqCikj+yPb74mgqXPSWJhDY720kn4nWfhPUAiJILkZoWWUJCE
y7fEjQgCU/iIUFSKulC5Gcj4+z4y0iAQhSIT1n7gRIiek56g9IUFSE5So0Mpa9AekpfYIUBqmlRP
oAANNPb4y+iJBE/DNzJABPQgADp1B94MAbgwjXROvUADw/bKFAa/h0r0kD9H7Zw2AiJpUJ6ADSWm
umkh9BEAS7tI1MkgEzmJifXT2woCGigbWJEfL9Wn2CIogTyKZtAAA6AAe7SX0xINHGErStOqQQBN
PU6fCAHkoSBpPQdRr4DX3zMAS5pULUTKcj7PZIyl7oigNyqdJkdNCPAeGolr4RIIfkISJdvWfWXQ
fCIBDLTfUS08RIjwHwgDQtpGsvHU/wBHhAEZKABKQ+j2xIIwbSPDX7P3wBv7U+wfb9sAJAeA0gCT
eksynPqD4fYRrEAp5aTqPr+PugSbPKSPf4e/X29Igg2LaBTIp8estfoMuvshw2Al00TjhPYwtZn4
JPXqZw2Em4WmpGpp3PvE/dGgPj74UIIqbdVKOjCp+0plLw6n3RPgCJ/K6rUqZOngJEn9cxAG0UL0
5eQsf7Kv0MKA3m21SkmVM6evRBlp++BJCXbqlCZGncBJE/lJPs9+kASj1GluR7fGcinx06eP0RFA
Sj1EhYTMT1OktR8Drqf1waIKc5QNEESJSrRU/AmUiDLwlAmpb1fRAinEyEF1SXgUzJASotKE9B2u
Ae3QxDJqUAW5QL9M+2C60Q62psyQ+y5Mdw1mk6SUNQD00glXYQUa529T9O8mmdNLUKbWlp4Npe8t
wnRwtKIS4EkdDpDevEFPbpWk9iVyKhotYkCtRBHcfZPXpEUoSTdLRIafDrCgFAzDau1QCifvJJme
gPwhREHGW7GDWyvtF3q1h1y2GhVcKqkbR5jlHU0QW6p1DRIS/QvNBRWlU1NqmUkAyESjR1RKo9jK
5gTdOvH7ISJrFHSOJR1UT/FPf0VNIUmRnE02sjwOWW2/4su09g6pGs0kykD4iUVEFWttKpyrU8tB
+XRIKZAgSHcQkyEu3WIW8kvBLQAHsl010kf16xWQTbbXeQkAHprpoPiAIArlLRoEiUzl0mB111A9
sAVlDUh0n+mvxMAbgJCUAD+wwBoUhXWfsl4GANyaVxzVKVGR69vT6dIAmUULo1JTOANFUryeie7+
7r+qANiGHD/UKPb3CUARhSOeycAaikcV4JQB4k9fqmdIA3G3hX3nPcZD98ARU0LafEn4j9JwBG/D
o9g+r+mANv4Vr+yP1j9sAbSw2OrafqEAbRTNj/h/qPjAG1VO2eiAT7P3dJQBC/CIA1bmD7SZfbLW
ANho2SJBsp/uzH9EABSsj/hTl7ZmQ/QQBqKdkf8ADHw1I+omUARgloCXlpPxSJCU5S0nOANhbbOv
YmfwEvqgAW21CRQgj3pH7oA2ppGTOTSPiQDL4TnAG40TCpTQgy9qE/sgCI3R06fusoPhMpB+3ScA
R/wzUvuN/QhP26QBr+HR7B9X9MAbVU6T0H1aQBD8lHsP1wADKPYfpMAbwhI6ACAN0AJDr4wBBcp2
XRJxpCvYSkTHwPWAKLVWJtwTp1ltWp7VapJ/ZrAFvqtbqFEPJKCJ+BII6TB8QYiiBT3bcwpKkrBU
CTOY8PCR8PjEAtq4Wp4ltdK4lLjJmhSwVTQdHGl+K2l+/UETBg+aJ8C3KmmdcUS435K9QtCTNKVA
lRU2o9Ur9pH0RHGo8C0bi06y6W0ApccSVJX26IM5FevykpB0EH9YDABATM/LLtVP5gRPWfTuJ6w4
gkcpV34zfkTH8SxXpuatUzctdUhJHUheun2Qe1AtLb3+LY8ccJ+ZVDToAE0yR3vd6CoTPaFCcoin
vDgc0tBSSJ6k+wk+EvH3iK0RuLrt7aUAJAUDpMkSJVJBnOfzIUFaHTpELmCvMtFZIB09v7ukVArt
NTBIkNTpMylr7B1EAVtlkAAAe7Tx/QwBPBg+0D6P6ZQBs/C6/fAHw+zpAEB6kePlhlaJeajzC4SO
5gEeaUFIM3AnoDoYAqDVIhBmo9x+oQBNyloNBACAEAIAQAgBACAEAIAQAgBACAEAJA9ROANvan2f
s+yANC2k9Z/q/dAG3yUe/wCuANCynwJHu6wBvCAPf8YA3wAgBACAEAaEA9RAG3sEAbew+0S/T3aQ
Br2fpP8A+rAG3t1lOX1H9xgwbYA39h8SP0+qANi0BadU9CU66z6aicpzI9kAUaqtzT4ITJtYM5D7
pPvHvgC2H6JVOpSViRHTSc/emcpgxDBQK+jbWWllSkLSqSXG5JWmZExrNKkkDVKgQYiiJLJyGlFO
lp58JLKiUKqW0SbTM/KHkTKme4kCeqPeIgFp/hy33OLeaDc0yIJ+UKMkhZMkgq7tDDeCl5TS+djd
7QlZB/lFyUlQl3A/g3/mTMEGU/1xDQW8tva9BXj2PGYQfwLIUFHxDj2qfh4+6JVW6jgc0NjueA06
j4aSisgvFAPcylI/qJnKRmCkAnwlKI8QXLTNBKQNOo0lIEnxiQXBTM96u1P9XUn9U4ArKUhAkP8A
TAERKe73QBFAA0A6ft/0QBoUpAJ19pAJA+oGWsQ2oqr3A4A5S8hcW4q8et2uRGZ0NxumM7S4hX5Z
dLVaF0rd1uyaVTVPS2q2u1pTRtV1yrqlplouns71ifWKrS+a6RLUr0I7XuPN8fzZ/FNK2wrjPv73
rQSWxedvCylU1p7S8boApQcQRooiWvujNWDdcerh5FpZMJfCekfjLyDwnlRsJtVyF26dqFYbuxh9
ty20U1YadVxtf4xtSa6yXdNMVNN3eyXFl6kqUoJSHmFS0jEuJWnSW8vxk5bVuZzjWVdPRUlTW1dQ
1SUlJTvVVXVPrQ0zS01O2p6oqHnHPkbaZaQVKJ0AGsWVLrdIbyqWxVPLTl/5rTiJjOW5LjFBsJvp
k1FYcgvdkpcltlwwGnt1+prNcHqH+d26nrbs3WN0FxbYL9OHUJWtBGmojb29MvTh1Kn4e0w3lxjs
f4/0HcX6bvqObY+pVtFmO7O2OI5ZgtNhOe1OBXnHszes9Td265q0228sV7btlfqKQ0NZTXIJbmQ4
FNKmIwr9iViXTLfQyLV6E1XgYsepB64uxvpq7147snubtJujn17yTbm3bj011wmrxWnttPbrje73
Y2qB9u+19DUqrUv2NxZKO5BQR4zEX8TTruXH5kJe62UXcmNubj+U663PzcXEplxLbvGHkIApAcC0
3PAFgNlRSFS/m4PWMueiZEX8SLTzIU2fj/QXjgv5sTg9kVyp6TLtmeROD2x5Xaq9t2nDssFOg6+d
U2+3ZDQPhtMpHsKly6JUdDYnpl+CqyI5keNfw9iO/rjDzE48cycDTuTxv3Xx7cvGG32KK7ot4fob
9jFzcb8xNoyjG7jT0t8x64q1TKqp0NO9p8pagJnBu2bluSTVDLt3YXF1R2oyhaUVNpUSSTOZIAJk
SNQPunTp4RbKyJACAOtf1MfUs219Mfa3Bd1dzsDzTP7TnmbOYNQW3CX7LTV1FcEWWtvZrKt291FP
T/hCxRKSAk93eR8IuWrbuS6UUSmoqp0op/NzcTDIf+GDkAAeijeNviTr4hF1UkH2jqOnWNhHTLk9
qap5fpLf3iC3l147+bN4V3C4MsZFsDyOsFsdKA7daCmwDIFUoUoBbi6RGU21Kg2klUg6pSpSAnpF
FzTb0Hs2ofeIPYjvh4a88uMXPHB63PONm5tFm1FZX2aPKsdrKN+wZrhlwqEFdNR5TilxS3dLWqqQ
2pTLsnKZ6Sgh1RSUpw7tmVn495XCaluMos3yQYbheXZeaNVwGK4xfskNAh0MLrk2O1VdzVRoeUla
WV1IpewKKSElU5GLUaSpyZcexHj1o/zh+1lVS01V/wCAzdRsVLDL4Qd7MHUpAebS52KP+UkgqT3S
PhG4/dE/119DML74v1X9J6a+A3MGyc8+JG1HLHHcHvO29o3UZzJymwvIbpb73drIvDc/yrAKpFVd
LU01Q1ia2sxVdQ2ptCZNPJSodwMay/adi67TdWuPsMq3Prgp7qmYiCVJBIIJ1kSky9omnQyOkWis
3wB1F8v/AFyfTg4XX254VuLvb/nzcuzPpprxtnsnZ3dyspsz/mBt+mvtbQVFHhmPXGkn3O0Vfdqa
uSnUMkRk2cPIvLqhH3eb2ItTv24bG9p1iu/m2uDKb+uja2F5Nu44A35d/VZ8BbrlkuBLgNg/zmtS
PLb+Yf8AWT3HTTrGR+68qn2K+f6C197t8mdi3E718fTQ5dX21YZi+9NVtRuFfa4W6yYJv1Yl7bXK
9VjjlOxS01oyJ2ruuAXCuuFRUhFNRovH498g9rEhFi7hZNldU4+7zW1FyF+1PYnt8TuXBBAIIIIB
BBmCD0IPiDGKXjhLknvziXF7YPdvkPnlDe7nh2zmDX3Pcjt2N01NWX6ttdhpFVVRS2mmrKqhpXq1
4J7UBx5tEzqoCJinJqK3shtJVe483Lv5trhKhxSG9gOR7iEq7S4afb9M9AZhKctcMtfGU5aRnw06
9c2pqhZeRBbys2/82VwXqHGRW7HcmKVlQV566SyYFcnmVAns7WEZtThxChKZUtuXv6xM9MvwVapj
7xb8Tt64Leq3w09QwVds2A3AqRntpsbeQZDtZm9A3i24Vkt6qn8K4+bK/V1DN+o6VxSPOrbS/cLe
2XEpU+FntGJdsXbO2aomXIXIz3HZDFkrNqkzH6a+4/TAGiB4/UP29J6iANVE+H1+z4e/2QBDKj4a
fp0gCC4nQEj+nxEASVTTIqWylQHcPuq8QfAfCcAWTcaMntbUJFLkz4GYn+msUurJLMv6HE0ywJeX
MBS9CGySEpUsHRTaye0wYLKbpCuaXZAgyKUKWEhPdoexU0kK0mDMA9IiiC3FByZlw2S+MoX2Ts9z
HcdBMUT0kkTAIIM9SBB7gWvtcR/l/He6SpUDAVIn+EsrqCkT/tKQNfEAg+MNtRwOa6Y91QBpIH65
fvlFRBedIjvfQJfdbSZjXTT9fvgSXU0ntkfZr++JILlpm/LaHiVfN9fQQBMQBHAkAIAeJ/TT/SYA
K+6ZdZHwn+qIaTVHuB0E/mS9zxgPpcbjY81UBiq3c3H2t27aQhztdco2MmRnVy8qXzq/6phRSoD+
qvXQxn4FqlxJbYpfjMLLUOnftZ80Vdxeaq0VbehaX5jYcWVoIQ+ypIeQqSCEp+Ug6aH3xyWLrBxo
aZynalR7D3fflU+YCs72d3s4hZLXNpv21eQI3c28onHW21uYLnb4o8voaBpKlFmkseXMJqAlMx5t
zUrSccd1Cx79ZbF+FDd4txSVK1Z2i+vRzGTxD9PXc5Vku6bduVvsFbKbelp1KLgx/mxlxvNL3SNm
Til2DDVVZaUBJNQ+zP7wjH0zGUrlHzr+Yu5VyMbe17XsPl9Pv/xJqdeQlCx2SUtwNI7k+WhYIm8p
JQg6e+OW9crO5OhxyblOVNtGe1T8ofuYny+a2zjy+9zztq90qFkuSSEuNZJi10dYZn3IS7UJY75g
69uvSOP6n1Sak1xp+H0G3wIRpST/AA/BmFX5rwI//wBAdr+1JLn/AIXML+cLAR5X/MDc0FKwQQQS
R9cNMV3pUbb2Ioy4x+e6uj2HUf6YXpqZP6nu++X7HY1upZdpKrENq7luW7kl8xuvyqjq6e3ZLZLA
mz/grbX259t552+lzzTUEBtBISSAI2GTkzxmpSe2u4ot4/W9nwnKHqU+jvyO9Lt7CLrubkWIbmbZ
59cK+1YtuZgjVzoLYq/UVN+Mcx6/WK8pVX2C4/yz+IwPOqKerShxaF96XEhZ1CORse8i/juCfI19
GHl9m3EPn3sXf7JeK6kw3dHN8a2h3YsKHVOWzJ8Mzm8U1nC66kADTtzxy5PsV1A8SFNOsFM+1RER
nWYTtOS3rcUY0/lypU+qa2T2GZKlJ7kzIkSUkpnL3kRxiPV1vq3G6h48yMIqKjYuchKfXw+mGziV
R/IeUT8202HOGHHufUciHCmfvwDJNR9UZ+nqMr1Pw3mBmdSinGvH8h4ZOK3Hu7cp+R+yvHSz5FTY
nc96dysa25osnuNG9cqCxVGT3AUTd4qqGnWmoq2qFau9bSHGioD6Y3+VkLHt1W5IxLVt3UubO1b1
O/Qy5E+mTtzY95Mi3Pwfenai/ZPS4fWZLidqv2N3jEMiudG/WWanvtiutRc3HKG7ilqPLqKWocSH
Wm0qba7u44WNnxvyo95Xcx5W49XFLxIn5e/fDNNnPVC4/wBkxu41rdj3prr/ALR55aWKgCjvVivd
iu92t6q5CQpuqexzJaFitp3D8yOxSf66oo1CMZRba3FeJOTfvbD6VO9BV/yS3cPaQr/ldn6+2cyF
KxW8KKR0mArQe6NHCKjNRW6v5TYvcz4wdpn/ACu2z6/gKSc+oPkNzB+BjmJpT6kP5d9RT6OvENQI
mGt7h4af/wAjt3E/DQRxjO/93Pz/ACI2uP8A3MfI7sEgASAkATIe6ZjDLx4k/wAxF62m4uNbgZX6
f/ETNKzCmcXZRa+Se8GJ3NdLlNXfK6lQ/UbN4beKMpqMepbTR1CBkddTuJrHKhZtyFNJarA9t9Pw
ozXz7yrHgufizCyb7T+XD2v8h41cFwLN9z8vsmA7b4hk2f51ldxFFYcUxO0XDIslv1yqnO5aaS3W
9mprat5xxwrdcIIEypahqY3UpQtx6ptKKMJJydFtZ220v5fn1bKvFf8ANiOJ90ZY/DCrTYavPttq
XLVNFHmdn+XnsrTVoqe3/gqKXgr5e2ekYL1PEUumsvOjoX/ut6laL6TqZ3G22z3abM8h213VwnJd
vs8xWtVbskw3M7LW2HILPWIMw3W2y4ssvoS4B3NuAFtxMlIURrGbCcLkeuDTiyxKLi+mWxnrl/Lw
+tjn9o3G2/8AT85W5bccywfNXKTD+Nu5uRVf43IcHyhLbgse1GT3epKrhfMWyTtFJY6moceqbdW+
TRkmldbNNqdQwoqLyLKpzX5V+X6TMx77r8ue7geon1gk9/pec8UynPjNuafqsVQf1SjVWdt2KfMy
r1flSptdD5Jz1O557/Z3HsKliR0PYXiGiCHAEkdPl9wIjljnGxYquRqLaldbUt6Z6SeTn5bTkxxx
4rXHlTi29+3e8GPYptzbtycxwGgx2/Ytl1qxZ610t3u9xs1VXXC52m+qxygqlLcbApHVhCljv+5G
rt6lGd3oe4yHiyS6n+NnUr6em92c8feaPGLdnALm9RZFZt4sEt6gy66GbjYsqyBjEcjsVcCG6h20
XuwXl6lqGFpR3BKZSKRLIzVG5adeRbxpz+ZR7qn19I40bcQAgDQDx6z8f3e6ANJJB7un6fbAGxzt
KevSfTWAJcEAGQn7SZfDQe+AKTcKfuQXUiagD3JlOYA1I94iAWBdmWXGHEODuS6ChaSNCmXzJI0m
CIhgsYss06lIJcWlAAHcQpSEp666KcB6ic1DX3QJLfyVttdnunlHVdsrQlSgFpANM6mah1kR1iNu
4bjj/apltFhsJDbYVUMtl1QTJTjjTVQlLjhH3lhptKQf7IEQnV04VBzbRNhT59yQqfsJnP6ZxX4k
F9W9PzgH+w30nKQA+j4xILmbTNSR4Aj7ftgC5UiQA9gA+oQBGSiWp6+z2QBvgBAGivuql7D9kRL4
X5A8b35uHdZFBt1xC2bpaxxupvmX7j7lXKj8z5HqTGrLZ8YtrrjAVMhqsvr8idAVGWsbjTFtb47F
+X8prM3clwrX8n5DxPYBtHuFu+jcqswDH377T7R7Z3vePOk0YV3WfAcXudktt+va0JSvzW7e9fmX
Fp0PkpcV/UkdurvRPp5mNctfMh1LgjPH0jeYLvCnntx/3irK5bGE12Vs7abndix5b23e5TlPj14c
fHclLlNYbhVUlyQF6Nu0QV3AGMbMtfOjs3lGNe+VPbuOyL8zlzLp9/8AnDR7CYhfU1u3/FPHabF3
jb6lD9ruG5+ZUlBkOaXBpSFFha7PaqmitS1alLtK9LSRVZ0+1K3HqmqSe0rzLilKi4HnxuO1G4Fo
2kxjfatsVS1tdmW4GU7aYzkjyiKe75nhFptF8ye20zZaBcbtdvv1KVuglJW6EjUGWx+apS6C2oNW
6noQ/Ku7oqxT1Ir5grlSW6TdnYHcCzoZSflqrritzx/M6JK0qAmqnt1trVpkFSHdp4xrtSVba8zJ
w/j9pev5sJwo9QPagFam0OcWcQ0CFTHbuJuMSNJASEUaQ6JMp1BUvN+RiR+Xz5ycbeCfMHdHdHk5
nD+BYPkOwF5wq1Xmnx+/5KarI6jNMTu1PQqoMdoLlWoD9FbXClXYQVAAyBJFzVLErz64cC5iX4xj
0mWnr2etVsH6gWCbXcfeL9qyy8YFhmbVG4OX7i5ljxxhF8vlNaK+xWG04lYqiodujlup6a6VD1TV
1DbJU4tCEtAJKjiYVmUZ1mTfvRuRojqj9J3jlmXJ3n9xj26xW2VFUxbN0MV3GzKvpmnHG8cwLb29
23JMovtfIBumbbYo00zRWR5lTUIbSSpUbHNuwha917aFrHs/Mn1cj6ybagoFY6KJ7feASAdfBXWO
NG5exeJFiAaHw+MUT3EHlC/NuOdvC/j0kGSlciFBM9OmA5HP/ejM07+99payPgZ4aOKPISv4s8k9
j+RlrxmnzG4bLblYzuPSYvcLiu1UeQO41XC4ItS7kzS19VQJqi0UlTbS1a9DHIMmEbtro40NNZuy
heouZ2t+qB67G+vqYbc4pszX7WYZsztXZclp82uWNY3eLxk+Q5HlNrpayhsZumQ3Ji3IbtlqFzqH
kMMULXctYCl/LOMDGxVZfXtqZF+/OSo1sZlz+WR4h4tuby6oeTOZbm7Z2xvYxm9rwLaVWY2FvdLM
s+vFlrbOMhThX41u70eJ41b7jV1AqSyr8RVOpCJobUoWsu5Ojqm2XrCq/I99W8y+7ZTd1YCj/wDK
/PiCoarIxW8ay6GfXSYM9CRrGsi/eT8TYPcfGFtRna7cfbQ0p+E2EGX0RzE0p9SP8vE0tPo7cQUF
PapVPvU4AT1S5yL3adSv3d6FA/THF851y5+f5DbY+yzHyO1jfbcdjZ3ZLd/dmpeo6dnbTbLOs8U7
ce40KVYpjFzvjQrA2tC1U6naJKVhKkkpMgR1jFiuqSjzZck6Jvkj41+UZhkW4eT5LuDl9c/c8szz
Ib1meTXCpdeffrL/AJRcqm93Z5b1S49ULCq6uX2961qCQASZTjmEYqEVBbkqfQaVtt1e9n0NfyxX
Bjb7ZvhZaOXN3x633HerktW3+4UeU11Ew7dMX2rsF8uGNY/i9hqXWlP26lvVZaam5VqmlJ/Fl9lK
5hlMce1G9K5fdv7Ednt4s2WNbUYKf2menGNeZJ5kPzOXBXAt6eF945c2bHqCh3r4y1NiuNZlFFSN
NXPJtpr5e6LH8jxi9vtNh65U1jrbsxc6JTqiKTyHwmQeVGdp2RK1kq39ibo/Pg/yGPkwUrfV9pHz
urVfr3il1tOVYzWvW3JcWuluyXHbjTrKH6C/WGsZutnrGlAghVPcKRtUuhAkdDHJHFSTi9zVDWbt
q3n1Ked+6tLvZ6Gu/wDvNTVYrWd0uBldnf4sMJpUvv5bttRXZ90UyUoRThVVXK+RICU9AJRxKMem
/wBL4S/EzcVrb6uaPlbOvqS46CCpSlKSJqQGwoqSR5nmBSU9yXJd/aSkTlHJ9krPQ+KNFO44Xtm6
p6VeUn5lPkByH4nXfiviGxeBbPWzLcCtu12a5qjJr3mOSXTEW7RSWe8osNNVW+wW6x1F8oKUtLWp
FYpDbx7Se2Z1dvBUbrm+bMy5kT6Nxhh6K/D+zcv+c+09ozDcXANvcL2xy7EtzcrtWVZZarHme4FH
jd9auVnwXbeyV1RS3DKbzdK63MNVzzIIttA44+pKnfKZcqzLk4wpTwGMuuSq/wAKn1To0ptBAG1Q
nIe+f6jAG6ANCJgiAJdwFI18dB+2AIEAOsAWdebaA73pJCHATLwCvGQnIRALEuNsm4FoUAZaiWqp
TkPZOZiCSyry2DR17b7cu6lqQohfllafIcCgTIokoeMvGIoDjPbULRYsZ8tQWkU6C588wggPoSdA
ADJz/alELayeBzpQf4qlSHiD/uz+MVlJftvA75gEfwkEKl8sj7Cep+yHEcC6KVE1pn/e+rp4++JB
XWvm1Ph+v2QBHgBACANqvuq+B+yIltixWm0+eH+al3OVmfPrEMAZeD9HtFsJittdBUkN0d2zm73f
Lq1v/VcqbYq3rV4y7B7I5BpdpfL6q7TUZUuqdC//AMqXsJju6+6PO+7ZpZ2bvhtdx6sGyV2o6ltD
iKq37p3i9LyehdbWFICamzWFA8ZpV7QItahOUL0XHf8Am4GVjpO209x52OaXGXJOIXKPe3jpkrT7
dVtNnt8x6zVrqHUC8YuuqNXh98pu7y3VUl3x5+iqe7XvQs6giM/FvrJVGqVNVkWuie/bU4JtVpyX
PcwpbVa3bpl+X5leqC221D7lVXXzJMnvtXS22kZecqFP1dXVXavqktpcWTomZ0i7KShF7CiScmke
yD1vOBti4i+ilwe2zs1LTquWwu7FmpM3ubDPY9ds73WwrKrxnl2U6jum3U5RbVso7ie1ttluckgR
pLGVJ5jlTY1/s/GbS7aVvES41X1nQL6JW5adpvVP4W5Mp/8ADU9w3ZVt9cHnXi0hNHuZjd+27eD5
Gimw/kQIB0JQOnhsM6CnY6vAxcS5+0p4nZz+bKSU8/8AaRxYCgji5igUNZKI3D3EBMwdB88Y+lqs
UlzZczo9Vz6DzybEcVd1uS6N6anaG0pvtdsZs7dN88usVOlb94q8Dx2/WWxZD/l9pKXHa2usLGQi
rfp5EuU9M4UTIlGdfyVbmouKaZZsY/VFupxLi4sSLxY1ZAzV1+PC62x68U1kqmKe6P2Q11Oquasl
TUIet6LvV29D34dRT5aXAkr/AIZUClS5DqgqFLVJ9J9Tj0h+L/p87Q8asU3Y4HWj+a47vTj9LWX7
dDKbijIN171UUTrn8yxPMrwumpk2esxa8B1h+00tPSU7T7fcEKAQs8fyLl3r6J8H+DNvi24Qt1i6
1O21K3GkIaCPMUlGpSAkql2gKSgHtksn2iXWUox1FLbUvSlVkfzfmA7ZAmXcTp0Al0kVd5A0JiGm
iFOvkResUbZbHsKzydfm3EJc4b8cCsKIHIp0yT0/+Ab/ANfGWkbDToftqFnKfTA8TfCTYPHeTvLX
jhx4yi6XXHca3n3dw3bu+XqxClVerVbMnuzFvqK62IrW3KJVfToWVNqeQsay6CNnmOVpucXVGoxk
p3avmevjf78pXs3TbdZPeNgOTe6TO4WPWS63nHbDuXYcXvOLZHX0VIuqp7PcK6y09putoRcEsKQ3
UtNvhtyRUgjSNdDULnWl07KmzuYkJRrXgeJrHMkzDbXMLZkWMX+9YdneD5IK+05HjtydtN/x3I7P
XKKqq33W3hqrRcWLjTKktMgruCSCgrSdi4xvxcnsMH5jtSSiqo+rjxQ31zDkz6Vm2++u4KWDnW43
FC7XnMHqVAbp6/JKfDbzarzdWWkkpaReK+3rquwEhHndoMhGkuQULzgtyZtYScrak9jaPkqWr/uy
3/8AYqX/ANAiOWrcvI073n1KPy8Tgc9Hvh72pPaKLehtU56KZ5DbstLPzdQtSZj3e6OMZ3/u5+f5
EbWxtsx8jsi5c7aneTivyP2nQzVVLu42x26WG09NQpWusqKvIMKvVto2KVtshxx92qqEJSkaqJkI
xoPpmpcmmXJKsWvA+OGmnrKOdFcaZ2juVEtdFcaN9tTT9HcKNaqauo6hpYC2n6WraW2tBAKVJIOo
jmNU9q3M0x9Of8uZyMxTfP0v9l8PtNxo3Mv47OXvZnOrK25Tprra5bLvX3nE69+kbV5rdHe8UutM
pl5SQHnWXgCVIXHGM+Dt5Uq7pOq9ptMafVaS5He5GGXzog/MZ8lcN2J9MbePB7tdqVrOOR38p2ew
Gw+dT/zK5mvu9tu+YXRqjcV57lsseK26o/EPoSUsvVDCSQpxMZeDbdzJjRbIur9n6SxkTUbTT3vY
fMXeTULacbpGHKqrdSWqSlZQpx6qq3f4dNTMtoBW49UPqShCQCVKUANY5RWm17jVn1CuXu2J2c/L
+bq7TOrrHHdvfTwoMRqVVrXkVv4qx7X2iiqk1LJSgtPIqWVBSSAUkSMjHFIvrya85flNu102qcon
y8yy2FPFDcj3gjuJE+1CQrUSUQQvoT2zAJBje5EZRgpRe5GjdJX6Pme7KyflPeLOcbS4jfbHye35
xnKMrwjGsiFZW2PB8gs1Lc7zZKK8PJ/k4pLU+/Rs1FZ/hJqg55WiVE6xqHn3E+np3G3+7RnDa9h4
4+VXHjM+HHJjd7jrlt4pLjluy+b1WN/5jx9T1DT14tyaeux/I7O84lq4WpqrtdW1UMo7vNZcXOek
42MJrJhtVNhgz/YOkdtD6FP5cLm9uRzF4N3Wy7y5Rcc23N477gO7W1mYXlyprb7kuFVFhtl9wa45
LeKypeqr3kjFM/V0b9U4lDj1PS063O95Tji9TlWo2p0juaNhYuO5CrVGegqMYviAEAIAgqUFAae2
f2QBLqT2/TAG2AJG4NhdOT4oIUPb4ggfGALFubST2qT11Bl7h7Os4gksq+0CKm1XBtQBH4KrEyAC
P4Dmk9ZicQ0ht3nAu1S0uWDH0p7VKXTBImSlKlIXUOJnKfaT8wB8JRQn7xPAyGoGx3yHioGR9g1l
PpoR1ivf5FJftICVJSdB5KZSOukuv0iXwiQXJSmS+32pl9UokFcbT2pHtP8ATAESAEAIAhukhBlO
Z00lPXTSek5xK3kPaj5WHrW7lr3i9TLmHkSXRVUtn3br8AtoS5Nt6h2xtVpwOlDR7ewNOf5cUuUp
/PHJ8CLjj+NDTZNOvZu2nqA/KU7YNWLiXyW3RVSkPZ/vxbMWarFtpK6il2+wu21C+xwJAUyKvLlm
UuvulGm1G4vmKpsMRVg1wMTPzXfD5VszHZHmxjNrCbblVuXsdupUsNz8m/WRFTf9ur3VOdqgHbnY
k3C3lZ+YikaT1CZZOl3fe6WYuXBP3kjrm/LacLVck+e1s3Uyazmr224oWqj3Suqqqm7rdXbj3FL9
s21sQckG11NBcUVN2cQPllQpSQQpQN/ULrtxaW9lGFb+ZKr4M9bn5iDbpOcek/yFeYYLtXgly213
CZkguqQbJn1mpK2okuYBbt95qFLMjMEz6xqMOXVfrwoZuYqWaeKPms7IZfWbY707Tbh0r66ZzBd1
dusuQ+yrVk4/lVqujylLUFTDP4Z2ZM9TIxv8r+4fkarE/vfaejD81fWUl+5ybG3WmJXRXbihhtxa
WkKVOmrc+zqpYUSmWhaeH1xiaVs+l/kMvM+P6CS/KhUVNU+oDvLSVdKiqpKnifmFPU01WyhymqmK
ncLbxp9iop3AWX2X2ZpUlYKSlRHiYo1N02+JXhr8TMVfXj9M1/gDypr8o25s1TScbd/a66ZvtY5S
svLtuIXv+FUZltgt9HcinNjrqv8AE2xBIKrW8hAmWVSv6fd+bCnExsyLtzXJl3eg96uVfwE3yTtD
u7c6pzinvZf7dS5ampU+qm2ozaoLFFat07cgntbta0oZpL6ykEvUYbfSO+mkudRxU0prY6F7FvPq
6XuZ3kfmePUA3t2OxXjvx72Azu74NjO/eKZVuTme4uCXVdBdspxWxVtltlkxiwZTa3A9TWu4i6fj
33KR9tVS0loFSm1lCsDBtfNm09xk5snbt1R51fSL9RXlBxu5o7I26y7kbg5dt3ufuph+3+5+2OQ5
Le8psWTWHMr/AG+y1NfR2q81dwFuy+0ruSKqirKdSVFaOxZUgqSb+TixjF03GJjX3KSXFn1HGlOF
RCymQ7kgTClHsWUhSu0JCe9IBlLQmNM1xNvwPKJ+bcSTwu47rAUSjkSs/L78AyOX6xGx0/8Av/w5
mPmfCeGXi/yAvXF7kRsxyIsGO0GVXjZXcrFNxLbjt3qKmjtl8q8XuDNwbtdbU0wRVMU9WUBBWyHF
CfgdI22bBSizVYnuz6uB6Ft/fzUnNbdzb/IcA282a2d2PqcttF0s1ZmVlqsky/LrbRXaiqKGtesD
uRqpLFa7mGapfZULZqXGdFNI7wI1lnFTab20NhdvNe6uJ5mbVj9/ye9W21WShvN9yC/3Sntttt1r
pam4X6+3e5VXY01QU9M1UVNVc66qf/hBKFqccPT5iY2MvctvyMVQ6pI+r/xG2by3j56UG1WzWd0H
8pzfAuIVVasttHela7RklRgd0ul4tLygpaTUWyvr1sOakd7Z8I4/Np3m+HUbRLphRcj5Ldp/7rt3
/YaT/wBAiOXGmO8biN6/vPbhVx92/wCM+zdJsHUbabaIyRvGlZrtrfr7koRlWX37NroLjd7bn1hp
qwpvWR1IZP4ZBQx2IPcU9xwbun2L1x3JOXU/H9Bfhk3IRUVSiO6j0oPzBfOzmVz+2D407123j1Tb
Z7pVOf0V/qMS29yfH8npncd2szfL7J/JrvW7iXihZfqcgsFK24l2jfDjCloSELUFjCytPs2LErsH
LqVN9OZkWcidy4oySozqz/MHel/lPCzlLlPIDb3FHlcWeR+UV2XWG6WWgcVaNrtyr6tFbl+3WQmk
pGqKx0l2v779wsCz2sv0lQaUKL9MouZOnZSu21Zk/wBpFfSv0FnJtOEutfA/qOqrhjzr5M8BN0Fb
rcadwH8Su1xYpaDLcauFM3ecHz6zUj5fas2ZY1VKFNcqdpa1+S+2pmtpStSmHm1EmMq/jWsmPTcW
1bmt6LMLkrbrE9FVR+bv5NLxH8BTcRtkmM4NH5ByR3Ns2fxsVvk9huCMXFO1cOwPfP8AhzcpS+Xz
PGNd+6Nu257vlt/GZP3x0+FVPOJzB5r8kOd26z+8PJXcKszXJW6d23Y7aadhu04fg9jce8/+QYXj
NKfwNktvmSU4oeZU1Lg8x911z5o2VjHtY8Om2vN8X5mNcuSuOsjtv/L/AHpR5nzY5G4hyO3LxOpo
+JGwWYUWS3S8Xuj8q2bwbkYy+i445tzjDVWw41frRaL2yxWZFUoSaenp2RR+YKmpHlYmoZcbVt2o
P9rJfQvz8i9j2nOXW/gX1nuF9YRHf6XHPJMif/4y7oKknrNFgqFgj4FMaOx/fR8zPuf3b8j5J7j7
iVuoQklXlu9pVolJKihCiSW0EBaUz+cKl0SY5Pej1WVXkaOK/b1XM9WTf5r/AJW2bbOwYPg/GPYv
H7jYcSsmJ23Kr5es3yVxP8ntVPa6e6GxJdtdvcfW3ThwNuVAZDhkqaBGljiqc/CptZXumOw81W9O
6+4fILdPcLevdW/1GQ7ibk5Ncswy++1LNMymru93WStpimokNUdNR0qe1pplkJbZYQltHypEbS3D
5cDCkuvfzPog/lmuHW4nF/gtf863Usl0xbLeS24X/My24vemHqW82zb622KjseE1l6oqlmnq6C43
9v8AF1rbLqErTbnqRSkoUtSE6LKuKdzZuRsrMOiCXE9GkYxdEAIAQBASAdNfo/pgDeWwQR7f1dJe
PhAEoRIygCUrTKle/uH3frgCx3x3zEjpID9v1xHmC3LokIpKoHoad/QicwWlmURwJMPdgLiLnhmF
3YKQXamn/DV4QQQ3VUdTcWHAuR+VxPsOslD2iKdqmTXYZcUJ/iAzMtZEGcppMvZ1MVkF+0U59w1B
aQPgZ66+MpxJBXmTJxuXQqSPoOn2GALkgBACAEAbHJ9ugmQZgfCZHgehhuB5x8+/LL8F9yc3zHP8
m3H5LKyPOMoyDML4/TZjhf4dd1yO6VF1uLjTbuAvrSg1FSoIStbi0gDUxmrPktipTzMX7rHiduHB
PhJtP6fuwtFx32YrcrueG0OUZJl6rnmtfRXLIq69ZS/Tv3J2trLdbrVRuIQmlaQ0EMp7UICfARjX
bvzpdWzcXrcPlx6VzLh5i8TNrebOxOZcd94qa8f5KzJdmqnLpjj9NSZFYLtYbnSXW0XzHq2rpK+l
pLtR1NKUd7jLifw7riCPmihNraiuie84h9Pj05tivTg26y7bfYxzLbtS55maszyrJ87q7ZcMmuda
3b2rXbLc9VWm1WqlNos1EwoUzfZNDjy1E/MZ3rt35iVd6XmEktyoZJ8mNhsP5Q7Dbqces/eu9Lhm
72H3TCshrbA7TsXugobo2kfzC1P1dLW0rNwoXm0utKcaWnvQNCZRiK58u51IicOuPS9x55aj8qRw
MfaeaG7XJtlLqHEK8vIsDJT5qCSEFGCtgqanovtBJ8ZxtZ6hKVnpoumn4fhUx/usVtMyuanoTcZe
dOT7V5jupuRvZZr5tPs5iWy1kexe6Yswm6Y/iCq9yhu97buuO3Iv3yrcuLheW2Wk9xn2iMWxmO3t
jTeVSxlLbJlyent6I/Gn04d5Mh3t2bzrd7JspyXAa3buuo8/uuO11lZs1yvlnyCqqWmLZYbZVmvT
UWRhKVl1TYAIlqYm/lu+qMmFhQkpLgZvc3OFezHPbYe9bBb4W64rxu5XW2321ZBYXKKmy7Db/a3y
umvuK3Oro7hTUdeaVx6mdC2XEu0tQ4hSTMEW7N6WO+pMqvQVxUZ0Uq/KhcCXFK8rdrk4yPL8pSH7
/g7yJAM9yUpThTTckqaB0EiklKSdYy7mpzuU3bCzZtdFXtrXkZh73ehPsDvlw52v4jZluxvBkFRs
RU3h7YXfDKFY3kG4+29luzbLS8DqiLZaKLKcFYYYQhmiq5OsoZaCXgWm4tRzXCXVGiqXpQ6lRqvs
Md/Tu/Le7IcMt8ca5B7lbu3zf3Ndvrq1edtrA7h1JheH41kNLIW7Krm0LpfLnkV3tQQHKJCnaVin
qEpdWl1UhFd7UHfj0LYjHtWFCVabnsPSymU5AS0Op6+E4wHGrrUzuB15+o36cW0HqV7YYbtRvLlG
fYrj+E5r/ni3Vm31VZqS5VNzNkuNj/C1a71a7tTmjFPcFLIS2D3AaxkWcl4z6lvLc4daozpw/wD+
TTgfJRTvPyZTMkjvvuBrOpJMh/kzuAJ6AykJDSL89RlcfU6Fn7rHmTFJ+VB4HUr6HKvdzkvcKUOB
xyjbvuB0bjwRKQXWIwp1aT4ApQVJ8EmCznVJUJjjxUuredpPD30ceA3CC802ZbN7Lt3XcugAXQbn
bnXN3cDN7UpIWhDtgrrlTNWjGqodwV326hplCXt1i3cvTmqOVUX+mK3JHZPkuO02WYrk2J1ztRTU
GU2G749Vv0/amppqW9Wt+21TtP5iChLyG6kqQVA/PqoeEYnV0yqyo8q7f5RLhnS0TVJScmeTU2Gg
01UVv/LeqdkFSb8xNPh9E2vsaknRKTpMkmcbGOp5ajRuLfNr81EW52MWUqqDj4KTp9dX9ZCqfyjP
EJbRTScoORNO9IAO1FDt9VICwmSleUmw0pKVK1A7tBpMxX+9MnlD6H+co+6WeUvp/QZR8Fvy43G/
glyf2x5TYhv/AL7bjZdtgvJ3LPjeX0e31NjFTVZVheRYVU1Fa3ZcZo7qluko8ldeaCHiUvNtkqkF
TsXM3IuwlbuOsJeC2ba7KJfXUufJsxalCHTJeL/LU79dxtt8D3jwjKNsd1cLx3Ptu8ztlRZcpw3L
bTR3zH7/AGiqRJyjuNurmXad3teQlxCh87TiELQpKwlQxYylFqUXSSJaTVHuPJty2/KW7R5vkt2y
3h3yCuuyNJdrgqrTtbufYarcbCrGiodrH6mmxzJ6K6WzMqS3U5Wy1S01abi400lXfUOGQGztardi
um6lLx3MxZ4kG6wdDrit/wCUq531GTv2u47+8ZLbi7bj6WMtZe3FuVXUtNqIYcOKjGKFxhdSkTKD
Xq8ucipXWMj9726fBKvmi19zn+sqHaRw/wDynvHvbW92jMOX+9GQciay2Pt1Z2zwy0u7abY1tTTV
gdYav9eLjc82yC1P0yQl+lbqraFr0UtTZU2rGu6pemqW0ornvZehiQi6ydT1XYJgWE7XYdju3u2+
JY7gmC4ja6ey4viGJWegsGOWC00oIYoLTZ7YxTUNDTIKie1tABUoqM1Ek61tydZOrZkpJKi3Flcg
9j8N5LbH7qcf9w375TYNvBg9/wAAyuoxmup7ZkDNjyOhdt9e7ZrhV0NypqO4oZdJaccp3kJVIlCh
pEwk4SU1vTDSao9x56z+VA9OLvKk7i8rBMzkdxMBUPqG1iUg/ACcZstQvzS6qbCx92t1qbm/yonp
ztmadxuU5GgIVn+AGaJkqb7v+VoWELnrIgkRb++XeSH3aHiZrcZPQL9Nfi7kdqzXHNornuRmtkeN
Task3kyFzO12yrS9T1FLX2uxv0lFjNrudA7TAs1bFE3VgKUlTqkKKYtzybs9jewvKMUqUR3LUtLT
UNOzSUbDVNS06A0xTsoS2002nRKG0JASlKR0A6RYKiYgBACANi5y+2ANjSAgEiclGeupPX6oAjQB
KupPdp4/6YAkKtPcw4CNJSI905EawBaj7ISrxEx9E/bOALbu9OTTPol3hTDwIl1m2oCWpEQ9wOvr
iYe7A6JolWmV5OoakAdq6fy0p8DPUkdfbFD+IngZ1WZU1lJE9RKKyC/qQFKlJKiUFKD/AHTJMwPA
Q4guKgT31CZ9E/OdNCQQB8JkxILjgBACAEAIDaaSinoiNprEpJbgIba+AESBEdMeQEKIHFu8u9e1
PHrby/br7051ju3G3mNIpjd8oyatFHQM1FfVM0FsttK2hD1Zc7xd7hUN09HRUrT1XV1DiWmW3HFB
JlQUn002EN0OJOPHNTjzyjyHPMO2kybJXs020o8Yu2ZYVne2u4+1GX23Hs2buDmI5VT45udiuJXW
8Ynkf8pqkUlzomqiicdp3G/MDiFJEu30cqERkp7qmVsh7IgqNNOn7P29IjpjyQNYUXIGCPKr1GuM
3EXKbHtvnd1zXPd58lsddlVl2L2OwO/7ubvPYfa0OuXPM7liGK09Q7jeH0IZUF3K5u0dKpQKULWo
EAkluQONeS3qI2DEPT9xnmJxxtdPuRf+QFo20snFfFsjbes7eabkb41tBZ9t7bkNIh0VdHSW+quK
qy6MoX5iKaifSFAgKEg5p9PHe/cjkfwu4/71bwHGF7oZxiFXUZ07hlvqrVidRklnyS945cqrHrdW
1lxq6S1VT1n8xpC33FBKusRv2MGZ8OlckBCi5ARIMMuZ29++ezeAv1Ww22FkyvITjeZZVftxdw7i
/a9otp8Zwq0C73K85em1upyTJL1dGps2m0W8Nrq30qU8+wy2pRiie8GP2zPKjlHt7uXsbtfzNx/Z
+9Y7yipyxsJvjsgnJsdpqjNmsJqNwKjbLc7a3MK29XXHLy/jdurX6G62+5Vtvf8AwhaeQw6pM5B2
myHsH1CAEgOgEAawAgBACAEAIAQAgBACAEAIAQAgB0gBAEJfUH3fp9sASlTLyV6eGnu1EAW4+gyn
Ofv9v64At64k+Q9oNGnSJgnokkafARDJR15cWHWkYVj9IlpKHk3TJC92qR3uVC7xVtvKebSSUrbZ
8tIUrUp0lIAmh/GStxm/aG5rJ/1h9Ps10nKcV+JSX6yEh2fQ+WlM5mUgASZdATMCfsiQXLaPvufA
D6CdYAuCAEAIAQAgBACAEAIAQAgDzm81+fvF+/epfwx2TrK/M99xsNRcg93HNjtmdr853Ry7IuTO
LUuO7ebbWtdhtlqRY3bjglDk1+uTFZWPt2+01qG6p+ppyhpwZELb6G3RV58uZbk9vkY+bC+oFvJg
nrcVuzHJnh9dsZ5G868G2ttm2ztl3dxS+Y/xs4ebc43vFm2J4duIxaqKtave9VyzC05Nfb/TUlSu
ma/mFOzSvrYY73LkrUflVi6xXGm/8NxbtTbuSU9j2bPw/CvA7EeVXq1p2q5CbwcE9kdq3dyOclFi
mxNfx625rKutuNk3IuO9VTfxkGUZg1jtN+MwbbPYWw2I3jKbnVVTYVRvMop5uvNpVZha69tfdSqy
/XbQ7l7aa7+X0IuiqVy5ijpRcXKFDqKFyv8AJQKtdEl8qeFIqoCi2Fkq7CJkmLPGhJY28O4tu2f2
k3R3au7C6q1bX7d5ruHc6VohLtTQYXjdyySrpmlHQOP09tUhPvMAeaq2ZRbOI/oZ8o/Um3VrKK6c
xeduwmQbuZvn9aFP5Jec85DWZ+ybA7I4lUu+dX0WH7b2rKrXbLVa6WTLJp36kIK1KVAHH3qWW7K+
FXpFekTYcMtAv+TbQZvxV2ysFhLlMz/MNzch495VgeFPOB9xtC1W3Orw3VLdn3pLRc+9AHIG++/e
+2yOS8H/AEJ+DG7mMbGbyWPjhbc35bct77arbldNx02kwLCxectu2OW+/utWCp3CziuYqq9p6vV5
VJS1LLp7A8XmQOOuGfrRZpY+HPL7Grzu+7yz3h2g3oyfjdwN3AyCz0Fo345nZRV469frbuHkW09g
DyLXt5iVReGK43oJTRu41SF6pfD2qwMYdpOYfqrZn6X21fqs7tc0LpZrnje/mz20m22x+A4Dg1t2
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="ba01db1a-2476-4e50-b028-0330772c66a0" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="96827f81-f5d2-4f3f-a0f0-a677b0ede803" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="541a4170-081d-4532-ac33-05c6195d36ae" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="66ab94ef-e1b2-43dd-913a-75205e194bd8" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d97719b1-18ca-4486-9736-60e01606bf76" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="e8e03a47-3311-4225-a3a1-58edc777e839" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a7df39a5-32df-4251-ae12-f457fe6692ba" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="7bc4a53b-93a1-4941-a3ae-3c85c47ad212" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>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
FFNlKUB//9k=</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="723af400-d60f-430e-a4cf-4efc1743785d" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="e7a7d51f-a0d7-445d-82ad-bf3d3ccb88f8" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="6bd5e464-b47c-4872-927d-d1384d91e0ad" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="d7735d67-bfdb-4804-89f9-6863a0e59cdb" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="aef82e47-5bd0-46ce-8508-970024fd0711" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null
log.info "storedClob == null : " + (storedClob == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="242cf7ad-0959-4686-8fcd-0884c2945ee6" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="e197d786-a90c-41a5-8f24-f9d2e33d49e1" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="262efbe5-5e7a-451d-92d6-87627716c248" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="2c87147b-3ea1-4063-b307-030ba492ce74" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="2c290d2c-6b69-4e52-ae4f-49c68313dbbd" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="92081148-fe15-485a-95ef-28a51f6ed1c4" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="44292426-b871-4b5b-a512-178fb1d03ae3" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="6290a0de-e239-48e0-8800-a2827834810b" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob != null
log.info "storedClob != null : " + (storedClob != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="179a9708-466b-4929-a36c-54a2458fb2e3" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>Altibase.jdbc.driver.AltibaseDriver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:Altibase://192.168.0.6:20300/mydb</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>GICOMS</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value>GICOMS</con:value>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>altibase</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){

}

try{
sql.execute('''
CREATE TABLE qa_jdbc (
	workingName varchar(500) NOT NULL,
	blob_data blob,
	clob_data clob,
	constraint qa_jdbc_pk primary key (workingName)
 )
''')
} catch (Exception e){
  
}
</con:setupScript>
  </con:testSuite><con:testSuite id="c3aa1e89-8e7d-4c7d-944c-0d78ea9de123" name="Jdbc Postgresql TestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="9ad92e36-9b13-4b71-9fdb-c3ffbd5b13e2" keepSession="false" maxResults="0" name="select_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="9285e4ae-8e90-4b57-a90a-c3a355210817" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f0c8b477-1f21-426e-8d5a-27d7af78e256" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="5f5ea884-acfc-4958-a200-e9ff527131a5" keepSession="false" maxResults="0" name="select_multiline TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="56d5e811-6470-421b-8edc-af9867692a2e" name="receive - select_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="ca0e192a-720a-4dee-85e9-cb8564864c73" incomingWss="" name="receive - select_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl"><soap:Header/><soap:Body><sel:qa_jdbc><!--1 or more repetitions:--><item><workingName>${=request.testCase.name}</workingName><blob_data/><clob_data/></item><!--Optional:--><properties><databaseName>${#TestSuite#databaseName}</databaseName><sql>SELECT workingname, clob_data FROM qa_jdbc WHERE workingname LIKE '${=request.testCase.name}%'</sql></properties></sel:qa_jdbc></soap:Body></soap:Envelope>]]></con:request>
            <con:assertion id="513045f5-109f-4fe2-8127-f30c48a482c9" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="bb3ed730-14bd-4347-823b-42eee23df59b" name="result contains" type="Simple Contains">
              <con:configuration>
                <token>(?s).*&lt;workingName>${=request.testCase.name}[0-9]*&lt;/workingName>.*&lt;blob_data/>.*&lt;clob_data>num=00&lt;/clob_data>.*</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="4e8a827b-5999-4d38-ad11-c4e1b1e2aac1" name="workingName clobdata contents assert" type="XPath Match">
              <con:configuration>
                <path>concat(
string(//item[1]/workingName),
string(//item[2]/workingName),
string(//item[3]/workingName),
string(//item[4]/workingName),
string(//item[5]/workingName),
string(//item[6]/workingName),
string(//item[7]/workingName),
string(//item[8]/workingName),
string(//item[9]/workingName),
string(//item[10]/workingName),'
',string(//item[1]/clob_data),
string(//item[2]/clob_data),
string(//item[3]/clob_data),
string(//item[4]/clob_data),
string(//item[5]/clob_data),
string(//item[6]/clob_data),
string(//item[7]/clob_data),
string(//item[8]/clob_data),
string(//item[9]/clob_data),
string(//item[10]/clob_data)
)</path>
                <content>select_multiline TestCase00select_multiline TestCase01select_multiline TestCase02select_multiline TestCase03select_multiline TestCase04select_multiline TestCase05select_multiline TestCase06select_multiline TestCase07select_multiline TestCase08select_multiline TestCase09
num=00num=01num=02num=03num=04num=05num=06num=07num=08num=09</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion id="c55a8ccf-c73d-40d6-80f3-198afd2faae8" name="item count" type="XPath Match">
              <con:configuration>
                <path>count(//item)</path>
                <content>10</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute("DELETE FROM qa_jdbc WHERE workingname LIKE '"+ workingName+ "%'")

//sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )

String num = ''
for(int i = 0;  i &lt; 10; i++) {
  if (i &lt; 10){
    num = '0'+i
  } else {
    num = i
  }
  sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName+num, null, 'num=' + num] )
}
</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="e9e0e171-15cb-49f3-99a7-51ee131f273a" keepSession="false" maxResults="0" name="select_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="9b68fd65-9f91-4528-a7be-51722477f4f9" name="receive - select_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8ed2265f-dbe8-4713-9994-12663288cb20" incomingWss="" name="receive - select_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>SELECT blob_data FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="34398e47-62ed-4424-b787-5eeef02e0ec0" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="851ccbc9-eabb-45af-8c84-5f0ddf51f935" name="blob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;blob_data>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
FFNlKUB//9k=&lt;/blob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="c63d22e0-f527-478c-b8d0-f53352953eee" keepSession="false" maxResults="0" name="select_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="f792b02c-ab67-43e3-ae1e-30833cc09ad1" name="receive - select_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>select</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="e32c4403-c876-470e-b6c1-e296f46ef852" incomingWss="" name="receive - select_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/select</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:sel="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <sel:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>SELECT clob_data FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </sel:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="e1c24dac-7542-4106-adf9-ce5c4343f0df" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="ecb63f2d-2221-46eb-961c-8ddbf0dbed52" name="clob data contains" type="Simple Contains">
              <con:configuration>
                <token>&lt;clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.&lt;/clob_data></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/select/select.wsdl/selectPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1e1cf295-4cdf-49b4-8ede-d67f54921478" keepSession="false" maxResults="0" name="insert_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="c8811a34-3d67-4acd-b89f-7776f8efdbfe" name="receive - insert_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBxISEhUQEhAVFRUVFRUVFRcVFRUVFRUVFRUWFxUV
FRUYHSggGBolHRUVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGhAQGi0dHx0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf/AABEIAL4BCQMBIgACEQED
EQH/xAAcAAABBQEBAQAAAAAAAAAAAAABAAIDBAUGBwj/xAA5EAABAwIDBgMGBQUAAwEAAAABAAIR
AwQhMUEFBhJRYXETgZEiMqGx0fAHFELB4SNSYnLxM4KSY//EABkBAAMBAQEAAAAAAAAAAAAAAAAB
AgMEBf/EACMRAQEAAgMAAgICAwAAAAAAAAABAhEDITESQRNRMmEicYH/2gAMAwEAAhEDEQA/APYk
CE5BNJqBTkCmDCgQnEJlZ0AlAcN+JG8XgUvBYf6lQHu1mp7nL1XjTWGo6NPuei3N8NpG4ualSZBc
Q3/RuDfKB8Vm0IDSceSMe12ahj2H3W6ffqqdxSjPNblnbO4C7TTt1WZdMMnAeiVvZydMp9M9UWMI
VsD/ABHof2Kmpt/xI7GR6FLatKtJxH3+607e/cIa7FvI4j1++6a2gD3/APk/HBOZbxp3jA+n0U2r
kaVvRY/3TB/tP7H7CnbTj2XTI5/chZwpkYjL7+KvWt5xAMfEjJ37FK9GVSlOfkfr16quXGmcRhoR
l/CuTwmDiORTKrBHNp+CXoddupvLlSquwya46f4uXagrxAf0zE4HLkfvmu93Q3jBAt6zscqbjr/g
TzV4Za6rHkw+47NNKSC0YkkklKAKITJSlASIFAIlANKYU8ppQCCeFGCpAmAcE1SFNhAdKgigoUCB
RCTkwYVzH4gbW8C1cGn26nsN6T7zvIfMLqCvJ/xYvprNp6U2T5uP8JVWM3XndfUlSWwwiIx1+iiN
AuMnDkNe8K7ZU2g4Bzj/AKkpS6aWbWbG4c13DPs/q7clo3loHxwwQchgAe8Zpthsmo7E4jQR812W
y9kQW8TBl6LLPOb6a4cdcK7d555Z6D5KCru+QdPMkfFetU9ljKM9OSVTYQd7wnyUTOtPhI8ZqWNR
h949nQ9vrop6LgRDh7XL92uXpd/us0gxnp9Fx2193XsxY3LHSO4KqZlcP0o02DQz316FV72gB7Ud
CNQoadZzTMZYOC0HQ9og4xgefQ9lUqLFe3qcQjUDA8x9/RS0iQcfMc+3VZ0lhnT5HmtGZh7YJ1HP
/vwPdKgLi2w5tMx0/n/qoU3lp4XZaH6rVDsJGRjy5HuMlUuqAIjTSP0k8unyTJ127m9hbFKvi0ZO
1A68wu1pVQ4BzSCDkQvEKNYtPCdPguk3e3hfbmDjTOY5dW/RVjnrqss+PfcemwlCr2N+ys0PY4EH
l+/JWVqwABOQSQBSSQQCKaQnFAoBqc1NRCAeShKRQhMOmQRQKhQSgSkUEACvDfxBvg68q4zwuLRG
kL2fbF14VGpU1a0kDrGC+c7x5e9znGSXEnqTiSlWmE+zrR8u/wCfEmV2e7uyS/HnrqVyuw6PG8NG
pXsWxrMNYABoFly5a6jo48d90bDZDGgYepK1aduBkFIximDVhI2tMZTVhrQmBStWuLLJXuKUrJvb
MHMLfc1U7ukllieGTyvenYrWHxGjB0g/suVsjBdRJzxaeThl8MPNer7yW4dScDGWC8j2gwtfxDQ6
dM/vojC/VVnPtYriRJ5weh59lHZ1eH2T8fT+FcqwYfHsuEO8/oqN5SIPEOh74Z+Yj0WjJoMeB/qc
+h5/fRJ+Ag5afT5Khb3OQOWn0++qt8WmYzHbOO4zRBVa4twR10PzCp065bgcvkVpBwyPqqt3Qnv8
0Be2XtipRcHMdHTRw5FeibC3hp1244OHvDkvIGgjL0VqzvXMcHNcWuH3BTlsRlhMnuI6FFchuvvO
2oBTeYeOeTu30XXMeCtpduayw8IFGU151TIklCKs4qRjkjFEJIwgAShKJCbCZOnQRQKhQFBOQhAZ
u8FLit6jRmWOjvwlfPF+3hMc8PLMr6VrNkELwHfnZxo13NIyOHUTE/JTfWuHlhboCazV7RYthoXi
25Dh+ZY06/tC9qtjgseSdujC9LgTwmNUgKmRVJAORKguXEDBMgvtqU6LS57gAFzlXb1e4PDQpkN/
ufh8E642X4jw+o4mMhp6JX17Tt2ScOg16BL5WrmMiIbFc7GtU4p0GAXMbw7uQ0mmBgSceXLrgmX+
/wA4tJpskAlpOk5654clK7bFeeCpRxcAQQ4FpBEgiAE7jZ2Mc5l05ixHsupHAgmPvt8kwn9B6gfT
yKmvqZa/iiDlHbJRV4ImInPywPp9FcrPKaZVxSiYw6fRT2l1OBwIVk0+PDXIf5dO6yLukWnlj6FP
1DUqf878kWOkQf5Hbos6hefpf6/eSsF8Yzhz+8kArigc/Q8+/VU3Y54H79VrUa4dgf4PcaFQ3VqC
JHl9EBUo3PCRPw06gr0LdveHjaGueCRh7WvYrzV7NMj9/BKhcupmQqnXicpL69uO0WtEuOHkVWu9
4KDWn+pjGEYry11297Za89pj1VT8w4GMQU/nUfjj0OhvK1rYOeJWhY7wNqHhBA7mF5gyo4/qhS06
3IyUt1Xwxe0UK4OoPZWQvJdnbWfTPvELs9kbw+JDTM+WKqZs8uOx06EJtu+f5EKbhVM3QJJJJGSB
SQKYJy87/FXYnHTFw0Ytwd2+wF6IVXu6LXtLXCQRBSsVLqvm/Zt34NZlUfpeJ7Tj8CvdKd+xtMVC
fZIBHXBeXb8bsflXcTf/ABvd7J5E/pK6bcSuy5tm06vtOomIOrT7hPPDDyWfJOttuPLtsjeWrUMU
aBI/uOXcKza3104+2A30Vi5rtY3RoHkudrb1W7HNafEcXH2Q3XtOGiw1b1HVvGTddpSr81PIK5rY
+2KV00uouJjMOBa4YTkc+4WtZXE+ycwn3OqjX3BvW6hczelv5hj6klrBIaBMkyJ8vourqZqjcWId
kidXcV1ZquEdujTfWJplzaJmWkNBxxiQcR8V01PZbJw8yemg5BaFPZ8K1SpAaKrlb6JJj45LerY0
t42t7/suJqGJBGfrK9juaQIgiV55vNsMsJe3I/eKnxWtxyRkdR958ilWcHe8J0k691JPCc+E/DzC
ZVg6R1biP4WkY2Mm6teHEYt+XdQ0q5b1atEkjr2+iqVKIOIw6KtosS0LgDFpwVs1wcRh8j3WMW8O
IPcKVj8JCNFtoVqU4jP7wWe9/CYIw5/sVLQuI7cuXbopbqmHiR/3+UQVXpPIILHK1TvQcHNg89PR
Z9OxMzJj4q01vDgJ+ZTpTbSp2bTm4DyWhZ2DSeFsu6NGK6/db8Oi9jaly6AQCGNOMHH2nfsF6DZ7
JoW7OGnSa3lAHqU/jSvJI8ot92i4x4ZaOuJRv9369E+IwcTG58MhzecjXyXqzQJ90KNtuOM4aJ/j
ify1ye720eJoa8yD7rtZ5Hqt/wAM/wBx+Cp3O7vhVnPp4U6mbf7HjGR0KfwVOac69RdW9OrSTJRB
QkUCkkgAmPTimPKYYO82yG3VB9F2olp5OGRXl26Vd9pdNZUkCTRqg6GYae0wvZ6i8/8AxF2Hh+bp
tyEVAMyNHDqFNi8atb2273mmwTwl3txj7Oqbtywt7pjOEObUY3gbwsDhHIzEa4rU3dvm3VtTqHE8
PC7/AGbgfr5q+LWMMYWPyuPjqkmXrF3e2WKIA9ou4uMuJzcRE+mC1yYeD5K1TpAKG4EGeqi7rTqe
LJdOKTHKFr8FE95S2emgYTVVt68nhOasAqvkXx0FRZt9QDgQRIK0nKtWCKrG6ed7wbD4TxASPiFy
91TLeRHoV6xeUgQQQuH3h2YGhzhkljknOb7cg7/Yef1lIDqPI/yoriidFXp1YMELVhtdIac49Qqt
Zgbi3+FZLJHENPuOiid7WGvz/lMqo8WOCs21fTmq/hukYH0zWpQ2U8gPgx2VaTtGx+OGBXebo7mc
VJ13cMPCWnw2f3SPed06JfhtuxRuKz6lRpIpcGByJM5jyXql/RwawZF7Gx04gqmKcs/qL9pS4abW
6NaB6AKGuZVy4MBUOJVGVBjMk4thwPkUWYKSqJCYOeziELP/ACJWlRxEp6QQpzUwJwKkDKDikgUA
GlCoEg1OegK7wq1ejxAtMEEQQeStuCiIQbz21pHZl0aZn8tXPsk5U6mk9NPTku1Y9V9uWDK1N1N4
kH4dQuV2Jtzwav5Ku7ER4Tz+pujXHny5rLPF08Of7ds0qK5Zgm0qyc50hYuixHakSmX9fhEtYXnR
oiSe5wCoV6dQGWkfXuFLTeQA5x10S2qRPSLi5pLOAxJBIMYZSFoyCs78yBikdpUxm4eqcuiyxt+l
x7lDUUFK+a/Fpkc0+pVCWy0pXK5fbbC8cA1XQXlZZlBskuPkiUVxN5swjRYV1ZkHJeoV7QO0XP7R
2X0VzJncXI2YIDh2I9YSuKDhDw3l8V0NjsY1KjaYHvGD21XfWu6zCQC0ERitsZtjlfi4/d7dbxGe
IRJJBE8iV3lpuu0U3NIyJW3bWLabWhrY4YEdFo8OfULadMLbXMbi2raVW6Y0QP6Z+Dl0W0DBpn/9
G/NY+7fs3dw3m2mfQuH7hbl82XMHLid/8j6wkKsXzoCzw7P1Ut9cgwBihbWhOLvROEEqwQToVK3h
GWCeas4JbBlIxgn4KSmZT/DbyS2ajCIRISCREkQnIIBsJEIoFARkJjgpCi0CJKYVnWhzOXJebfiR
sjEVmiOHA9ivTa20ABgOLrkFmXdv4uLo6CBh6rLPOab8eF2813W3sezhoXXEJwp1HAgO5NcTr1Xc
070HVK82eHtLHAPacC1wBB8ljv2Uaf8A43ERk10kdgc1z3KX+nZjjr+2rd3IDeIlYFztYTg7yzPo
FNWrGOGoz92nzWc6hDuKmBGcCAUo6eH4S/5LdKu5+QIk5u/ZS/k2wOIkk55ekaplF7zg2mZ5nBaN
ps4zxPcJ5DRVt0Z8uGPixZUw1sAQNApaj8En4aqjc1DB4WucQJhoJPoFLz8u+6o7RuMeEZlSUW4Q
sqzcXvJcCDORwI6EFaweNFVmkb2maxQV7cFWKTXOwa0uPQE/JTPtKgGNNw/9TCQulXdzZ83DTGQJ
+H8ruLSlBKyN2KQ8Rx5M+Z/hdCxsQV08X8XJzfyRBsFPY3COWXZPqNS/y5Z9loyc3XHg31OppUBY
fmPiFr39wGuceTIHd5j9lBvFs99RrXUhLmuDhiBljhKom4NUubBDg5hIIgiMwQg2vs+1AHEc1NXr
yeBmevRQ3FxwMgZnADqrVhb8DccScSeqZHUaQaMcTzQc4JtavJ4RiSrFC3gYmfkkELSdE+X8lZ4g
EvECNhUISToQISAJJIoIyEiE4qC5r8Iwz+SN6OS26gVqoGGZ+81kVbhz3ubxRwjTA4jAj70Tql2A
eEYnPD5krMa41KwP9v8Aby5ErDK5Zf6dWOGOHvqxbDiDXBziS3ElxMq0GuGblFRZwgMboAFIWuWW
mu90HlQPUvA5NNMo0NqNaiDos2tswEyMO2C3jSKhqW6XxVM2K2m9n6p7rorPZZIBqOIJAMDSdD1V
A0BI7hdUWYnuteLGXe2XNyWa0ot2XSH6Se5KeyiAcAAOghXCFE4LomMnjmuVvtUts7Dp1wHRwvjB
zc+x5hUdl7uNYZe7j5CIHmJMromZJnDii4y3ZTOya2lpMDRAEDpgnh3VMhNATSkHDMgCTmYxKIM4
KJ6noBALyRZTJOKmATwEbBkKjf2TXkPb7NQZHQjk7mtApkIDNp2by9rnuBA0E5rSczSUWhSAI2EN
G3a3EDHnqp4SRCRonNlDwlLCKNhVhAhOhPFLmgkKCsikEfDHJA0qEqrd24cMjPQkLTdSGiq13huB
bjpyKLrXasd76c7WsIwGAPqVYtbLhED/AKrjqUmSobnaNOmMXYjQYn0WGWW3Tjh/2nstwE/hC4i9
37fx8NOh7IMEvdDumAyUtpva98/0PR+HyRMTymvXXuAUbgFjUNv03CXEs/2+oV1t2CJDgRzBkI1+
y98WiAoXMCjNwo311N0qY09zAtm0rh7A7XI9x9z5rnKlyFJsu/DKkOPsvgdA7Q/sqwy1UcmFsdGV
G5SBRvC6HKVJysRKqNOKsMcgHEJqlQLUBEArFNRAKamEBO1PTWpyRgUITkoQAARhIIpAkkkUAkkk
kBE2mU4U09BAINCSUIoBj8pWVWrBxmZ0AGPotdM4UrNrwymPbObauOeHTXzVR2w2ySSSTicvotzh
TeFHxg/Jlve3HXO5NF7nOc5+MYAgARPIY5o0N1aNP3eLtK60hNFIKpJCudvrBt9hU8ywR2xWZtu5
BHhUAABm8AYxo36ra2rdcQNNh9nJxGvQdFk+AFlyZ3yN+LD7yYFGzqg4Vqnm6fnKvm3fHvmeoCuw
AmPqLLTf5sOvbVCYdUd5QPiMVUuNm1AJFWpP+7iPSV0LnhRvIRIVy20t0dqOqM8GqSajB7xze3me
oy9F0LgvOzXNKoHswLTI+h6aLuNl7QbXpio3s4atdqCt8MtuXlw1dxM5qexydCHhytGKdhTwFVa8
tMOy5/VWmoBFqkYgAntakEjUUgikYJIoIAhJJJAJFJJAJBFJABFJJAJJJJAJCEUCgBCaU4oJg2Fl
313xey04ann26J95cF0tGABg8z/CoPKzyy+o1ww+6gqKrUdor1GkHkzMCMus/RW6dEN90R8/VTMN
tMuSYsins6o7P2RzOfkFO7ZtKIM95MrQdT6qFzQFpMJGN5LWVX2O0+49wPWCFl1LCuNGnqHfVdPU
cqj2yi4Q5y5Rx+0aNUYeGSehB9U/durc0KoeWjw3YPbMkjQjqPquqFAJ35VpSmMnisuW2arbpuDg
HAyDiE4LOsXlns6E+i04VsCzwKVNpbliOXLsi1T0ggHMKeEC1EIB4RQCKRgknIEIAIppRhAFJBJA
FFNlKUB//9k=</blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="0ac8ca6f-f61b-4c7b-90c2-ad4e05fa6270" name="receive - insert_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="be364439-24ad-40bf-805b-51af5b359ad0" incomingWss="" name="receive - insert_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="df8bece4-8c06-473e-a198-883040f294ee" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="695a38b3-c019-4151-b070-4732e60032af" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e27fe661-6f6b-49b7-97f3-57c90d3002ec" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="585def7b-55e4-44b6-8f47-3cd1efb6d83f" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="12970d89-3c0b-41dd-8bf7-874bb4ccbb7c" keepSession="false" maxResults="0" name="insert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="6cf7f884-cf93-4dd3-b8f4-8ada91b0bfbe" name="receive - insert_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="733ac496-04f1-45ca-a82b-afa5a994f2ac" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="379e4f7e-9cc0-4a81-88d6-ee6d7bd04253" keepSession="false" maxResults="0" name="insert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="8622a387-5896-4086-859d-61f43b9d91f3" name="receive - insert_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_data Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="eab344cc-0576-4151-b078-53cef78af933" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="e4ea56b7-4273-459d-8ba3-0d71f07d5a84" keepSession="false" maxResults="0" name="insert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="bbaf70d6-6fc2-4be4-914e-b8d75ee1d287" name="receive - insert_null_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="blob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="29461f72-7c6f-4ee0-80b2-fbf03ce8c84d" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="6edc86eb-8b6a-494c-bb3d-b8c29e771059" keepSession="false" maxResults="0" name="insert_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="9b347d34-359b-43ad-94f9-cd9c87c7ee93" name="receive - insert_null_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>insert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="617828d2-08bc-4323-89c5-7d5b2790bded" incomingWss="" name="receive - insert_null_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/insert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ins="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ins:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)</sql>\r
         </properties>\r
      </ins:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="150fd2c0-554e-41fd-9640-e500c38cacff" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="47facb28-99c2-4bdd-af91-85db8f867fb3" name="clob_null Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="e1c39ef9-dcdd-4b45-be8b-fc566bf753fe" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Insert</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/insert/insert.wsdl/insertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="ff253f70-0840-4843-ad10-b65f4aa10206" keepSession="false" maxResults="0" name="delete_auto TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="aa39e470-c465-494c-89ab-7faf9b5a3768" name="receive - delete_auto" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_auto" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="Script Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="4e9e1ef4-64bc-4e4c-ad00-524128db23e7" keepSession="false" maxResults="0" name="delete_manual TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="52eeb1be-4772-445c-9263-25d21a4f73ea" name="receive - delete_manual" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>delete</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="8e4a05b1-cf58-4ed2-8c28-1688436e8320" incomingWss="" name="receive - delete_manual" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/delete</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:del="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <del:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>DELETE FROM qa_jdbc WHERE workingname = ?</sql>\r
         </properties>\r
      </del:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="a02a9e85-1787-45e8-9e75-5ef1f8a93418" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="001ae2b1-776c-4aa3-a017-0c1c6058ad31" name="delete Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText/>
              </con:configuration>
            </con:assertion>
            <con:assertion id="bdf56164-22ea-4e5d-8900-f74b6155482c" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Delete</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/delete/delete.wsdl/deletePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a0045627-de31-485e-82b5-7098b8b86f11" keepSession="false" maxResults="0" name="update_all TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="cf2a84be-e61e-47b8-bcdf-f7f04ad53a50" name="receive - update_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="09697d03-af7b-4544-a2f2-16b7efaf527e" name="receive - update_null_all" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_null_all" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data, clob_data) VALUES (?, ?, ?)', [workingName, bdata, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="861320e0-b38a-4ce4-b7a0-0792d793a56e" keepSession="false" maxResults="0" name="update_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="3b47200d-1cd7-40fb-bbf9-3c4a14e1557e" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="9b0486a1-0fba-4460-aef4-bea5c04b4a56" keepSession="false" maxResults="0" name="update_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="99f5c084-943a-458f-972b-0688552f9ed9" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data/>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="908bbe22-d929-4a45-95f5-fd04c71d6f90" keepSession="false" maxResults="0" name="update_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="fc2b2baa-1244-4352-b20a-c5a616e68118" name="receive - update_blob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_blob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?</sql>\r
         </properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="af497423-bc4c-44a0-9530-12690defe36f" name="updated_blob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, blob_data) VALUES (?, ?)', [workingName, bdata] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="b1e0ddbf-3524-46a3-afad-f80c27ba7c52" keepSession="false" maxResults="0" name="update_null_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="70c41ffb-8f68-45c8-b476-fe84a54488e8" name="receive - update_clob" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>update</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="456369f5-1b6d-4a5c-ac74-87b8109b1a83" incomingWss="" name="receive - update_clob" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/update</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:upd="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <upd:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql>UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?</sql></properties>\r
      </upd:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="3b8f9b89-e73e-4d5f-bf7d-de7683211778" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="fb8fbd9d-8738-4dba-95dc-cb335493fc53" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Update</operation>
.*<success>1</success>
.*<failure>0</failure>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="79e99192-9e20-4e28-b45b-7c538defbd31" name="updated_clob Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/update/update.wsdl/updatePortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)
sql.execute('INSERT INTO qa_jdbc (workingname, clob_data) VALUES (?, ?)', [workingName, clobText] )</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="1bb4f25b-3f3e-48d2-81d7-2d65171da562" keepSession="false" maxResults="0" name="upsert_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="9432d08b-67aa-4f46-a1b7-378aeccc7409" name="receive - upsert_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName>\r
            <blob_data>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
FFNlKUB//9k=</blob_data>\r
            <clob_data/>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName>\r
            <sql/>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="4f36619f-96c6-4138-adf4-148647b52d78" name="update blob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET blob_data = null WHERE workingname = ?', workingName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null

log.info "storedBlobFile == null : " + (storedBlobFile == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="d293b634-263f-48df-aa10-397e82581e7e" name="receive - upsert_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+IMWElDQ19QUk9GSUxFAAEB
AAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IA
AAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtw
dAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABw
ZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwA
AAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAA
AABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAA
EnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA
ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAA
t4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMu
Y2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0
IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAA
LFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxS
ZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABM
CVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JU
IGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBo
AG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA
+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5
AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYC
wQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQG
BBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYF
pgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeG
B5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJ
zwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxc
DHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EP
Xg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKj
EsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkW
bBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3
Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+Hukf
Ex8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPw
JB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgp
aymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8k
L1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01
hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76Dwn
PGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpD
fUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsM
S1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNT
X1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvl
XDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOll
PWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27E
bx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5
KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6
hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6P
No+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrV
m0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2n
bqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1ErbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQl
tJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB
48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+4
0DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hze
ot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c
7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9
uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgICAwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgBaQGQAwER
AAIRAQMRAf/EANwAAQAABQUBAAAAAAAAAAAAAAADBAUGCAECBwkKCwEBAAEEAwEAAAAAAAAAAAAA
AAECAwQFBgcICRAAAQIFAwIDBAYGBgYFCAsBAQIDABEEBQYhBwgxEkETCVFhcSKBkbEyFArwocHR
IxXhQlJyMxbxYoKyQxfCJHQ1GFNzszQldTYnouLDRFXVpjcoOBkaEQACAQMBBgMEBAkJBgUFAQAA
AQIRAwQFITFBURIGYXEHgSIyE5GhQhTwscHR4VIjFQhicoKSsjNDUxbxotIkdDZjc7M0VGQlNRc3
GP/aAAwDAQACEQMRAD8A9W9txHDHLdZlW/FaChYeo6N+ot9MVtWpVbWOqS6pC3JLedCu0JnqrQSm
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
73ww48l7RsfuDmW9rlXZHrterzn7lXcRbGrUu3U9BTUdO8hK1vKKQPb/AAB1W+stmW6Vp4J7h7Yb
A0tnu3InkhesX2B2Nx6+VDVPb8gzPM7kK+5W+pLrjSDTqwqw3UqK1JaSe3zFBJMAdbPHblVxJwOw
cBeV27N55Acn+UfJXkzYeBVqG6T9joLxw/3yvdJcMd3Zw2k2htn8mwram34VW2Y01zepKapvFXbX
mXRUuMO9pAybtHr+8RmuGG+3MrN6G7Y3atqeRe9fG7A9qbRdbflu5W+eY7W3WloMcVgNntbSHPJz
qkulJUqeeT+DtLLql1D5QkKWBilY/W/5UbI8odidkOfGzXG7ZpPImzXTd27Ylhm5OSXfJuHmwFgw
LMMxar+QWWV9I5i+Q7t5wceCbbj9pbZXKnekVFxpIAxBv3qFcjPUywzLOZu3OX728V9q9lOdGwvD
fiNs1g+Z1uJ3DdbdvKN38L/5gbpck0JoKVy9Wam24u6rdT4k4k0NI45UF5Tj474A9o3ejvDZWjzC
grCJgLKEkJUsIn3dgUoCfQEwBugBACAEAIAQAgBACAEAIAQAgBAGxY0n7Jfp+uAKfWGTQT/aUPqG
pgCkkTEoAszInPIpKgoHcpTLoHumkgfriHuJ47TATjKad3H6BLDCW1UORZRQOupSlCnXWLhUVaXn
Cn75UzXIRNU1Eo9gTFD+NILZEzfs4AXI/wBUd0/bqCDKf7YrILwbEnVfNOSEzHs0TL6JQBdVpR2s
rXPVSgJeyQJ198zEgrHcr2/p8esAb0qJMj9f74A3wAgBAEN0kIURoQCfqBl+uAJJFaRo4mfTVOh9
5I6fZAE4h9tz7qvr0gCLACAEAYp8lOHOz/KJGD3DMlZrg+4G1l9r8l2r3j2dzG6ba7t7eXi8UqaG
/rxzL7HJ1VryShQlm526tarLdcW0pFQw52IKZq6U4DjXidI/qocR9iOG3BvK9xcRyPfTIeY+4XKn
Z647J8tsl3QrKvfSx8s9ynWdj9scxyjc5yjpaKybRYTiF7qaKsx5qkasj9nS5RppjUVIdi/buNvp
k/cpu/QWnCKq1vqT2B8NMN9MD1C+Bu8x3KzTezdrm3Zt0OH/ADC3m3YyivyfP92N2azAGd6Nrt0K
OkuFS+jH6CmvGz9ZjjdstyGKG32WtpEKSsseapOXVbbpTaqPdVbeRWlRnpVHQS0Hh8PD9UY5UWvn
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
4/6qpX+UdQesGs/urs27jwdMjMnGzHn0/FN+HuqlfE9H8eHzxwIAQAgBAEhdrTar9a7hZL5baK8W
a70dRb7parlTt1VBcKGqbLVRS1VO6Ch1l1tRBHUdQQQDGRiZeVgZNvNwrk7WXakpQnF0lGS3NP8A
Cu5l/FysnCyIZeHOVrKtyUoyi6OMluaf4cjzscxOEeV8er5Vbj7You102lcrP5lTV9vfeN922qy+
lbVBdXqdSKw2yndUBSXBGgSAl0pWJq9rem/qjp3emJHStW6LXcUY0lCSXRfVKOdtPZV/bg9z3VTP
Xvp/6j6f3dirTdTcLevRjSUGl03lTbKCezb9qHBvZVMzD4aeoha8mpLZtlyCvbNsytosW/HNxrgU
MWvJW5eXTUeVVKUpZtt7SEhArF9rFSSC4UuEqV1t6m+jN6zcnr3Z1rqxnWV3Gjvi97laXGPOC2r7
PI6/9RPSS7anPWu07XVYdZXMdb48XK0uK5wW77PI7ckqStDbjakONutodadbUlxt1pxIW2604glD
jbiCClQJBBmI82SjKEnCacZxdGmqNNb009qfgefJRlCThNOM06NNUaa3pp7UzWKSBACAEAIAQBx9
ujujhWzeE3jcDP7u3aMfs7RM/lXXXSuUlRpLNZqQqC6+617gCG209J9yilCVKG+7c7c1XurVbeka
Rbc8ib2v7MI8ZzfCK+vctpuu39A1LubU4aVpUOu/J7X9mEeMpPgl9e5HnKyG97xeoTyJp6K2NuUz
dSpxmwWqrfW7j22mDU7qTU3CtLKEt+Z2/wASpcAL1ZVLDaSR2Ae2MLF7a9IuznO60rVtVuTSXzMi
81sS5tvZFbox4LaewcTG7e9Le1HK40rVtVnJJfMv3XuXi29kVuiuB6E9idj8M4+7eWvb3DGluM03
/XL3e6pCBcslvryAK283AomEF1Q7WWQSinZCUJ6Enxp3j3dqfemsz1fUfdj8Nu2n7tqHCK5vjKW+
T8KI8k91906h3dq09Uz/AHY7rdtP3bcOEVzfGUt7fhRHMccUONCAEAIAQBBqaGjulLU2u407dXbr
nTP26vpHUhTVVQ1zS6Wrp3EqBBQ8w6pJ08Yu2ci9h3oZePJxyLU1OLW9Si6p/Si5ZyLuJehlY7cb
9qSnFrepRdU/pR5e9jq64bF89NqX8Mrqi31e3HKbErfY6pp0oeapKDcejtbbJcQE9yF29wsrHRSC
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
x8k/7tqf+1n/AHFxIe9/hxP/2Q==</blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File expectedBlobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob01.jpg')
byte[] expected = FileUtils.readFileToByteArray(expectedBlobFile)

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob
byte[] stored = storedBlobFile.getBytes(1, (int)storedBlobFile.length());

assert expected == stored</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="896311c4-ef87-4a92-97c8-083c82795a39" keepSession="false" maxResults="0" name="upsert_clob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="f80ab94c-7e25-4b58-ad2b-fc162ded8165" name="receive - upsert_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>===============================================
Use Megaware Smart Integration Agreement 
===============================================

Terms of Use

  Thank you for using Magaware Smart Integration software("Megaware") from Megatus Co., Ltd. ("Megatus"). 
  All software, documentation, information and other materials provided from Magatus
  may be used solely under the following terms and conditions. 
  Installation of Megaware constitutes your agreement to the Terms of Use. 
  Please read the terms carefully before installation.

Use of Software 
  Magaware is protected by the Universal Copyright Convention and intellectual property rights.

1. License
   Megatus grants each customer who paid according to the contract a non-exclusive 
   and non-transferable license to use Megaware under the condition of the following terms.
   The software may be copied for backup and other permitted purposes, 
   and all copies you make must include any copyright 
   or other proprietary notices originally shown or included in the software. 
   All rights not stipulated shall be governed by Megatus.

2. Limitations
   Except as otherwise expressly stated, 
   customers are granted no ownership or intellectual property rights.
   These terms are not about sale of software rights but the use of Megaware.
   Customers may not rent or exploit any parts of the software 
   in any way including reverse engineering and decompilation.
   Software upgrades and all other software provided for support are regarded as parts of Megaware, 
   and may also be used under the these terms unless otherwise agreed.

3. termination of Use
   Megatus may terminate the contract if Megatus determines, 
   in its sole discretion, that you have infringed the terms. 
   Upon termination of the contract, 
   you must destroy or return all materials obtained from us.

4. Open Source license
   Magaware operates based on various open sources, 
   and use of these open sources must be under terms and conditions of the open sources.</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="e3b02cc8-38b0-4b0c-a61a-117990e1f60e" name="update clob_data to null" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('UPDATE qa_jdbc SET clob_data = null WHERE workingname = ?', workingName)

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null
log.info "storedClob == null : " + (storedClob == null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="56ec5ffd-c929-42a6-913f-7d9d6e5ab748" name="receive - upsert_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data>Welcome to Facebook! 

These Terms govern your use of Facebook and the products, features, apps, services, technologies, and software we offer (the Facebook Products or Products), except where we expressly state that separate terms (and not these) apply.
Return to top
1. Our Services
Our mission is to give people the power to build community and bring the world closer together. To help advance this mission, we provide the Products and services described below to you:
Provide a personalized experience for you:
Your experience on Facebook is unlike anyone else's: from the posts, stories, events, ads, and other content you see in News Feed or our video platform to the Pages you follow and other features you might use, such as Trending, Marketplace, and search. We use the data we have - for example, about the connections you make, the choices and settings you select, and what you share and do on and off our Products - to personalize your experience.
Connect you with people and organizations you care about:
We help you find and connect with people, groups, businesses, organizations, and others that matter to you across the Facebook Products you use. We use the data we have to make suggestions for you and others - for example, groups to join, events to attend, Pages to follow or send a message to, shows to watch, and people you may want to become friends with. Stronger ties make for better communities, and we believe our services are most useful when people are connected to people, groups, and organizations they care about.
Empower you to express yourself and communicate about what matters to you:
There are many ways to express yourself on Facebook and to communicate with friends, family, and others about what matters to you - for example, sharing status updates, photos, videos, and stories across the Facebook Products you use, sending messages to a friend or several people, creating events or groups, or adding content to your profile. We also have developed, and continue to explore, new ways for people to use technology, such as augmented reality and 360 video to create and share more expressive and engaging content on Facebook.
Help you discover content, products, and services that may interest you:
We show you ads, offers, and other sponsored content to help you discover content, products, and services that are offered by the many businesses and organizations that use Facebook and other Facebook Products. Our partners pay us to show their content to you, and we design our services so that the sponsored content you see is as relevant and useful to you as everything else you see on our Products.
Combat harmful conduct and protect and support our community:
People will only build community on Facebook if they feel safe. We employ dedicated teams around the world and develop advanced technical systems to detect misuse of our Products, harmful conduct towards others, and situations where we may be able to help support or protect our community. If we learn of content or conduct like this, we will take appropriate action - for example, offering help, removing content, blocking access to certain features, disabling an account, or contacting law enforcement. We share data with other Facebook Companies when we detect misuse or harmful conduct by someone using one of our Products.
Use and develop advanced technologies to provide safe and functional services for everyone:
We use and develop advanced technologies - such as artificial intelligence, machine learning systems, and augmented reality - so that people can use our Products safely regardless of physical ability or geographic location. For example, technology like this helps people who have visual impairments understand what or who is in photos or videos shared on Facebook or Instagram. We also build sophisticated network and communication technology to help more people connect to the internet in areas with limited access. And we develop automated systems to improve our ability to detect and remove abusive and dangerous activity that may harm our community and the integrity of our Products.
Research ways to make our services better:
We engage in research and collaborate with others to improve our Products. One way we do this is by analyzing the data we have and understanding how people use our Products. You can learn more about some of our research efforts.
Provide consistent and seamless experiences across the Facebook Company Products:
Our Products help you find and connect with people, groups, businesses, organizations, and others that are important to you. We design our systems so that your experience is consistent and seamless across the different Facebook Company Products that you use. For example, we use data about the people you engage with on Facebook to make it easier for you to connect with them on Instagram or Messenger, and we enable you to communicate with a business you follow on Facebook through Messenger.
Enable global access to our services:
To operate our global service, we need to store and distribute content and data in our data centers and systems around the world, including outside your country of residence. This infrastructure may be operated or controlled by Facebook, Inc., Facebook Ireland Limited, or its affiliates.
Return to top
2. Our Data Policy and Your Privacy Choices
To provide these services, we must collect and use your personal data. We detail our practices in the Data Policy, which you must agree to in order to use our Products.
We also encourage you to review the privacy choices you have in your settings.
Return to top
3. Your Commitments to Facebook and Our Community
We provide these services to you and others to help advance our mission. In exchange, we need you to make the following commitments:
1. Who can use Facebook
When people stand behind their opinions and actions, our community is safer and more accountable. For that reason, you must:
Use the same name that you use in everyday life.
Provide accurate information about yourself.
Create only one account (your own) and use your timeline for personal purposes.
Not share your password, give access to your Facebook account to others, or transfer your account to anyone else (without our permission).
We try to make Facebook broadly available to everyone, but you cannot use Facebook if:
You are under 14 years old.
You are a convicted sex offender.
We previously disabled your account for violations of our terms or policies.
You are prohibited from receiving our products, services, or software under applicable laws.
2. What you can share and do on Facebook
We want people to use Facebook to express themselves and to share content that is important to them, but not at the expense of the safety and well-being of others or the integrity of our community. You therefore agree not to engage in the conduct described below (or to facilitate or support others in doing so):
You may not use our Products to do or share anything:
That violates these Terms, our Community Standards, and other terms and policies that apply to your use of Facebook.
That is unlawful, misleading, discriminatory or fraudulent.
That infringes or violates someone else's rights.
You may not upload viruses or malicious code or do anything that could disable, overburden, or impair the proper working or appearance of our Products.
You may not access or collect data from our Products using automated means (without our prior permission) or attempt to access data you do not have permission to access.
We can remove content you share in violation of these provisions and, if applicable, we may take action against your account, for the reasons described below. We may also disable your account if you repeatedly infringe other people's intellectual property rights.
To help support our community, we encourage you to report content or conduct that you believe violates your rights (including intellectual property rights) or our terms and policies.
3. The permissions you give us
We need certain permissions from you to provide our services: 
Permission to use content you create and share: You own the content you create and share on Facebook and the other Facebook Products you use, and nothing in these Terms takes away the rights you have to your own content. You are free to share your content with anyone else, wherever you want. To provide our services, though, we need you to give us some legal permissions to use that content.
Specifically, when you share, post, or upload content that is covered by intellectual property rights (like photos or videos) on or in connection with our Products, you grant us a non-exclusive, transferable, sub-licensable, royalty-free, and worldwide license to host, use, distribute, modify, run, copy, publicly perform or display, translate, and create derivative works of your content (consistent with your privacy and application settings). This license is for the purpose of making our Products available to you and to others that access or use them. This means, for example, that if you share a photo on Facebook, you give us permission to store, copy, and share it with others (again, consistent with your settings) such as service providers that support our service or other Facebook Products you use.
You can end this license any time by deleting your content or account. You should know that, for technical reasons, content you delete may persist for a reasonable period of time in backup copies (generally, for a maximum of 90 days after deletion begins, but it will not be visible to other users during that time). Notwithstanding the foregoing, if required by law, order of any government agency or judicial body, or the like, we may retain the content to the extent necessary therefor. In addition, content you delete may continue to appear if you have shared it with others and they have not deleted it.
Permission to use your name, profile picture, and information about your actions with ads and sponsored content: You give us permission, in accordance with applicable settings, to use your name and profile picture and information about actions you have taken on Facebook (e.g., indicating "like") for the purpose of enabling us to show such information next to or in connection with ads, offers, and other sponsored content that we display across our Products, without any compensation to you. For example, we may show your friends that you are interested in an advertised event or have liked a Page created by a brand that has paid us to display its ads on Facebook. Ads like this can be seen only by people who have your permission to see the actions you've taken on Facebook. You can learn more about your ad settings and preferences.
Permission to update software you use or download: If you download or use our software, you give us permission to download and install upgrades, updates, and additional features to improve, enhance, and further develop it.
4. Limits on using our intellectual property
If you use content covered by intellectual property rights that we have and make available in our Products (for example, images, designs, videos, or sounds we provide that you add to content you create or share on Facebook), we retain all rights to that content (but not yours). You can only use our copyrights or trademarks (or any similar marks) as expressly permitted by our Brand Usage Guidelines or with our prior written permission. You must obtain our written permission (or permission under an open source license) to modify, create derivative works of, decompile, or otherwise attempt to extract source code from us.
Return to top
4. Additional provisions
1. Updating our Terms
We work constantly to improve our services and develop new features to make our Products better for you and our community. As a result, we may need to update these Terms from time to time to accurately reflect our services and practices. Unless otherwise required by law, we will notify you before we make changes to these Terms and give you an opportunity to review them at least 30 days before they go into effect. Once any updated Terms are in effect, you will be bound by them if you continue to use our Products following the effective date of the changes.
We hope that you will continue using our Products, but if you do not agree to our updated Terms and no longer want to be a part of the Facebook community, you can delete your account at any time.
2. Account suspension or termination
We want Facebook to be a place where people feel welcome and safe to express themselves and share their thoughts and ideas.
If we determine that you have violated our terms or policies, we may take action against your account to protect our community and services, including by suspending access to your account or disabling it. We may also suspend or disable your account if you create risk or legal exposure for us or when we are permitted or required to do so by law. Where appropriate, we will notify you about your account the next time you try to access it. You can learn more about what you can do if your account has been disabled.
If you delete or we disable your account, these Terms shall terminate as an agreement between you and us, but the following provisions will remain in place: 3, 4.2-4.5
3. Limits on liability
We work hard to provide the best Products we can and to specify clear guidelines for everyone who uses them. Our Products, however, are provided "as is," and we make no guarantees that they always will be safe, secure, or error-free, or that they will function without disruptions, delays, or imperfections. To the extent permitted by law, we also DISCLAIM ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. We do not control or direct what people and others do or say, and we are not responsible for their actions or conduct (whether online or offline) or any content they share (including offensive, inappropriate, obscene, unlawful, and other objectionable content).
We cannot predict when issues might arise with our Products. Accordingly, our liability shall be limited to the fullest extent permitted by applicable law, and under no circumstance will we be liable to you for any lost profits, revenues, information, or data, or consequential, special, indirect, exemplary, punitive, or incidental damages arising out of or related to these Terms or the Facebook Products, even if we have been advised of the possibility of such damages.
Notwithstanding the foregoing, applicable law may not allow the limitation or exclusion of liability set forth above. In such case, we shall bear liability to the extent required by such law.
4. Disputes
We try to provide clear rules so that we can limit or hopefully avoid disputes between you and us. If a dispute does arise, however, it's useful to know up front where it can be resolved and what laws will apply.
If you are a consumer, the laws of the country in which you reside will apply to any claim, cause of action, or dispute you have against us that arises out of or relates to these Terms or the Facebook Products ("claim"), and you may resolve your claim in any competent court in that country that has jurisdiction over the claim. In all other cases, you agree that the claim must be resolved exclusively in the U.S. District Court for the Northern District of California or a state court located in San Mateo County, that you submit to the personal jurisdiction of either of these courts for the purpose of litigating any such claim, and that the laws of the State of California will govern these Terms and any claim, without regard to conflict of law provisions.
5. Other
These Terms (formerly known as the Statement of Rights and Responsibilities) make up the entire agreement between you and Facebook, Inc. regarding your use of our Products. They supersede any prior agreements.
Some of the Products we offer are also governed by supplemental terms. If you use any of those Products, supplemental terms will be made available and will become part of our agreement with you. For instance, if you access or use our Products for commercial or business purposes, such as buying ads, selling products, developing apps, managing a group or Page for your business, or using our measurement services, you must agree to our Commercial Terms. If you post or share content containing music, you must comply with our Music Guidelines. To the extent any supplemental terms conflict with these Terms, the supplemental terms shall govern to the extent of the conflict.
If any portion of these Terms are found to be unenforceable, the remaining portion will remain in full force and effect. If we fail to enforce any of these Terms, it will not be considered a waiver. Any amendment to or waiver of these Terms must be made in writing and signed by us.
You will not transfer any of your rights or obligations under these Terms to anyone else without our consent.
You may designate a person (called a legacy contact) to manage your account if it is memorialized. Only your legacy contact or a person who you have identified in a valid will or similar document expressing clear consent to disclose your content upon death or incapacity will be able to seek disclosure from your account after it is memorialized.
These Terms do not confer any third-party beneficiary rights. All of our rights and obligations under these Terms are freely assignable by us in connection with a merger, acquisition, or sale of assets, or by operation of law or otherwise.
You should know that we may need to change the username for your account in certain circumstances (for example, if someone else claims the username and it appears unrelated to the name you use in everyday life).
We always appreciate your feedback and other suggestions about our products and services. But you should know that we may use them without any restriction or obligation to compensate you, and we are under no obligation to keep them confidential.
We reserve all rights not expressly granted to you.
Return to top
5. Other terms and policies that may apply to you
Community Standards: These guidelines outline our standards regarding the content you post to Facebook and your activity on Facebook and other Facebook Products.
Commercial Terms: These terms apply if you also access or use our Products for any commercial or business purpose, including advertising, operating an app on our Platform, using our measurement services, managing a group or a Page for a business, or selling goods or services.
Advertising Policies: These policies specify what types of ad content are allowed by partners who advertise across the Facebook Products.
Self-Serve Ad Terms: These terms apply when you use self-serve advertising interfaces to create, submit, or deliver advertising or other commercial or sponsored activity or content.
Pages, Groups and Events Policy: These guidelines apply if you create or administer a Facebook Page, group, or event, or if you use Facebook to communicate or administer a promotion.
Facebook Platform Policy: These guidelines outline the policies that apply to your use of our Platform (for example, for developers or operators of a Platform application or website or if you use social plugins).
Developer Payment Terms: These terms apply to developers of applications that use Facebook Payments.
Community Payment Terms: These terms apply to payments made on or through Facebook.
Commerce Policies: These guidelines outline the policies that apply when you offer products and services for sale on Facebook.
Facebook Brand Resources: These guidelines outline the policies that apply to use of Facebook trademarks, logos, and screenshots.
Music Guidelines: These guidelines outline the policies that apply if you post or share content containing music on Facebook.

Date of Last Revision: April 19th, 2018</clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String expectedText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob01.txt').getText('UTF-8')

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)
String storedText = storedClob.getAsciiStream().getText('UTF-8')

assert expectedText == storedText</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="a74a84bb-c4ae-47db-81f5-98d9d4db9fc8" keepSession="false" maxResults="0" name="upsert_null_blob TestCase" searchProperties="true">
      <con:settings/>
      <con:testStep id="508585f3-6c9a-4306-8adf-8fdaa9954374" name="receive - upsert_null_blob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="5bce4a29-7e84-40d3-9cf7-392d828dc269" name="update blob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

File blobFile = new File(context.expand('${projectDir}') + '/jdbc_resources/blob.jpg')
byte[] bdata = FileUtils.readFileToByteArray(blobFile)

sql.execute('UPDATE qa_jdbc SET blob_data = ? WHERE workingname = ?', [bdata, workingName])

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile != null

log.info "storedBlobFile != null : " + (storedBlobFile != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="e661dd30-8f71-4885-b557-886c02444c0b" name="receive - upsert_null_blob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_blob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data><clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="blob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Blob storedBlobFile = sql.firstRow("SELECT blob_data as blob FROM qa_jdbc WHERE workingname = '" + workingName + "'").blob

assert storedBlobFile == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" failOnError="true" failTestCaseOnErrors="true" id="c9b117e3-ecfc-44cb-baf0-caf7ff2fb497" keepSession="false" maxResults="0" name="upsert_null_clob TestCase" searchProperties="true" timeout="0" wsrmAckTo="" wsrmEnabled="false" wsrmVersion="1.0">
      <con:settings/>
      <con:testStep id="2baa7889-8cf4-46a1-b85d-1b62fac04432" name="receive - upsert_null_clob_insert" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_insert" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>1</insert>
.*<update>0</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep id="f39cee73-44e5-4987-9e5a-55b8f5e360f5" name="update clob_data to notNull" type="groovy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

String clobText = new File(context.expand('${projectDir}') + '/jdbc_resources/clob.txt').getText('UTF-8')

sql.execute('UPDATE qa_jdbc SET clob_data = ? WHERE workingname = ?', [clobText, workingName])

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob != null
log.info "storedClob != null : " + (storedClob != null).toString()</script>
        </con:config>
      </con:testStep>
      <con:testStep id="0ab883a2-3156-441a-9c4c-5e756a18b5fb" name="receive - upsert_null_clob_update" type="request">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>upsert</con:interface>
          <con:operation>receive</con:operation>
          <con:request id="31a69d68-7c47-4233-b73f-3480bd4ecf64" incomingWss="" name="receive - upsert_null_clob_update" outgoingWss="" sslKeystore="" timeout="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>http://${mwHubAddress}:${mwHubPort}/mediate/qa/run/protocol/Jdbc/upsert</con:endpoint>
            <con:request><![CDATA[
              
              <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ups="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl">\r
   <soap:Header/>\r
   <soap:Body>\r
      <ups:qa_jdbc>\r
         <!--1 or more repetitions:-->\r
         <item>\r
            <workingName>${=request.testCase.name}</workingName><blob_data></blob_data>\r
            <clob_data></clob_data>\r
         </item>\r
         <!--Optional:-->\r
         <properties>\r
            <databaseName>${#TestSuite#databaseName}</databaseName><sql></sql>\r
         </properties>\r
      </ups:qa_jdbc>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request>
            <con:assertion id="27956e4c-1bf7-43b6-b10d-583277f75bac" name="SOAP Response" type="SOAP Response"/>
            <con:assertion id="58552145-ab2c-49e7-878a-0bdceff1b3c7" name="result contains" type="Simple Contains">
              <con:configuration>
                <token><![CDATA[(?s).*<.*result.*>
.*<operation>Upsert</operation>
.*<success>1</success>
.*<insert>0</insert>
.*<update>1</update>
.*</.*result>
.*]]></token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>true</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion id="f69df067-b379-4069-93fa-1e015ebe7840" name="clob_upsert Assertion" type="GroovyScriptAssertion">
              <con:configuration>
                <scriptText>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "username" )
def password = messageExchange.modelItem.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = messageExchange.modelItem.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

java.sql.Clob storedClob = sql.firstRow("SELECT clob_data FROM qa_jdbc WHERE workingname = '" + workingName + "'").getAt(0)

assert storedClob == null</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:megaware:/mediate/qa/run/protocol/Jdbc/upsert/upsert.wsdl/upsertPortType/receiveInput" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testRunner.testCase.testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testRunner.testCase.testSuite.getPropertyValue( "jdbcUrl" )
def username = testRunner.testCase.testSuite.getPropertyValue( "username" )
def password = testRunner.testCase.testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def workingName = testRunner.testCase.name

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

sql.execute('DELETE FROM qa_jdbc WHERE workingname = ?', workingName)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>driverClassName</con:name>
        <con:value>org.postgresql.Driver</con:value>
      </con:property>
      <con:property>
        <con:name>jdbcUrl</con:name>
        <con:value>jdbc:postgresql://192.168.0.8:5432/megaware</con:value>
      </con:property>
      <con:property>
        <con:name>username</con:name>
        <con:value>megaware</con:value>
      </con:property>
      <con:property>
        <con:name>password</con:name>
        <con:value>megaware</con:value>
      </con:property>
      <con:property>
        <con:name>databaseName</con:name>
        <con:value>postgresql</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import groovy.sql.Sql
import java.sql.*
import org.apache.commons.io.FileUtils

def driverClassName = testSuite.getPropertyValue( "driverClassName" )
def jdbcUrl = testSuite.getPropertyValue( "jdbcUrl" )
def username = testSuite.getPropertyValue( "username" )
def password = testSuite.getPropertyValue( "password" )

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver(driverClassName)

def sql = Sql.newInstance(jdbcUrl, username, password, driverClassName) 

try{
  sql.execute('''
    DROP TABLE qa_jdbc
  ''')
} catch (Exception e){

}

try{
sql.execute('''
CREATE TABLE qa_jdbc (
	workingName varchar(500) NOT NULL,
	blob_data bytea,
	clob_data text,

	constraint qa_jdbc_pk primary key (workingName)
 )
''')
} catch (Exception e){
  
}
</con:setupScript>
  </con:testSuite><con:properties>
    <con:property>
      <con:name>driverClassName</con:name>
      <con:value>oracle.jdbc.driver.OracleDriver</con:value>
    </con:property>
    <con:property>
      <con:name>url</con:name>
      <con:value>jdbc:oracle:thin:@192.168.0.7:1521:orcl</con:value>
    </con:property>
    <con:property>
      <con:name>username</con:name>
      <con:value>TARGET_DATA</con:value>
    </con:property>
    <con:property>
      <con:name>password</con:name>
      <con:value>TARGET_DATA</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>